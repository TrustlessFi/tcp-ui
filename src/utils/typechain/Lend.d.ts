/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendInterface extends ethers.utils.Interface {
  functions: {
    "addReferencePool(address)": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "countTokensAvailable(address)": FunctionFragment;
    "currentToken(address)": FunctionFragment;
    "deployer()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "lend(uint256)": FunctionFragment;
    "lendZhu()": FunctionFragment;
    "maxRatioOfTotalDebtAllowedPerBlock()": FunctionFragment;
    "mintZhu(address,uint256)": FunctionFragment;
    "oneToOneMintedZhuByBlock()": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "returnZhu(address,uint256)": FunctionFragment;
    "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "unlend(uint256)": FunctionFragment;
    "validToken(address)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "valueOfLendTokensInZhu(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countTokensAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "lend", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "lendZhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxRatioOfTotalDebtAllowedPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintZhu",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oneToOneMintedZhuByBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnZhu",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRatioOfTotalDebtAllowedPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfLendTokensInZhu",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countTokensAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxRatioOfTotalDebtAllowedPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneToOneMintedZhuByBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRatioOfTotalDebtAllowedPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfLendTokensInZhu",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "Lend(address,uint256,uint256)": EventFragment;
    "MintZhu(address,address,uint256)": EventFragment;
    "OneToOneMintingDisabled()": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "ReturnZhu(address,address,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "Unlend(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintZhu"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneToOneMintingDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnZhu"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlend"): EventFragment;
}

export class Lend extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendInterface;

  functions: {
    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    currentToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lend(
      zhuCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lend(uint256)"(
      zhuCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lendZhu(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lendZhu()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    maxRatioOfTotalDebtAllowedPerBlock(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxRatioOfTotalDebtAllowedPerBlock()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mintZhu(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintZhu(address,uint256)"(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    oneToOneMintedZhuByBlock(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      count: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "oneToOneMintedZhuByBlock()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      count: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    returnZhu(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "returnZhu(address,uint256)"(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopped()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    valueOfLendTokensInZhu(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "valueOfLendTokensInZhu(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  addReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  countTokensAvailable(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countTokensAvailable(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "currentToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lend(
    zhuCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lend(uint256)"(
    zhuCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lendZhu(overrides?: CallOverrides): Promise<string>;

  "lendZhu()"(overrides?: CallOverrides): Promise<string>;

  maxRatioOfTotalDebtAllowedPerBlock(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxRatioOfTotalDebtAllowedPerBlock()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintZhu(
    tokenToDeposit: string,
    zhuToMint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintZhu(address,uint256)"(
    tokenToDeposit: string,
    zhuToMint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  oneToOneMintedZhuByBlock(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    count: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "oneToOneMintedZhuByBlock()"(overrides?: CallOverrides): Promise<{
    blockNumber: BigNumber;
    count: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  returnZhu(
    tokenToRecieve: string,
    zhuToReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "returnZhu(address,uint256)"(
    tokenToRecieve: string,
    zhuToReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxRatioOfTotalDebtAllowedPerBlock(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)"(
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  unlend(
    lendTokenCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlend(uint256)"(
    lendTokenCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "validToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  valueOfLendTokensInZhu(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "valueOfLendTokensInZhu(uint256)"(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lend(zhuCount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lend(uint256)"(
      zhuCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lendZhu(overrides?: CallOverrides): Promise<string>;

    "lendZhu()"(overrides?: CallOverrides): Promise<string>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxRatioOfTotalDebtAllowedPerBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintZhu(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintZhu(address,uint256)"(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oneToOneMintedZhuByBlock(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      count: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "oneToOneMintedZhuByBlock()"(overrides?: CallOverrides): Promise<{
      blockNumber: BigNumber;
      count: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    returnZhu(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "returnZhu(address,uint256)"(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)"(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    valueOfLendTokensInZhu(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfLendTokensInZhu(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    Lend(
      account: string | null,
      zhuCount: null,
      lendTokenCount: null
    ): EventFilter;

    MintZhu(
      user: string | null,
      token: string | null,
      count: null
    ): EventFilter;

    OneToOneMintingDisabled(): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedAddress(
      paramName: string | null,
      value: string | null
    ): EventFilter;

    ReturnZhu(
      user: string | null,
      token: string | null,
      count: null
    ): EventFilter;

    Stopped(): EventFilter;

    Unlend(
      account: string | null,
      zhuCount: null,
      lendTokenCount: null
    ): EventFilter;
  };

  estimateGas: {
    addReferencePool(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lend(zhuCount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "lend(uint256)"(
      zhuCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lendZhu(overrides?: CallOverrides): Promise<BigNumber>;

    "lendZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxRatioOfTotalDebtAllowedPerBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintZhu(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintZhu(address,uint256)"(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    oneToOneMintedZhuByBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "oneToOneMintedZhuByBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    returnZhu(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "returnZhu(address,uint256)"(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfLendTokensInZhu(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfLendTokensInZhu(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countTokensAvailable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lend(
      zhuCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lend(uint256)"(
      zhuCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lendZhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendZhu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxRatioOfTotalDebtAllowedPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintZhu(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintZhu(address,uint256)"(
      tokenToDeposit: string,
      zhuToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    oneToOneMintedZhuByBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oneToOneMintedZhuByBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    returnZhu(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "returnZhu(address,uint256)"(
      tokenToRecieve: string,
      zhuToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)"(
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlend(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfLendTokensInZhu(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valueOfLendTokensInZhu(uint256)"(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
