/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LendInterface extends ethers.utils.Interface {
  functions: {
    "addReferencePool(address)": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "countTokensAvailable(address)": FunctionFragment;
    "currentToken(address)": FunctionFragment;
    "deployer()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "lend(uint256)": FunctionFragment;
    "lendHue()": FunctionFragment;
    "maxRatioOfTotalDebtAllowedPerBlock()": FunctionFragment;
    "mintHue(address,uint256)": FunctionFragment;
    "oneToOneMintedHueByBlock()": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "returnHue(address,uint256)": FunctionFragment;
    "setMaxRatioOfTotalDebtAllowedPerBlock(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "unlend(uint256)": FunctionFragment;
    "validToken(address)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "valueOfLendTokensInHue(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countTokensAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "lend", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "lendHue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxRatioOfTotalDebtAllowedPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintHue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oneToOneMintedHueByBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnHue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRatioOfTotalDebtAllowedPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfLendTokensInHue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countTokensAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendHue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxRatioOfTotalDebtAllowedPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintHue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneToOneMintedHueByBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnHue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRatioOfTotalDebtAllowedPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfLendTokensInHue",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "Lend(address,uint256,uint256)": EventFragment;
    "MintHue(address,address,uint256)": EventFragment;
    "OneToOneMintingDisabled()": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "ReturnHue(address,address,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "Unlend(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintHue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneToOneMintingDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnHue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlend"): EventFragment;
}

export class Lend extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendInterface;

  functions: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lend(
      hueCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lendHue(overrides?: CallOverrides): Promise<[string]>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintHue(
      tokenToDeposit: string,
      hueToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oneToOneMintedHueByBlock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; count: BigNumber }
    >;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnHue(
      tokenToRecieve: string,
      hueToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    valueOfLendTokensInHue(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countTokensAvailable(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deployer(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  init(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lend(
    hueCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lendHue(overrides?: CallOverrides): Promise<string>;

  maxRatioOfTotalDebtAllowedPerBlock(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintHue(
    tokenToDeposit: string,
    hueToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oneToOneMintedHueByBlock(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; count: BigNumber }
  >;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnHue(
    tokenToRecieve: string,
    hueToReturn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRatioOfTotalDebtAllowedPerBlock(
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  unlend(
    lendTokenCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  valueOfLendTokensInHue(
    lendTokenCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deployer(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    lend(hueCount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lendHue(overrides?: CallOverrides): Promise<string>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintHue(
      tokenToDeposit: string,
      hueToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oneToOneMintedHueByBlock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; count: BigNumber }
    >;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    returnHue(
      tokenToRecieve: string,
      hueToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    valueOfLendTokensInHue(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Initialized(
      governor?: string | null
    ): TypedEventFilter<[string], { governor: string }>;

    Lend(
      account?: string | null,
      hueCount?: null,
      lendTokenCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; hueCount: BigNumber; lendTokenCount: BigNumber }
    >;

    MintHue(
      user?: string | null,
      token?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; count: BigNumber }
    >;

    OneToOneMintingDisabled(): TypedEventFilter<[], {}>;

    ParameterUpdated(
      paramName?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { paramName: string; value: BigNumber }
    >;

    ParameterUpdatedAddress(
      paramName?: string | null,
      value?: string | null
    ): TypedEventFilter<[string, string], { paramName: string; value: string }>;

    ReturnHue(
      user?: string | null,
      token?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; count: BigNumber }
    >;

    Stopped(): TypedEventFilter<[], {}>;

    Unlend(
      account?: string | null,
      hueCount?: null,
      lendTokenCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; hueCount: BigNumber; lendTokenCount: BigNumber }
    >;
  };

  estimateGas: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lend(
      hueCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lendHue(overrides?: CallOverrides): Promise<BigNumber>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintHue(
      tokenToDeposit: string,
      hueToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oneToOneMintedHueByBlock(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnHue(
      tokenToRecieve: string,
      hueToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    valueOfLendTokensInHue(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countTokensAvailable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lend(
      hueCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lendHue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRatioOfTotalDebtAllowedPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintHue(
      tokenToDeposit: string,
      hueToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oneToOneMintedHueByBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnHue(
      tokenToRecieve: string,
      hueToReturn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRatioOfTotalDebtAllowedPerBlock(
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlend(
      lendTokenCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfLendTokensInHue(
      lendTokenCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
