/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsInterface extends ethers.utils.Interface {
  functions: {
    "accrueRewards()": FunctionFragment;
    "addReferencePool(address)": FunctionFragment;
    "borrowRewardsPortion()": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "collateralPoolRewardsPortion()": FunctionFragment;
    "collectPositionFees(tuple)": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "createLiquidityPosition(tuple,tuple)": FunctionFragment;
    "current(uint16)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "decreaseLiquidityPosition(tuple)": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "governor()": FunctionFragment;
    "increaseLiquidityPosition(tuple)": FunctionFragment;
    "init(address)": FunctionFragment;
    "lastPeriodGlobalRewardsAccrued()": FunctionFragment;
    "liquidateOutofRangePositions(address,uint256[])": FunctionFragment;
    "liquidationPenalty()": FunctionFragment;
    "maxLiquidityDecreasePerPeriod()": FunctionFragment;
    "minLiquidityByPeriod(address)": FunctionFragment;
    "minLiquidityProvideDuration()": FunctionFragment;
    "minZhuCountPerPosition()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "poolForPoolID(uint16)": FunctionFragment;
    "poolIDForPool(address)": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "protocolPoolRewardsPortion()": FunctionFragment;
    "referencePoolRewardsPortion()": FunctionFragment;
    "referencePools(uint256)": FunctionFragment;
    "removeLiquidityPosition(tuple)": FunctionFragment;
    "removeLiquidityPositionAfterShutdown(tuple)": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "setLiquidationPenalty(uint256)": FunctionFragment;
    "setMaxLiquidityDecreasePerPeriod(uint256)": FunctionFragment;
    "setMinLiquidityProvideDuration(uint64)": FunctionFragment;
    "setMinZhuCountPerPosition(uint128)": FunctionFragment;
    "setRewardsPortions(uint256,uint256,uint256)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "twapDuration()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPoolRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPositionFees",
    values: [
      {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidityPosition",
    values: [
      {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "current",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityPosition",
    values: [
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityPosition",
    values: [
      {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalRewardsAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateOutofRangePositions",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidityDecreasePerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidityByPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidityProvideDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minZhuCountPerPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolForPoolID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIDForPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPoolRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePoolRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referencePools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPosition",
    values: [
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPositionAfterShutdown",
    values: [
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidityDecreasePerPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidityProvideDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinZhuCountPerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsPortions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "twapDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPoolRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPositionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "current", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalRewardsAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateOutofRangePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidityDecreasePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidityByPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidityProvideDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minZhuCountPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolForPoolID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIDForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPoolRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePoolRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referencePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPositionAfterShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidityDecreasePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidityProvideDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinZhuCountPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsPortions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedInflationRewards(address,uint256)": EventFragment;
    "CollectedFees(address,uint256,uint256,uint256)": EventFragment;
    "Initialized(address)": EventFragment;
    "LiquidityPositionCreated(address,uint16,uint256,int24,int24,uint128)": EventFragment;
    "LiquidityPositionDecreased(uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionIncreased(uint256,uint128)": EventFragment;
    "LiquidityPositionLiquidated(uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionRemoved(uint256,uint256,uint256)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated128(string,uint256)": EventFragment;
    "ParameterUpdated32(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint256)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsDistributed(address,uint64,uint256)": EventFragment;
    "RewardsPortionsUpdated(uint256,uint256,uint256)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedInflationRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectedFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionIncreased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionLiquidated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPortionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Rewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsInterface;

  functions: {
    accrueRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    claimRewards(
      nftTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimRewards(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "collateralPool()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "collateralPoolRewardsPortion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    collectPositionFees(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectPositionFees(tuple)"(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createLiquidityPosition(tuple,tuple)"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    current(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    currentPeriod(overrides?: CallOverrides): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    firstPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "increaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastPeriodGlobalRewardsAccrued(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastPeriodGlobalRewardsAccrued()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationPenalty(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "liquidationPenalty()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxLiquidityDecreasePerPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxLiquidityDecreasePerPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      period: BigNumber;
      minLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "minLiquidityByPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      period: BigNumber;
      minLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    minLiquidityProvideDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minLiquidityProvideDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minZhuCountPerPosition(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minZhuCountPerPosition()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    periodLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "periodLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    poolIDForPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    protocolPool(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "protocolPool()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "protocolPoolRewardsPortion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    referencePoolRewardsPortion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "referencePoolRewardsPortion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityPositionAfterShutdown(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityPositionAfterShutdown(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidationPenalty(uint256)"(
      penalty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinLiquidityProvideDuration(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinLiquidityProvideDuration(uint64)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinZhuCountPerPosition(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinZhuCountPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopped()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    twapDuration(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "twapDuration()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  accrueRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  addReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    nftTokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimRewards(uint256)"(
    nftTokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collateralPool(overrides?: CallOverrides): Promise<number>;

  "collateralPool()"(overrides?: CallOverrides): Promise<number>;

  collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralPoolRewardsPortion()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectPositionFees(
    params: {
      tokenId: BigNumberish;
      recipient: string;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectPositionFees(tuple)"(
    params: {
      tokenId: BigNumberish;
      recipient: string;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  createLiquidityPosition(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
    },
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createLiquidityPosition(tuple,tuple)"(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
    },
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  current(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "current(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseLiquidityPosition(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseLiquidityPosition(tuple)"(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  increaseLiquidityPosition(
    params: {
      tokenId: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "increaseLiquidityPosition(tuple)"(
    params: {
      tokenId: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastPeriodGlobalRewardsAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  "lastPeriodGlobalRewardsAccrued()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidateOutofRangePositions(
    pool: string,
    nftTokenIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateOutofRangePositions(address,uint256[])"(
    pool: string,
    nftTokenIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationPenalty()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidityDecreasePerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLiquidityDecreasePerPeriod()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minLiquidityByPeriod(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    period: BigNumber;
    minLiquidity: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "minLiquidityByPeriod(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    period: BigNumber;
    minLiquidity: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  minLiquidityProvideDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "minLiquidityProvideDuration()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minZhuCountPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

  "minZhuCountPerPosition()"(overrides?: CallOverrides): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolForPoolID(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "poolForPoolID(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<number>;

  "poolIDForPool(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  protocolPool(overrides?: CallOverrides): Promise<number>;

  "protocolPool()"(overrides?: CallOverrides): Promise<number>;

  protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolPoolRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  referencePoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "referencePoolRewardsPortion()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referencePools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "referencePools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  removeLiquidityPosition(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityPosition(tuple)"(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityPositionAfterShutdown(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityPositionAfterShutdown(tuple)"(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidationPenalty(
    penalty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidationPenalty(uint256)"(
    penalty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxLiquidityDecreasePerPeriod(
    decreasePortion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxLiquidityDecreasePerPeriod(uint256)"(
    decreasePortion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinLiquidityProvideDuration(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinLiquidityProvideDuration(uint64)"(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinZhuCountPerPosition(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinZhuCountPerPosition(uint128)"(
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardsPortions(
    _protocol: BigNumberish,
    _collateral: BigNumberish,
    _reference: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardsPortions(uint256,uint256,uint256)"(
    _protocol: BigNumberish,
    _collateral: BigNumberish,
    _reference: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTwapDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTwapDuration(uint32)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  twapDuration(overrides?: CallOverrides): Promise<number>;

  "twapDuration()"(overrides?: CallOverrides): Promise<number>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    accrueRewards(overrides?: CallOverrides): Promise<void>;

    "accrueRewards()"(overrides?: CallOverrides): Promise<void>;

    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      nftTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralPool(overrides?: CallOverrides): Promise<number>;

    "collateralPool()"(overrides?: CallOverrides): Promise<number>;

    collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPositionFees(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "collectPositionFees(tuple)"(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<{
      nftTokenID: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "createLiquidityPosition(tuple,tuple)"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<{
      nftTokenID: BigNumber;
      liquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    current(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "decreaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "increaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationPenalty()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      period: BigNumber;
      minLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "minLiquidityByPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      period: BigNumber;
      minLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    minLiquidityProvideDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidityProvideDuration()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minZhuCountPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

    "minZhuCountPerPosition()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<number>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    protocolPool(overrides?: CallOverrides): Promise<number>;

    "protocolPool()"(overrides?: CallOverrides): Promise<number>;

    protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeLiquidityPositionAfterShutdown(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidityPositionAfterShutdown(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      amount0: BigNumber;
      amount1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationPenalty(uint256)"(
      penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidityProvideDuration(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinLiquidityProvideDuration(uint64)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinZhuCountPerPosition(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinZhuCountPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    twapDuration(overrides?: CallOverrides): Promise<number>;

    "twapDuration()"(overrides?: CallOverrides): Promise<number>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ClaimedInflationRewards(
      owner: string | null,
      nftTokenID: BigNumberish | null
    ): EventFilter;

    CollectedFees(
      owner: string | null,
      nftTokenID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    Initialized(governor: string | null): EventFilter;

    LiquidityPositionCreated(
      owner: string | null,
      poolID: BigNumberish | null,
      nftID: BigNumberish | null,
      tickLower: null,
      tickUpper: null,
      liquidity: null
    ): EventFilter;

    LiquidityPositionDecreased(
      nftID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    LiquidityPositionIncreased(
      nftID: BigNumberish | null,
      liquidity: null
    ): EventFilter;

    LiquidityPositionLiquidated(
      nftID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    LiquidityPositionRemoved(
      nftID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated128(paramName: string | null, value: null): EventFilter;

    ParameterUpdated32(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedAddress(paramName: string | null, value: null): EventFilter;

    RewardsAccrued(count: null, periods: null): EventFilter;

    RewardsDistributed(
      account: string | null,
      period: BigNumberish | null,
      tcpRewards: null
    ): EventFilter;

    RewardsPortionsUpdated(
      protocolPortion: null,
      collateralPortion: null,
      referencePortion: null
    ): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    accrueRewards(overrides?: Overrides): Promise<BigNumber>;

    "accrueRewards()"(overrides?: Overrides): Promise<BigNumber>;

    addReferencePool(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      nftTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimRewards(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPositionFees(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectPositionFees(tuple)"(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createLiquidityPosition(tuple,tuple)"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    current(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "increaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationPenalty()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minLiquidityByPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minLiquidityProvideDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidityProvideDuration()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minZhuCountPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

    "minZhuCountPerPosition()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePoolRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityPositionAfterShutdown(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityPositionAfterShutdown(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidationPenalty(uint256)"(
      penalty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinLiquidityProvideDuration(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinLiquidityProvideDuration(uint64)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinZhuCountPerPosition(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinZhuCountPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    twapDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "twapDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      nftTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimRewards(uint256)"(
      nftTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectPositionFees(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectPositionFees(tuple)"(
      params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createLiquidityPosition(tuple,tuple)"(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    current(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "current(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "increaseLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalRewardsAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateOutofRangePositions(address,uint256[])"(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationPenalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationPenalty()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxLiquidityDecreasePerPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minLiquidityByPeriod(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLiquidityProvideDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minLiquidityProvideDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minZhuCountPerPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minZhuCountPerPosition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolForPoolID(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolIDForPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolIDForPool(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolPoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referencePoolRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePoolRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referencePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referencePools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityPosition(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityPositionAfterShutdown(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityPositionAfterShutdown(tuple)"(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidationPenalty(uint256)"(
      penalty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxLiquidityDecreasePerPeriod(uint256)"(
      decreasePortion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinLiquidityProvideDuration(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinLiquidityProvideDuration(uint64)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinZhuCountPerPosition(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinZhuCountPerPosition(uint128)"(
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardsPortions(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardsPortions(uint256,uint256,uint256)"(
      _protocol: BigNumberish,
      _collateral: BigNumberish,
      _reference: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twapDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
