/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAccountingInterface extends ethers.utils.Interface {
  functions: {
    "addPositionToIndex(uint256,uint16,int24,int24,address)": FunctionFragment;
    "debt()": FunctionFragment;
    "decreaseDebt(uint256)": FunctionFragment;
    "decreasePoolLiquidity(address,uint256)": FunctionFragment;
    "deletePoolPosition(uint256)": FunctionFragment;
    "getBasicPositionInfo(uint64)": FunctionFragment;
    "getParticipatedInLiquidityGenesis(address,uint16)": FunctionFragment;
    "getParticipatedInMarketGenesis(address)": FunctionFragment;
    "getPoolPosition(uint256)": FunctionFragment;
    "getPosition(uint64)": FunctionFragment;
    "getRewardStatus(uint16)": FunctionFragment;
    "getSystemDebtInfo()": FunctionFragment;
    "increaseDebt(uint256)": FunctionFragment;
    "increaseLentZhu(uint256)": FunctionFragment;
    "increasePoolLiquidity(address,uint256)": FunctionFragment;
    "isPositionOwner(uint256,address)": FunctionFragment;
    "lentZhu()": FunctionFragment;
    "onRewardsUpgrade(address)": FunctionFragment;
    "poolLiquidity(address)": FunctionFragment;
    "sendCollateral(address,uint256)": FunctionFragment;
    "sendLentZhu(address,uint256)": FunctionFragment;
    "sendOneToOneBackedTokens(address,address,uint256)": FunctionFragment;
    "setParticipatedInLiquidityGenesis(address,uint16,bool)": FunctionFragment;
    "setParticipatedInMarketGenesis(address,bool)": FunctionFragment;
    "setPoolPosition(uint256,tuple)": FunctionFragment;
    "setPosition(uint64,tuple)": FunctionFragment;
    "setRewardStatus(uint16,tuple)": FunctionFragment;
    "setSystemDebtInfo(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPositionToIndex",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePoolLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipatedInLiquidityGenesis",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipatedInMarketGenesis",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemDebtInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLentZhu",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "lentZhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onRewardsUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLentZhu",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOneToOneBackedTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipatedInLiquidityGenesis",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipatedInMarketGenesis",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPosition",
    values: [
      BigNumberish,
      {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      BigNumberish,
      {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardStatus",
    values: [
      BigNumberish,
      { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemDebtInfo",
    values: [
      {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPositionToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipatedInLiquidityGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipatedInMarketGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLentZhu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lentZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onRewardsUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLentZhu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendOneToOneBackedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipatedInLiquidityGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipatedInMarketGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemDebtInfo",
    data: BytesLike
  ): Result;

  events: {
    "DebtPositionIndexingDisabled()": EventFragment;
    "PoolPositionIndexingDisabled()": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DebtPositionIndexingDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolPositionIndexingDisabled"
  ): EventFragment;
}

export class IAccounting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAccountingInterface;

  functions: {
    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    debt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "debt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      participated: boolean;
      0: boolean;
    }>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      participated: boolean;
      0: boolean;
    }>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      pt: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
      0: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
    }>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      pt: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
      0: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
    }>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      acct: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: number;
        8: boolean;
        9: BigNumber;
      };
      0: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: number;
        8: boolean;
        9: BigNumber;
      };
    }>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      acct: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: number;
        8: boolean;
        9: BigNumber;
      };
      0: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: number;
        8: boolean;
        9: BigNumber;
      };
    }>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rs: {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      0: {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
    }>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rs: {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      0: {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
    }>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<{
      0: {
        debt: BigNumber;
        totalTCPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<{
      0: {
        debt: BigNumber;
        totalTCPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lentZhu(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lentZhu()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      liquidity: BigNumber;
      0: BigNumber;
    }>;

    "poolLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<{
      liquidity: BigNumber;
      0: BigNumber;
    }>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addPositionToIndex(
    nftID: BigNumberish,
    poolID: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPositionToIndex(uint256,uint16,int24,int24,address)"(
    nftID: BigNumberish,
    poolID: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseDebt(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseDebt(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreasePoolLiquidity(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreasePoolLiquidity(address,uint256)"(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deletePoolPosition(
    nftID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deletePoolPosition(uint256)"(
    nftID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBasicPositionInfo(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    debtCount: BigNumber;
    collateralCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBasicPositionInfo(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    debtCount: BigNumber;
    collateralCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getParticipatedInLiquidityGenesis(
    owner: string,
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getParticipatedInLiquidityGenesis(address,uint16)"(
    owner: string,
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getParticipatedInMarketGenesis(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getParticipatedInMarketGenesis(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPoolPosition(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    poolID: number;
    cumulativeLiquidity: BigNumber;
    totalRewards: BigNumber;
    lastTimeRewarded: BigNumber;
    lastBlockPositionIncreased: BigNumber;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: number;
    8: BigNumber;
  }>;

  "getPoolPosition(uint256)"(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    poolID: number;
    cumulativeLiquidity: BigNumber;
    totalRewards: BigNumber;
    lastTimeRewarded: BigNumber;
    lastBlockPositionIncreased: BigNumber;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: number;
    8: BigNumber;
  }>;

  getPosition(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startCumulativeDebt: BigNumber;
    collateral: BigNumber;
    debt: BigNumber;
    startDebtExchangeRate: BigNumber;
    startTCPRewards: BigNumber;
    lastTimeUpdated: BigNumber;
    lastBorrowTime: BigNumber;
    tick: number;
    tickSet: boolean;
    tickIndex: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: number;
    8: boolean;
    9: BigNumber;
  }>;

  "getPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startCumulativeDebt: BigNumber;
    collateral: BigNumber;
    debt: BigNumber;
    startDebtExchangeRate: BigNumber;
    startTCPRewards: BigNumber;
    lastTimeUpdated: BigNumber;
    lastBorrowTime: BigNumber;
    tick: number;
    tickSet: boolean;
    tickIndex: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: number;
    8: boolean;
    9: BigNumber;
  }>;

  getRewardStatus(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalRewards: BigNumber;
    cumulativeLiquidity: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getRewardStatus(uint16)"(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalRewards: BigNumber;
    cumulativeLiquidity: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getSystemDebtInfo(
    overrides?: CallOverrides
  ): Promise<{
    debt: BigNumber;
    totalTCPRewards: BigNumber;
    cumulativeDebt: BigNumber;
    debtExchangeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "getSystemDebtInfo()"(
    overrides?: CallOverrides
  ): Promise<{
    debt: BigNumber;
    totalTCPRewards: BigNumber;
    cumulativeDebt: BigNumber;
    debtExchangeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  increaseDebt(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseDebt(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseLentZhu(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseLentZhu(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increasePoolLiquidity(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increasePoolLiquidity(address,uint256)"(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPositionOwner(
    nftID: BigNumberish,
    addressToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPositionOwner(uint256,address)"(
    nftID: BigNumberish,
    addressToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lentZhu(overrides?: CallOverrides): Promise<BigNumber>;

  "lentZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

  onRewardsUpgrade(
    newRewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onRewardsUpgrade(address)"(
    newRewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolLiquidity(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  "poolLiquidity(address)"(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendCollateral(
    account: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendCollateral(address,uint256)"(
    account: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendLentZhu(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendLentZhu(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendOneToOneBackedTokens(
    token: string,
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendOneToOneBackedTokens(address,address,uint256)"(
    token: string,
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParticipatedInLiquidityGenesis(
    owner: string,
    poolID: BigNumberish,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
    owner: string,
    poolID: BigNumberish,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParticipatedInMarketGenesis(
    account: string,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParticipatedInMarketGenesis(address,bool)"(
    account: string,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolPosition(
    nftID: BigNumberish,
    pt: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastTimeRewarded: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidity: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolPosition(uint256,tuple)"(
    nftID: BigNumberish,
    pt: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastTimeRewarded: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidity: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPosition(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startTCPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      tick: BigNumberish;
      tickSet: boolean;
      tickIndex: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPosition(uint64,tuple)"(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startTCPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      tick: BigNumberish;
      tickSet: boolean;
      tickIndex: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardStatus(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardStatus(uint16,tuple)"(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSystemDebtInfo(
    _systemDebtInfo: {
      debt: BigNumberish;
      totalTCPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSystemDebtInfo(tuple)"(
    _systemDebtInfo: {
      debt: BigNumberish;
      totalTCPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: BigNumber;
      lastBlockPositionIncreased: BigNumber;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: number;
      8: BigNumber;
    }>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: BigNumber;
      lastBlockPositionIncreased: BigNumber;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: number;
      8: BigNumber;
    }>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: boolean;
      9: BigNumber;
    }>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: boolean;
      9: BigNumber;
    }>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<{
      debt: BigNumber;
      totalTCPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      debt: BigNumber;
      totalTCPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    increaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lentZhu(overrides?: CallOverrides): Promise<BigNumber>;

    "lentZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poolLiquidity(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DebtPositionIndexingDisabled(): EventFilter;

    PoolPositionIndexingDisabled(): EventFilter;
  };

  estimateGas: {
    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lentZhu(overrides?: CallOverrides): Promise<BigNumber>;

    "lentZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolLiquidity(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lentZhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lentZhu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolLiquidity(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendCollateral(
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendCollateral(address,uint256)"(
      account: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSystemDebtInfo(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSystemDebtInfo(tuple)"(
      _systemDebtInfo: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
