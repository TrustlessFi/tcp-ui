/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EnforcedDecentralizationInterface extends ethers.utils.Interface {
  functions: {
    "blacklistAction(string)": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "delayPhaseStartTime(uint8)": FunctionFragment;
    "deployer()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "phaseInfo(uint8)": FunctionFragment;
    "requireValidAction(address,string)": FunctionFragment;
    "setPhaseOneStartTime(uint64)": FunctionFragment;
    "stopped()": FunctionFragment;
    "tcp()": FunctionFragment;
    "transferEmergencyShutdownTokens(address,uint256)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blacklistAction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayPhaseStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "phaseInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAction",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhaseOneStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "tcp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferEmergencyShutdownTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayPhaseStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phaseInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseOneStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tcp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferEmergencyShutdownTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "ActionBlacklisted(string)": EventFragment;
    "Initialized(address)": EventFragment;
    "PhaseOneStartTimeSet(uint64)": EventFragment;
    "PhaseStartDelayed(uint8,uint64,uint8)": EventFragment;
    "Stopped()": EventFragment;
    "UpdateLockDelayed(uint64,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseOneStartTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseStartDelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLockDelayed"): EventFragment;
}

export class EnforcedDecentralization extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EnforcedDecentralizationInterface;

  functions: {
    blacklistAction(
      signature: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "currentPhase()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    delayPhaseStartTime(
      phaseNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delayPhaseStartTime(uint8)"(
      phaseNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    phaseInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTime: BigNumber;
      phaseStartDelaysRemaining: number;
      0: BigNumber;
      1: number;
    }>;

    "phaseInfo(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTime: BigNumber;
      phaseStartDelaysRemaining: number;
      0: BigNumber;
      1: number;
    }>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPhaseOneStartTime(uint64)"(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopped()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    tcp(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tcp()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferEmergencyShutdownTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferEmergencyShutdownTokens(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  blacklistAction(
    signature: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "blacklistAction(string)"(
    signature: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  "currentPhase()"(overrides?: CallOverrides): Promise<number>;

  delayPhaseStartTime(
    phaseNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delayPhaseStartTime(uint8)"(
    phaseNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  phaseInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startTime: BigNumber;
    phaseStartDelaysRemaining: number;
    0: BigNumber;
    1: number;
  }>;

  "phaseInfo(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startTime: BigNumber;
    phaseStartDelaysRemaining: number;
    0: BigNumber;
    1: number;
  }>;

  requireValidAction(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireValidAction(address,string)"(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  setPhaseOneStartTime(
    phaseOneStartTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPhaseOneStartTime(uint64)"(
    phaseOneStartTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  tcp(overrides?: CallOverrides): Promise<string>;

  "tcp()"(overrides?: CallOverrides): Promise<string>;

  transferEmergencyShutdownTokens(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferEmergencyShutdownTokens(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    blacklistAction(
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    "currentPhase()"(overrides?: CallOverrides): Promise<number>;

    delayPhaseStartTime(
      phaseNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "delayPhaseStartTime(uint8)"(
      phaseNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    phaseInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTime: BigNumber;
      phaseStartDelaysRemaining: number;
      0: BigNumber;
      1: number;
    }>;

    "phaseInfo(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startTime: BigNumber;
      phaseStartDelaysRemaining: number;
      0: BigNumber;
      1: number;
    }>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPhaseOneStartTime(uint64)"(
      phaseOneStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    tcp(overrides?: CallOverrides): Promise<string>;

    "tcp()"(overrides?: CallOverrides): Promise<string>;

    transferEmergencyShutdownTokens(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferEmergencyShutdownTokens(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ActionBlacklisted(signature: string | null): EventFilter;

    Initialized(governor: string | null): EventFilter;

    PhaseOneStartTimeSet(startTime: null): EventFilter;

    PhaseStartDelayed(
      phase: BigNumberish | null,
      startTime: null,
      delaysRemaining: null
    ): EventFilter;

    Stopped(): EventFilter;

    UpdateLockDelayed(locktime: null, delaysRemaining: null): EventFilter;
  };

  estimateGas: {
    blacklistAction(
      signature: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPhase()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayPhaseStartTime(
      phaseNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delayPhaseStartTime(uint8)"(
      phaseNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    phaseInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phaseInfo(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPhaseOneStartTime(uint64)"(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    tcp(overrides?: CallOverrides): Promise<BigNumber>;

    "tcp()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferEmergencyShutdownTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferEmergencyShutdownTokens(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blacklistAction(
      signature: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "blacklistAction(string)"(
      signature: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPhase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayPhaseStartTime(
      phaseNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delayPhaseStartTime(uint8)"(
      phaseNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    phaseInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phaseInfo(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPhaseOneStartTime(uint64)"(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tcp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tcp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferEmergencyShutdownTokens(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferEmergencyShutdownTokens(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
