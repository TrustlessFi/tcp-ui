/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "accrueInterest()": FunctionFragment;
    "adjustGenesisPositionCollateral(uint64,uint256)": FunctionFragment;
    "adjustPosition(uint64,int256,uint256)": FunctionFragment;
    "claimRewards(uint64)": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "collateralizationRequirement()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "createGenesisPosition(tuple)": FunctionFragment;
    "createPosition(uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "interestPortionToLenders()": FunctionFragment;
    "lastPeriodGlobalInterestAccrued()": FunctionFragment;
    "minPositionSize()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "removeGenesisPosition(uint64)": FunctionFragment;
    "setCollateralizationRequirement(uint256)": FunctionFragment;
    "setInterestPortionToLenders(uint256)": FunctionFragment;
    "setMinPositionSize(uint256)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "systemGetUpdatedPosition(uint64)": FunctionFragment;
    "twapDuration()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "zhuPositionNFT()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustGenesisPositionCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createGenesisPosition",
    values: [{ v: BigNumberish; r: BytesLike; s: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestPortionToLenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGenesisPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralizationRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestPortionToLenders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemGetUpdatedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twapDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zhuPositionNFT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustGenesisPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGenesisPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestPortionToLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalInterestAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGenesisPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralizationRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestPortionToLenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemGetUpdatedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zhuPositionNFT",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address)": EventFragment;
    "InterestAccrued(uint64,uint64,uint256,uint256,uint256,uint256)": EventFragment;
    "NewPositionCreated(address,uint64)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "PositionAdjusted(uint64,int256,int256)": EventFragment;
    "PositionUpdated(uint256,uint64,uint256,uint256)": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionAdjusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Market extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MarketInterface;

  functions: {
    accrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "collateralPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    collateralizationRequirement(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "collateralizationRequirement()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createGenesisPosition(tuple)"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    firstPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastPeriodGlobalInterestAccrued(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastPeriodGlobalInterestAccrued()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minPositionSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    periodLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "periodLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopped()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "twapDuration()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "zhuPositionNFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  accrueInterest(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueInterest()"(overrides?: Overrides): Promise<ContractTransaction>;

  adjustGenesisPositionCollateral(
    positionID: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "adjustGenesisPositionCollateral(uint64,uint256)"(
    positionID: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  adjustPosition(
    positionID: BigNumberish,
    debtChange: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "adjustPosition(uint64,int256,uint256)"(
    positionID: BigNumberish,
    debtChange: BigNumberish,
    collateralDecrease: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  claimRewards(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimRewards(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collateralPool(overrides?: CallOverrides): Promise<string>;

  "collateralPool()"(overrides?: CallOverrides): Promise<string>;

  collateralizationRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralizationRequirement()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  createGenesisPosition(
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createGenesisPosition(tuple)"(
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createPosition(
    initialDebt: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createPosition(uint256)"(
    initialDebt: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

  "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastPeriodGlobalInterestAccrued(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastPeriodGlobalInterestAccrued()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeGenesisPosition(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeGenesisPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCollateralizationRequirement(
    requirement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCollateralizationRequirement(uint256)"(
    requirement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestPortionToLenders(
    percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestPortionToLenders(uint256)"(
    percentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinPositionSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinPositionSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTwapDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTwapDuration(uint32)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  systemGetUpdatedPosition(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemGetUpdatedPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  twapDuration(overrides?: CallOverrides): Promise<number>;

  "twapDuration()"(overrides?: CallOverrides): Promise<number>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  zhuPositionNFT(overrides?: CallOverrides): Promise<string>;

  "zhuPositionNFT()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accrueInterest(overrides?: CallOverrides): Promise<void>;

    "accrueInterest()"(overrides?: CallOverrides): Promise<void>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralPool(overrides?: CallOverrides): Promise<string>;

    "collateralPool()"(overrides?: CallOverrides): Promise<string>;

    collateralizationRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGenesisPosition(tuple)"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: boolean;
      9: BigNumber;
    }>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: boolean;
      9: BigNumber;
    }>;

    twapDuration(overrides?: CallOverrides): Promise<number>;

    "twapDuration()"(overrides?: CallOverrides): Promise<number>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<string>;

    "zhuPositionNFT()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Initialized(governor: string | null): EventFilter;

    InterestAccrued(
      period: BigNumberish | null,
      periods: null,
      newDebt: null,
      rewardCount: null,
      cumulativeDebt: null,
      debtExchangeRate: null
    ): EventFilter;

    NewPositionCreated(
      creator: string | null,
      positionID: BigNumberish | null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedAddress(paramName: string | null, value: null): EventFilter;

    PositionAdjusted(
      positionID: BigNumberish | null,
      debtChange: null,
      collateralChange: null
    ): EventFilter;

    PositionUpdated(
      positionID: BigNumberish | null,
      period: BigNumberish | null,
      debtAfter: null,
      tcpRewards: null
    ): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    accrueInterest(overrides?: Overrides): Promise<BigNumber>;

    "accrueInterest()"(overrides?: Overrides): Promise<BigNumber>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralizationRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createGenesisPosition(tuple)"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    interestPortionToLenders(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPortionToLenders()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    twapDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "twapDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "zhuPositionNFT()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueInterest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueInterest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    adjustGenesisPositionCollateral(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "adjustGenesisPositionCollateral(uint64,uint256)"(
      positionID: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    adjustPosition(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "adjustPosition(uint64,int256,uint256)"(
      positionID: BigNumberish,
      debtChange: BigNumberish,
      collateralDecrease: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimRewards(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralizationRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRequirement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    createGenesisPosition(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createGenesisPosition(tuple)"(
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createPosition(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createPosition(uint256)"(
      initialDebt: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interestPortionToLenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestPortionToLenders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalInterestAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalInterestAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPositionSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minPositionSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGenesisPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeGenesisPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCollateralizationRequirement(
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCollateralizationRequirement(uint256)"(
      requirement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestPortionToLenders(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestPortionToLenders(uint256)"(
      percentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinPositionSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinPositionSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemGetUpdatedPosition(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemGetUpdatedPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twapDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zhuPositionNFT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
