/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockProtocolToken,
  MockProtocolTokenInterface,
} from "../MockProtocolToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b60ae806100256000396000f3fe608060405234801560105760006000fd5b5060043610602c5760003560e01c80635c19a95c14603257602c565b60006000fd5b60726004803603602081101560475760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506074565b005b5b5056fea26469706673582212209dd30c473666f328aba84ab022606d43b92e02a0c2edf17a6708eaf336b9ddd064736f6c63430007060033";

export class MockProtocolToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockProtocolToken> {
    return super.deploy(overrides || {}) as Promise<MockProtocolToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockProtocolToken {
    return super.attach(address) as MockProtocolToken;
  }
  connect(signer: Signer): MockProtocolToken__factory {
    return super.connect(signer) as MockProtocolToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockProtocolTokenInterface {
    return new utils.Interface(_abi) as MockProtocolTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockProtocolToken {
    return new Contract(address, _abi, signerOrProvider) as MockProtocolToken;
  }
}
