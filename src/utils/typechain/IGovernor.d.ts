/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGovernorInterface extends ethers.utils.Interface {
  functions: {
    "GENESIS_PERIODS()": FunctionFragment;
    "accounting()": FunctionFragment;
    "addReferencePoolToProtocol(address)": FunctionFragment;
    "auctions()": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "currentDailyRewardCount()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "distributeLiquidityRewards(address,uint256)": FunctionFragment;
    "distributedTCP()": FunctionFragment;
    "enforcedDecentralization()": FunctionFragment;
    "execute(address,string,bytes)": FunctionFragment;
    "executeShutdown()": FunctionFragment;
    "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)": FunctionFragment;
    "getReferencePools()": FunctionFragment;
    "increaseLiquidationAccountRewards(uint256)": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "lend()": FunctionFragment;
    "lendZhu()": FunctionFragment;
    "liquidations()": FunctionFragment;
    "market()": FunctionFragment;
    "mintTCP(address,uint256)": FunctionFragment;
    "poolRemovalTime(address)": FunctionFragment;
    "prices()": FunctionFragment;
    "protocolDeployer()": FunctionFragment;
    "protocolLock()": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "rates()": FunctionFragment;
    "removeReferencePoolFromProtocol(address)": FunctionFragment;
    "requireDecreaseDebtAccess(address)": FunctionFragment;
    "requireLentZhuCountAccess(address)": FunctionFragment;
    "requirePositionWriteAccess(address)": FunctionFragment;
    "requireStoredCollateralAccess(address)": FunctionFragment;
    "requireUpdatePositionAccess(address)": FunctionFragment;
    "requireValidAction(address,string)": FunctionFragment;
    "requireZhuMintingAccess(address)": FunctionFragment;
    "requireZhuReservesBurnAccess(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "settlement()": FunctionFragment;
    "shutdownTime()": FunctionFragment;
    "tcp()": FunctionFragment;
    "timelock()": FunctionFragment;
    "upgradeAuctions(address)": FunctionFragment;
    "upgradeLend(address)": FunctionFragment;
    "upgradeLiquidations(address)": FunctionFragment;
    "upgradeMarket(address)": FunctionFragment;
    "upgradePrices(address)": FunctionFragment;
    "upgradeProtocol(address)": FunctionFragment;
    "upgradeRates(address)": FunctionFragment;
    "upgradeRewards(address)": FunctionFragment;
    "upgradeSettlement(address)": FunctionFragment;
    "zhu()": FunctionFragment;
    "zhuPositionNFT()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GENESIS_PERIODS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accounting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePoolToProtocol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "auctions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeLiquidityRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedTCP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedDecentralization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsGenesisPhaseAndRequireAuthIfSo",
    values: [string, { v: BigNumberish; r: BytesLike; s: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferencePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidationAccountRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lend", values?: undefined): string;
  encodeFunctionData(functionFragment: "lendZhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintTCP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolRemovalTime",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeReferencePoolFromProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireDecreaseDebtAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireLentZhuCountAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePositionWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireStoredCollateralAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireUpdatePositionAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAction",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireZhuMintingAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireZhuReservesBurnAccess",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tcp", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeAuctions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeLend", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePrices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSettlement",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "zhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zhuPositionNFT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GENESIS_PERIODS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePoolToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeLiquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedTCP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedDecentralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsGenesisPhaseAndRequireAuthIfSo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferencePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidationAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTCP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRemovalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePoolFromProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireDecreaseDebtAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireLentZhuCountAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePositionWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireStoredCollateralAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireUpdatePositionAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireZhuMintingAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireZhuReservesBurnAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tcp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zhuPositionNFT",
    data: BytesLike
  ): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "ContractUpgraded(string,address)": EventFragment;
    "EmergencyShutdownExecuted(uint64)": EventFragment;
    "ProtocolUpgraded(address)": EventFragment;
    "ShutdownExecuted()": EventFragment;
    "ShutdownTokensLocked(address,uint256)": EventFragment;
    "ShutdownTokensUnlocked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensUnlocked"): EventFragment;
}

export class IGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGovernorInterface;

  functions: {
    GENESIS_PERIODS(overrides?: CallOverrides): Promise<{
      periods: BigNumber;
      0: BigNumber;
    }>;

    "GENESIS_PERIODS()"(overrides?: CallOverrides): Promise<{
      periods: BigNumber;
      0: BigNumber;
    }>;

    accounting(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "accounting()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReferencePoolToProtocol(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    auctions(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "auctions()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    collateralPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "collateralPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    currentPhase(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "currentPhase()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributedTCP(overrides?: CallOverrides): Promise<{
      circulating: BigNumber;
      0: BigNumber;
    }>;

    "distributedTCP()"(overrides?: CallOverrides): Promise<{
      circulating: BigNumber;
      0: BigNumber;
    }>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeShutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "executeShutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<{
      isGenesis: boolean;
      0: boolean;
    }>;

    "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<{
      isGenesis: boolean;
      0: boolean;
    }>;

    getReferencePools(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getReferencePools()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseLiquidationAccountRewards(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isShutdown()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    lend(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lend()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lendZhu(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lendZhu()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    liquidations(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "liquidations()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    market(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "market()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintTCP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolRemovalTime(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "poolRemovalTime(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    prices(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "prices()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    protocolDeployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "protocolDeployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    protocolLock(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "protocolLock()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    protocolPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "protocolPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rates(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rates()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeReferencePoolFromProtocol(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireDecreaseDebtAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireLentZhuCountAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireUpdatePositionAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireZhuMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireZhuReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    rewards(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewards()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    settlement(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "settlement()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    shutdownTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tcp(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tcp()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    timelock(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "timelock()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    zhu(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "zhu()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "zhuPositionNFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  GENESIS_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

  "GENESIS_PERIODS()"(overrides?: CallOverrides): Promise<BigNumber>;

  accounting(overrides?: CallOverrides): Promise<string>;

  "accounting()"(overrides?: CallOverrides): Promise<string>;

  addReferencePoolToProtocol(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReferencePoolToProtocol(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  auctions(overrides?: CallOverrides): Promise<string>;

  "auctions()"(overrides?: CallOverrides): Promise<string>;

  collateralPool(overrides?: CallOverrides): Promise<string>;

  "collateralPool()"(overrides?: CallOverrides): Promise<string>;

  currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  "currentPhase()"(overrides?: CallOverrides): Promise<number>;

  distributeLiquidityRewards(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributeLiquidityRewards(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

  "distributedTCP()"(overrides?: CallOverrides): Promise<BigNumber>;

  enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

  "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address,string,bytes)"(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeShutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "executeShutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  getIsGenesisPhaseAndRequireAuthIfSo(
    caller: string,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)"(
    caller: string,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReferencePools(overrides?: CallOverrides): Promise<string[]>;

  "getReferencePools()"(overrides?: CallOverrides): Promise<string[]>;

  increaseLiquidationAccountRewards(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseLiquidationAccountRewards(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  lend(overrides?: CallOverrides): Promise<string>;

  "lend()"(overrides?: CallOverrides): Promise<string>;

  lendZhu(overrides?: CallOverrides): Promise<string>;

  "lendZhu()"(overrides?: CallOverrides): Promise<string>;

  liquidations(overrides?: CallOverrides): Promise<string>;

  "liquidations()"(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  mintTCP(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintTCP(address,uint256)"(
    to: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolRemovalTime(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "poolRemovalTime(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  prices(overrides?: CallOverrides): Promise<string>;

  "prices()"(overrides?: CallOverrides): Promise<string>;

  protocolDeployer(overrides?: CallOverrides): Promise<string>;

  "protocolDeployer()"(overrides?: CallOverrides): Promise<string>;

  protocolLock(overrides?: CallOverrides): Promise<string>;

  "protocolLock()"(overrides?: CallOverrides): Promise<string>;

  protocolPool(overrides?: CallOverrides): Promise<string>;

  "protocolPool()"(overrides?: CallOverrides): Promise<string>;

  rates(overrides?: CallOverrides): Promise<string>;

  "rates()"(overrides?: CallOverrides): Promise<string>;

  removeReferencePoolFromProtocol(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeReferencePoolFromProtocol(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requireDecreaseDebtAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireDecreaseDebtAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireLentZhuCountAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireLentZhuCountAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePositionWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requirePositionWriteAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireStoredCollateralAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireStoredCollateralAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireUpdatePositionAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireUpdatePositionAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireValidAction(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireValidAction(address,string)"(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireZhuMintingAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireZhuMintingAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireZhuReservesBurnAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireZhuReservesBurnAccess(address)"(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  settlement(overrides?: CallOverrides): Promise<string>;

  "settlement()"(overrides?: CallOverrides): Promise<string>;

  shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

  "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  tcp(overrides?: CallOverrides): Promise<string>;

  "tcp()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  upgradeAuctions(
    _auctions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeAuctions(address)"(
    _auctions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeLend(
    _lend: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeLend(address)"(
    _lend: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeLiquidations(
    _liquidations: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeLiquidations(address)"(
    _liquidations: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeMarket(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeMarket(address)"(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradePrices(
    _prices: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradePrices(address)"(
    _prices: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeProtocol(
    newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeProtocol(address)"(
    newGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeRates(
    _rates: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeRates(address)"(
    _rates: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeRewards(
    _rewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeRewards(address)"(
    _rewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeSettlement(
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeSettlement(address)"(
    _settlement: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  zhu(overrides?: CallOverrides): Promise<string>;

  "zhu()"(overrides?: CallOverrides): Promise<string>;

  zhuPositionNFT(overrides?: CallOverrides): Promise<string>;

  "zhuPositionNFT()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GENESIS_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

    "GENESIS_PERIODS()"(overrides?: CallOverrides): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<string>;

    "accounting()"(overrides?: CallOverrides): Promise<string>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReferencePoolToProtocol(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(overrides?: CallOverrides): Promise<string>;

    "auctions()"(overrides?: CallOverrides): Promise<string>;

    collateralPool(overrides?: CallOverrides): Promise<string>;

    "collateralPool()"(overrides?: CallOverrides): Promise<string>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    "currentPhase()"(overrides?: CallOverrides): Promise<number>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTCP()"(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    executeShutdown(overrides?: CallOverrides): Promise<void>;

    "executeShutdown()"(overrides?: CallOverrides): Promise<void>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReferencePools(overrides?: CallOverrides): Promise<string[]>;

    "getReferencePools()"(overrides?: CallOverrides): Promise<string[]>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseLiquidationAccountRewards(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    lend(overrides?: CallOverrides): Promise<string>;

    "lend()"(overrides?: CallOverrides): Promise<string>;

    lendZhu(overrides?: CallOverrides): Promise<string>;

    "lendZhu()"(overrides?: CallOverrides): Promise<string>;

    liquidations(overrides?: CallOverrides): Promise<string>;

    "liquidations()"(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintTCP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolRemovalTime(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolRemovalTime(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<string>;

    "prices()"(overrides?: CallOverrides): Promise<string>;

    protocolDeployer(overrides?: CallOverrides): Promise<string>;

    "protocolDeployer()"(overrides?: CallOverrides): Promise<string>;

    protocolLock(overrides?: CallOverrides): Promise<string>;

    "protocolLock()"(overrides?: CallOverrides): Promise<string>;

    protocolPool(overrides?: CallOverrides): Promise<string>;

    "protocolPool()"(overrides?: CallOverrides): Promise<string>;

    rates(overrides?: CallOverrides): Promise<string>;

    "rates()"(overrides?: CallOverrides): Promise<string>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeReferencePoolFromProtocol(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireDecreaseDebtAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireLentZhuCountAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireUpdatePositionAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireZhuMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireZhuReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    settlement(overrides?: CallOverrides): Promise<string>;

    "settlement()"(overrides?: CallOverrides): Promise<string>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    tcp(overrides?: CallOverrides): Promise<string>;

    "tcp()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    upgradeAuctions(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeLend(_lend: string, overrides?: CallOverrides): Promise<void>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeMarket(_market: string, overrides?: CallOverrides): Promise<void>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePrices(_prices: string, overrides?: CallOverrides): Promise<void>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRates(_rates: string, overrides?: CallOverrides): Promise<void>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeSettlement(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zhu(overrides?: CallOverrides): Promise<string>;

    "zhu()"(overrides?: CallOverrides): Promise<string>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<string>;

    "zhuPositionNFT()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AdminUpdated(from: string | null, to: string | null): EventFilter;

    ContractUpgraded(
      contractName: string | null,
      contractAddress: string | null
    ): EventFilter;

    EmergencyShutdownExecuted(shutdownTime: null): EventFilter;

    ProtocolUpgraded(newGovernor: string | null): EventFilter;

    ShutdownExecuted(): EventFilter;

    ShutdownTokensLocked(locker: string | null, count: null): EventFilter;

    ShutdownTokensUnlocked(locker: string | null, count: null): EventFilter;
  };

  estimateGas: {
    GENESIS_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

    "GENESIS_PERIODS()"(overrides?: CallOverrides): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<BigNumber>;

    "accounting()"(overrides?: CallOverrides): Promise<BigNumber>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReferencePoolToProtocol(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    auctions(overrides?: CallOverrides): Promise<BigNumber>;

    "auctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDailyRewardCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPhase()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTCP()"(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<BigNumber>;

    "enforcedDecentralization()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeShutdown(overrides?: Overrides): Promise<BigNumber>;

    "executeShutdown()"(overrides?: Overrides): Promise<BigNumber>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferencePools(overrides?: CallOverrides): Promise<BigNumber>;

    "getReferencePools()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseLiquidationAccountRewards(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "isShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    lend(overrides?: CallOverrides): Promise<BigNumber>;

    "lend()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendZhu(overrides?: CallOverrides): Promise<BigNumber>;

    "lendZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidations()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintTCP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolRemovalTime(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "poolRemovalTime(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    "prices()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolDeployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLock(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber>;

    "rates()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeReferencePoolFromProtocol(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireDecreaseDebtAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireLentZhuCountAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireUpdatePositionAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireZhuMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireZhuReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    settlement(overrides?: CallOverrides): Promise<BigNumber>;

    "settlement()"(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    tcp(overrides?: CallOverrides): Promise<BigNumber>;

    "tcp()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeLend(_lend: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeMarket(_market: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradePrices(_prices: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeRates(_rates: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeRewards(_rewards: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    zhu(overrides?: CallOverrides): Promise<BigNumber>;

    "zhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "zhuPositionNFT()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GENESIS_PERIODS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GENESIS_PERIODS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accounting()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReferencePoolToProtocol(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    auctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentDailyRewardCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPhase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributeLiquidityRewards(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributedTCP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributedTCP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforcedDecentralization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enforcedDecentralization()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeShutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeShutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)"(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferencePools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReferencePools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseLiquidationAccountRewards(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isShutdown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lend()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendZhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendZhu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidations()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintTCP(address,uint256)"(
      to: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolRemovalTime(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "poolRemovalTime(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prices()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolDeployer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rates()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeReferencePoolFromProtocol(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireDecreaseDebtAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireLentZhuCountAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requirePositionWriteAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireStoredCollateralAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireUpdatePositionAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireValidAction(address,string)"(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireZhuMintingAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireZhuReservesBurnAccess(address)"(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settlement()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shutdownTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tcp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tcp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeAuctions(address)"(
      _auctions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeLend(address)"(
      _lend: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeLiquidations(address)"(
      _liquidations: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradePrices(address)"(
      _prices: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeProtocol(address)"(
      newGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeRates(address)"(
      _rates: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeRewards(address)"(
      _rewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeSettlement(address)"(
      _settlement: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    zhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zhu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zhuPositionNFT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
