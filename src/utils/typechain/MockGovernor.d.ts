/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockGovernorInterface extends ethers.utils.Interface {
  functions: {
    "currentPhase()": FunctionFragment;
    "distributedTCP()": FunctionFragment;
    "execute(address,string,bytes)": FunctionFragment;
    "requireValidAction(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributedTCP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAction",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedTCP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAction",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockGovernorInterface;

  functions: {
    currentPhase(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "currentPhase()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    distributedTCP(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "distributedTCP()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    execute(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address,string,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requireValidAction(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "requireValidAction(address,string)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  currentPhase(overrides?: CallOverrides): Promise<number>;

  "currentPhase()"(overrides?: CallOverrides): Promise<number>;

  distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

  "distributedTCP()"(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address,string,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requireValidAction(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireValidAction(address,string)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    currentPhase(overrides?: CallOverrides): Promise<number>;

    "currentPhase()"(overrides?: CallOverrides): Promise<number>;

    distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTCP()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    "execute(address,string,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    requireValidAction(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireValidAction(address,string)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPhase()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTCP()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address,string,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requireValidAction(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireValidAction(address,string)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPhase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributedTCP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributedTCP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address,string,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requireValidAction(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireValidAction(address,string)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
