/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GovernorTestableInterface extends ethers.utils.Interface {
  functions: {
    "EMERGENCY_SHUTDOWN_THRESHOLD()": FunctionFragment;
    "GENESIS_PERIODS()": FunctionFragment;
    "NAME()": FunctionFragment;
    "accounting()": FunctionFragment;
    "addReferencePoolToProtocol(address)": FunctionFragment;
    "auctions()": FunctionFragment;
    "calculateCurrentDailyRewardCount(uint64)": FunctionFragment;
    "calculateRewardsForBootstrapPeriod(uint64)": FunctionFragment;
    "calculateTotalLiquidityRewards(uint64)": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "contains(address[],address)": FunctionFragment;
    "contractsInitialized()": FunctionFragment;
    "currentDailyRewardCount()": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "distributeLiquidityRewards(address,uint256)": FunctionFragment;
    "distributedTCP()": FunctionFragment;
    "distributionScheduleTokens()": FunctionFragment;
    "emergencyShutdownThresholdMet()": FunctionFragment;
    "emergencyShutdownTokensLocked(address)": FunctionFragment;
    "enforcedDecentralization()": FunctionFragment;
    "execute(address,string,bytes)": FunctionFragment;
    "executeEmergencyShutdown()": FunctionFragment;
    "executeShutdown()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "getIsGenesisPhaseAndRequireAuthIfSo(address,tuple)": FunctionFragment;
    "getReferencePools()": FunctionFragment;
    "getSignaturePayloadForUserAddress(address)": FunctionFragment;
    "increaseLiquidationAccountRewards(uint256)": FunctionFragment;
    "initContracts(address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "initPools(address,address,address[])": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "lend()": FunctionFragment;
    "lendZhu()": FunctionFragment;
    "liquidationAccountRewards()": FunctionFragment;
    "liquidations()": FunctionFragment;
    "lockTokensForEmergencyShutdown(uint256)": FunctionFragment;
    "market()": FunctionFragment;
    "mintTCP(address,uint256)": FunctionFragment;
    "periodLength()": FunctionFragment;
    "poolRemovalTime(address)": FunctionFragment;
    "pricePoolsInitialized()": FunctionFragment;
    "prices()": FunctionFragment;
    "protocolDeployer()": FunctionFragment;
    "protocolLock()": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "rates()": FunctionFragment;
    "referencePool(uint256)": FunctionFragment;
    "removePoolFromPools(address[],address)": FunctionFragment;
    "removeReferencePoolFromProtocol(address)": FunctionFragment;
    "requireDecreaseDebtAccess(address)": FunctionFragment;
    "requireLentZhuCountAccess(address)": FunctionFragment;
    "requirePositionWriteAccess(address)": FunctionFragment;
    "requireStoredCollateralAccess(address)": FunctionFragment;
    "requireUpdatePositionAccess(address)": FunctionFragment;
    "requireValidAction(address,string)": FunctionFragment;
    "requireZhuMintingAccess(address)": FunctionFragment;
    "requireZhuReservesBurnAccess(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "setPhaseOneStartTime(uint64)": FunctionFragment;
    "settlement()": FunctionFragment;
    "shutdownTime()": FunctionFragment;
    "tcp()": FunctionFragment;
    "tcpMinted()": FunctionFragment;
    "timelock()": FunctionFragment;
    "totalLiquidityRewards()": FunctionFragment;
    "unlockTokensForEmergencyShutdown()": FunctionFragment;
    "upgradeAuctions(address)": FunctionFragment;
    "upgradeLend(address)": FunctionFragment;
    "upgradeLiquidations(address)": FunctionFragment;
    "upgradeMarket(address)": FunctionFragment;
    "upgradePrices(address)": FunctionFragment;
    "upgradeProtocol(address)": FunctionFragment;
    "upgradeRates(address)": FunctionFragment;
    "upgradeRewards(address)": FunctionFragment;
    "upgradeSettlement(address)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "zhu()": FunctionFragment;
    "zhuPositionNFT()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EMERGENCY_SHUTDOWN_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENESIS_PERIODS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accounting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePoolToProtocol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "auctions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentDailyRewardCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsForBootstrapPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalLiquidityRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDailyRewardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeLiquidityRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedTCP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionScheduleTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownThresholdMet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownTokensLocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedDecentralization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsGenesisPhaseAndRequireAuthIfSo",
    values: [string, { v: BigNumberish; r: BytesLike; s: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferencePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSignaturePayloadForUserAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidationAccountRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initContracts",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initPools",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lend", values?: undefined): string;
  encodeFunctionData(functionFragment: "lendZhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidationAccountRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokensForEmergencyShutdown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintTCP",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolRemovalTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePoolsInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referencePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoolFromPools",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePoolFromProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireDecreaseDebtAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireLentZhuCountAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requirePositionWriteAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireStoredCollateralAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireUpdatePositionAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidAction",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireZhuMintingAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireZhuReservesBurnAccess",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPhaseOneStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tcp", values?: undefined): string;
  encodeFunctionData(functionFragment: "tcpMinted", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokensForEmergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAuctions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeLend", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeLiquidations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePrices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSettlement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "zhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zhuPositionNFT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_SHUTDOWN_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENESIS_PERIODS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accounting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePoolToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentDailyRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsForBootstrapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalLiquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractsInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDailyRewardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeLiquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedTCP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionScheduleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownThresholdMet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownTokensLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedDecentralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsGenesisPhaseAndRequireAuthIfSo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferencePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignaturePayloadForUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidationAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTokensForEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTCP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolRemovalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePoolsInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoolFromPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePoolFromProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireDecreaseDebtAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireLentZhuCountAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requirePositionWriteAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireStoredCollateralAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireUpdatePositionAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireValidAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireZhuMintingAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireZhuReservesBurnAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseOneStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tcp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tcpMinted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokensForEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zhuPositionNFT",
    data: BytesLike
  ): Result;

  events: {
    "AdminUpdated(address,address)": EventFragment;
    "ContractUpgraded(string,address)": EventFragment;
    "EmergencyShutdownExecuted(uint64)": EventFragment;
    "ProtocolUpgraded(address)": EventFragment;
    "ShutdownExecuted()": EventFragment;
    "ShutdownTokensLocked(address,uint256)": EventFragment;
    "ShutdownTokensUnlocked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownTokensUnlocked"): EventFragment;
}

export class GovernorTestable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernorTestableInterface;

  functions: {
    EMERGENCY_SHUTDOWN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GENESIS_PERIODS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    accounting(overrides?: CallOverrides): Promise<[string]>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctions(overrides?: CallOverrides): Promise<[string]>;

    calculateCurrentDailyRewardCount(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    calculateRewardsForBootstrapPeriod(
      bootsrapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    calculateTotalLiquidityRewards(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    collateralPool(overrides?: CallOverrides): Promise<[string]>;

    contains(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractsInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    currentPhase(overrides?: CallOverrides): Promise<[number]>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributedTCP(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributionScheduleTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyShutdownThresholdMet(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyShutdownTokensLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<[string]>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<[boolean] & { isGenesis: boolean }>;

    getReferencePools(overrides?: CallOverrides): Promise<[string[]]>;

    getSignaturePayloadForUserAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initContracts(
      _auctions: string,
      _tcp: string,
      _lend: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initPools(
      _protocolPool: string,
      _collateralPool: string,
      _referencePool: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    lend(overrides?: CallOverrides): Promise<[string]>;

    lendZhu(overrides?: CallOverrides): Promise<[string]>;

    liquidationAccountRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidations(overrides?: CallOverrides): Promise<[string]>;

    lockTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    market(overrides?: CallOverrides): Promise<[string]>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRemovalTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pricePoolsInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    prices(overrides?: CallOverrides): Promise<[string]>;

    protocolDeployer(overrides?: CallOverrides): Promise<[string]>;

    protocolLock(overrides?: CallOverrides): Promise<[string]>;

    protocolPool(overrides?: CallOverrides): Promise<[string]>;

    rates(overrides?: CallOverrides): Promise<[string]>;

    referencePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removePoolFromPools(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlement(overrides?: CallOverrides): Promise<[string]>;

    shutdownTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tcp(overrides?: CallOverrides): Promise<[string]>;

    tcpMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    totalLiquidityRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockTokensForEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    zhu(overrides?: CallOverrides): Promise<[string]>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<[string]>;
  };

  EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  GENESIS_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  accounting(overrides?: CallOverrides): Promise<string>;

  addReferencePoolToProtocol(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctions(overrides?: CallOverrides): Promise<string>;

  calculateCurrentDailyRewardCount(
    rewardsPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardsForBootstrapPeriod(
    bootsrapPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalLiquidityRewards(
    rewardsPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralPool(overrides?: CallOverrides): Promise<string>;

  contains(
    pools: string[],
    pool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractsInitialized(overrides?: CallOverrides): Promise<boolean>;

  currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  distributeLiquidityRewards(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

  distributionScheduleTokens(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyShutdownThresholdMet(overrides?: CallOverrides): Promise<boolean>;

  emergencyShutdownTokensLocked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeEmergencyShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getIsGenesisPhaseAndRequireAuthIfSo(
    caller: string,
    ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReferencePools(overrides?: CallOverrides): Promise<string[]>;

  getSignaturePayloadForUserAddress(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseLiquidationAccountRewards(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initContracts(
    _auctions: string,
    _tcp: string,
    _lend: string,
    _liquidations: string,
    _market: string,
    _rates: string,
    _prices: string,
    _protocolLock: string,
    _rewards: string,
    _settlement: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initPools(
    _protocolPool: string,
    _collateralPool: string,
    _referencePool: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  lend(overrides?: CallOverrides): Promise<string>;

  lendZhu(overrides?: CallOverrides): Promise<string>;

  liquidationAccountRewards(overrides?: CallOverrides): Promise<BigNumber>;

  liquidations(overrides?: CallOverrides): Promise<string>;

  lockTokensForEmergencyShutdown(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  market(overrides?: CallOverrides): Promise<string>;

  mintTCP(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  poolRemovalTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pricePoolsInitialized(overrides?: CallOverrides): Promise<boolean>;

  prices(overrides?: CallOverrides): Promise<string>;

  protocolDeployer(overrides?: CallOverrides): Promise<string>;

  protocolLock(overrides?: CallOverrides): Promise<string>;

  protocolPool(overrides?: CallOverrides): Promise<string>;

  rates(overrides?: CallOverrides): Promise<string>;

  referencePool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removePoolFromPools(
    pools: string[],
    pool: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  removeReferencePoolFromProtocol(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireDecreaseDebtAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireLentZhuCountAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requirePositionWriteAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireStoredCollateralAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireUpdatePositionAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireValidAction(
    target: string,
    signature: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireZhuMintingAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  requireZhuReservesBurnAccess(
    caller: string,
    overrides?: CallOverrides
  ): Promise<void>;

  rewards(overrides?: CallOverrides): Promise<string>;

  setPhaseOneStartTime(
    phaseOneStartTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlement(overrides?: CallOverrides): Promise<string>;

  shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

  tcp(overrides?: CallOverrides): Promise<string>;

  tcpMinted(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  totalLiquidityRewards(overrides?: CallOverrides): Promise<BigNumber>;

  unlockTokensForEmergencyShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeAuctions(
    _auctions: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeLend(
    _lend: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeLiquidations(
    _liquidations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeMarket(
    _market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePrices(
    _prices: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeProtocol(
    newGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeRates(
    _rates: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeSettlement(
    _settlement: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  zhu(overrides?: CallOverrides): Promise<string>;

  zhuPositionNFT(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    accounting(overrides?: CallOverrides): Promise<string>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(overrides?: CallOverrides): Promise<string>;

    calculateCurrentDailyRewardCount(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsForBootstrapPeriod(
      bootsrapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalLiquidityRewards(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<string>;

    contains(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractsInitialized(overrides?: CallOverrides): Promise<boolean>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

    distributionScheduleTokens(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownThresholdMet(overrides?: CallOverrides): Promise<boolean>;

    emergencyShutdownTokensLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    executeEmergencyShutdown(overrides?: CallOverrides): Promise<void>;

    executeShutdown(overrides?: CallOverrides): Promise<void>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReferencePools(overrides?: CallOverrides): Promise<string[]>;

    getSignaturePayloadForUserAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initContracts(
      _auctions: string,
      _tcp: string,
      _lend: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initPools(
      _protocolPool: string,
      _collateralPool: string,
      _referencePool: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    lend(overrides?: CallOverrides): Promise<string>;

    lendZhu(overrides?: CallOverrides): Promise<string>;

    liquidationAccountRewards(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(overrides?: CallOverrides): Promise<string>;

    lockTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    market(overrides?: CallOverrides): Promise<string>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolRemovalTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePoolsInitialized(overrides?: CallOverrides): Promise<boolean>;

    prices(overrides?: CallOverrides): Promise<string>;

    protocolDeployer(overrides?: CallOverrides): Promise<string>;

    protocolLock(overrides?: CallOverrides): Promise<string>;

    protocolPool(overrides?: CallOverrides): Promise<string>;

    rates(overrides?: CallOverrides): Promise<string>;

    referencePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removePoolFromPools(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlement(overrides?: CallOverrides): Promise<string>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    tcp(overrides?: CallOverrides): Promise<string>;

    tcpMinted(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    totalLiquidityRewards(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokensForEmergencyShutdown(overrides?: CallOverrides): Promise<void>;

    upgradeAuctions(
      _auctions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeLend(_lend: string, overrides?: CallOverrides): Promise<void>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeMarket(_market: string, overrides?: CallOverrides): Promise<void>;

    upgradePrices(_prices: string, overrides?: CallOverrides): Promise<void>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRates(_rates: string, overrides?: CallOverrides): Promise<void>;

    upgradeRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    upgradeSettlement(
      _settlement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    zhu(overrides?: CallOverrides): Promise<string>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AdminUpdated(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    ContractUpgraded(
      contractName?: string | null,
      contractAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { contractName: string; contractAddress: string }
    >;

    EmergencyShutdownExecuted(
      shutdownTime?: null
    ): TypedEventFilter<[BigNumber], { shutdownTime: BigNumber }>;

    ProtocolUpgraded(
      newGovernor?: string | null
    ): TypedEventFilter<[string], { newGovernor: string }>;

    ShutdownExecuted(): TypedEventFilter<[], {}>;

    ShutdownTokensLocked(
      locker?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { locker: string; count: BigNumber }
    >;

    ShutdownTokensUnlocked(
      locker?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { locker: string; count: BigNumber }
    >;
  };

  estimateGas: {
    EMERGENCY_SHUTDOWN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    accounting(overrides?: CallOverrides): Promise<BigNumber>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctions(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentDailyRewardCount(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsForBootstrapPeriod(
      bootsrapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalLiquidityRewards(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    contains(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractsInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    currentDailyRewardCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributedTCP(overrides?: CallOverrides): Promise<BigNumber>;

    distributionScheduleTokens(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownThresholdMet(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdownTokensLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedDecentralization(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferencePools(overrides?: CallOverrides): Promise<BigNumber>;

    getSignaturePayloadForUserAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initContracts(
      _auctions: string,
      _tcp: string,
      _lend: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initPools(
      _protocolPool: string,
      _collateralPool: string,
      _referencePool: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    lend(overrides?: CallOverrides): Promise<BigNumber>;

    lendZhu(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationAccountRewards(overrides?: CallOverrides): Promise<BigNumber>;

    liquidations(overrides?: CallOverrides): Promise<BigNumber>;

    lockTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolRemovalTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePoolsInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    prices(overrides?: CallOverrides): Promise<BigNumber>;

    protocolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLock(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber>;

    referencePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePoolFromPools(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlement(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownTime(overrides?: CallOverrides): Promise<BigNumber>;

    tcp(overrides?: CallOverrides): Promise<BigNumber>;

    tcpMinted(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityRewards(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokensForEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    zhu(overrides?: CallOverrides): Promise<BigNumber>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EMERGENCY_SHUTDOWN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GENESIS_PERIODS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accounting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReferencePoolToProtocol(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateCurrentDailyRewardCount(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardsForBootstrapPeriod(
      bootsrapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalLiquidityRewards(
      rewardsPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contains(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractsInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDailyRewardCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeLiquidityRewards(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributedTCP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributionScheduleTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdownThresholdMet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdownTokensLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforcedDecentralization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsGenesisPhaseAndRequireAuthIfSo(
      caller: string,
      ga: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferencePools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSignaturePayloadForUserAddress(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidationAccountRewards(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initContracts(
      _auctions: string,
      _tcp: string,
      _lend: string,
      _liquidations: string,
      _market: string,
      _rates: string,
      _prices: string,
      _protocolLock: string,
      _rewards: string,
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initPools(
      _protocolPool: string,
      _collateralPool: string,
      _referencePool: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendZhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationAccountRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTokensForEmergencyShutdown(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTCP(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRemovalTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePoolsInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referencePool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePoolFromPools(
      pools: string[],
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferencePoolFromProtocol(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireDecreaseDebtAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireLentZhuCountAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requirePositionWriteAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireStoredCollateralAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireUpdatePositionAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireValidAction(
      target: string,
      signature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireZhuMintingAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireZhuReservesBurnAccess(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPhaseOneStartTime(
      phaseOneStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tcp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tcpMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLiquidityRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTokensForEmergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeAuctions(
      _auctions: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeLend(
      _lend: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeLiquidations(
      _liquidations: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeMarket(
      _market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePrices(
      _prices: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeProtocol(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRates(
      _rates: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeSettlement(
      _settlement: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zhuPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
