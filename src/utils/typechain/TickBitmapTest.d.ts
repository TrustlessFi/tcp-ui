/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TickBitmapTestInterface extends ethers.utils.Interface {
  functions: {
    "bitmap(int16)": FunctionFragment;
    "flipTick(int24)": FunctionFragment;
    "getGasCostOfFlipTick(int24)": FunctionFragment;
    "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)": FunctionFragment;
    "isInitialized(int24)": FunctionFragment;
    "nextInitializedTickWithinOneWord(int24,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bitmap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfFlipTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfNextInitializedTickWithinOneWord",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextInitializedTickWithinOneWord",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "bitmap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flipTick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfFlipTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfNextInitializedTickWithinOneWord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextInitializedTickWithinOneWord",
    data: BytesLike
  ): Result;

  events: {};
}

export class TickBitmapTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TickBitmapTestInterface;

  functions: {
    bitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "bitmap(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    flipTick(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flipTick(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getGasCostOfFlipTick(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getGasCostOfFlipTick(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getGasCostOfNextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isInitialized(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isInitialized(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<{
      next: number;
      initialized: boolean;
      0: number;
      1: boolean;
    }>;

    "nextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<{
      next: number;
      initialized: boolean;
      0: number;
      1: boolean;
    }>;
  };

  bitmap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "bitmap(int16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flipTick(
    tick: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flipTick(int24)"(
    tick: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getGasCostOfFlipTick(
    tick: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getGasCostOfFlipTick(int24)"(
    tick: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getGasCostOfNextInitializedTickWithinOneWord(
    tick: BigNumberish,
    lte: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)"(
    tick: BigNumberish,
    lte: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInitialized(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isInitialized(int24)"(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextInitializedTickWithinOneWord(
    tick: BigNumberish,
    lte: boolean,
    overrides?: CallOverrides
  ): Promise<{
    next: number;
    initialized: boolean;
    0: number;
    1: boolean;
  }>;

  "nextInitializedTickWithinOneWord(int24,bool)"(
    tick: BigNumberish,
    lte: boolean,
    overrides?: CallOverrides
  ): Promise<{
    next: number;
    initialized: boolean;
    0: number;
    1: boolean;
  }>;

  callStatic: {
    bitmap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bitmap(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipTick(tick: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "flipTick(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getGasCostOfFlipTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfFlipTick(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfNextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isInitialized(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<{
      next: number;
      initialized: boolean;
      0: number;
      1: boolean;
    }>;

    "nextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<{
      next: number;
      initialized: boolean;
      0: number;
      1: boolean;
    }>;
  };

  filters: {};

  estimateGas: {
    bitmap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bitmap(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipTick(tick: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "flipTick(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getGasCostOfFlipTick(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getGasCostOfFlipTick(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getGasCostOfNextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInitialized(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bitmap(int16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flipTick(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flipTick(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfFlipTick(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfFlipTick(int24)"(
      tick: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfNextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfNextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInitialized(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextInitializedTickWithinOneWord(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextInitializedTickWithinOneWord(int24,bool)"(
      tick: BigNumberish,
      lte: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
