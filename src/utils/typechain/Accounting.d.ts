/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountingInterface extends ethers.utils.Interface {
  functions: {
    "TICK_SPACING()": FunctionFragment;
    "addPositionToIndex(uint256,uint16,int24,int24,address)": FunctionFragment;
    "debt()": FunctionFragment;
    "debtPositionIndexingEnabled()": FunctionFragment;
    "decreaseDebt(uint256)": FunctionFragment;
    "decreasePoolLiquidity(address,uint256)": FunctionFragment;
    "deletePoolPosition(uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "getBasicPositionInfo(uint64)": FunctionFragment;
    "getParticipatedInLiquidityGenesis(address,uint16)": FunctionFragment;
    "getParticipatedInMarketGenesis(address)": FunctionFragment;
    "getPoolPosition(uint256)": FunctionFragment;
    "getPoolPositionNftIdsByOwner(address)": FunctionFragment;
    "getPosition(uint64)": FunctionFragment;
    "getRewardStatus(uint16)": FunctionFragment;
    "getSystemDebtInfo()": FunctionFragment;
    "getTick(uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "increaseDebt(uint256)": FunctionFragment;
    "increaseLentZhu(uint256)": FunctionFragment;
    "increasePoolLiquidity(address,uint256)": FunctionFragment;
    "indexLocalNftID(uint256,uint256)": FunctionFragment;
    "indexPoolPositionsByOwner(address,uint256,uint256)": FunctionFragment;
    "indexPoolPositionsByTickLower(uint16,int24,uint256,uint256)": FunctionFragment;
    "indexPoolPositionsByTickUpper(uint16,int24,uint256,uint256)": FunctionFragment;
    "init(address)": FunctionFragment;
    "isPositionOwner(uint256,address)": FunctionFragment;
    "lentZhu()": FunctionFragment;
    "localNftID(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onRewardsUpgrade(address)": FunctionFragment;
    "poolLiquidity(address)": FunctionFragment;
    "poolPosition(uint256)": FunctionFragment;
    "poolPositionIndexingEnabled()": FunctionFragment;
    "positionsByTickLower(uint16,int24,uint256)": FunctionFragment;
    "positionsByTickUpper(uint16,int24,uint256)": FunctionFragment;
    "positionsCollateralization(uint64[])": FunctionFragment;
    "positionsForTick(int24)": FunctionFragment;
    "sendCollateral(address,uint256)": FunctionFragment;
    "sendLentZhu(address,uint256)": FunctionFragment;
    "sendOneToOneBackedTokens(address,address,uint256)": FunctionFragment;
    "setParticipatedInLiquidityGenesis(address,uint16,bool)": FunctionFragment;
    "setParticipatedInMarketGenesis(address,bool)": FunctionFragment;
    "setPoolPosition(uint256,tuple)": FunctionFragment;
    "setPosition(uint64,tuple)": FunctionFragment;
    "setRewardStatus(uint16,tuple)": FunctionFragment;
    "setSystemDebtInfo(tuple)": FunctionFragment;
    "snapRawTickToSpacing(int24,int24)": FunctionFragment;
    "stopIndexingDebtPositions()": FunctionFragment;
    "stopIndexingPoolPositions()": FunctionFragment;
    "stopped()": FunctionFragment;
    "sweepZhu()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TICK_SPACING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPositionToIndex",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtPositionIndexingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePoolLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBasicPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipatedInLiquidityGenesis",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipatedInMarketGenesis",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPositionNftIdsByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemDebtInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTick",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLentZhu",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexLocalNftID",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexPoolPositionsByOwner",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexPoolPositionsByTickLower",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexPoolPositionsByTickUpper",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPositionOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "lentZhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "localNftID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onRewardsUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPositionIndexingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionsByTickLower",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionsByTickUpper",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionsCollateralization",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "positionsForTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLentZhu",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOneToOneBackedTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipatedInLiquidityGenesis",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipatedInMarketGenesis",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPosition",
    values: [
      BigNumberish,
      {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      BigNumberish,
      {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardStatus",
    values: [
      BigNumberish,
      { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemDebtInfo",
    values: [
      {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "snapRawTickToSpacing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopIndexingDebtPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopIndexingPoolPositions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweepZhu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "TICK_SPACING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPositionToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtPositionIndexingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipatedInLiquidityGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipatedInMarketGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPositionNftIdsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLentZhu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexLocalNftID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexPoolPositionsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexPoolPositionsByTickLower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexPoolPositionsByTickUpper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPositionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lentZhu", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "localNftID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRewardsUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolPositionIndexingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsByTickLower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsByTickUpper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsForTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLentZhu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendOneToOneBackedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipatedInLiquidityGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipatedInMarketGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapRawTickToSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopIndexingDebtPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopIndexingPoolPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepZhu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "DebtPositionIndexingDisabled()": EventFragment;
    "Initialized(address)": EventFragment;
    "PoolPositionIndexingDisabled()": EventFragment;
    "Stopped()": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DebtPositionIndexingDisabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolPositionIndexingDisabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
}

export class Accounting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountingInterface;

  functions: {
    TICK_SPACING(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "TICK_SPACING()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    debt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "debt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "debtPositionIndexingEnabled()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      participated: boolean;
      0: boolean;
    }>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      participated: boolean;
      0: boolean;
    }>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      pp: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
      0: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
    }>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      pp: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
      0: {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastTimeRewarded: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        0: string;
        1: number;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: number;
        8: BigNumber;
      };
    }>;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getPoolPositionNftIdsByOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: number;
        8: boolean;
        9: BigNumber;
      };
    }>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: number;
        8: boolean;
        9: BigNumber;
      };
    }>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
    }>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
    }>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<{
      0: {
        debt: BigNumber;
        totalTCPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<{
      0: {
        debt: BigNumber;
        totalTCPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getTick(uint256,uint256)"(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    indexLocalNftID(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    "indexLocalNftID(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    indexPoolPositionsByOwner(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    "indexPoolPositionsByOwner(address,uint256,uint256)"(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    indexPoolPositionsByTickLower(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    "indexPoolPositionsByTickLower(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    indexPoolPositionsByTickUpper(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    "indexPoolPositionsByTickUpper(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      subArray: BigNumber[];
      0: BigNumber[];
    }>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lentZhu(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lentZhu()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    localNftID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "localNftID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolLiquidity(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: number;
      lastBlockPositionIncreased: number;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    "poolPosition(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: number;
      lastBlockPositionIncreased: number;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "poolPositionIndexingEnabled()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    positionsByTickLower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "positionsByTickLower(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    positionsByTickUpper(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "positionsByTickUpper(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      collateralizations: BigNumber[];
      0: BigNumber[];
    }>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      collateralizations: BigNumber[];
      0: BigNumber[];
    }>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "positionsForTick(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "snapRawTickToSpacing(int24,int24)"(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    stopIndexingDebtPositions(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stopIndexingDebtPositions()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stopIndexingPoolPositions(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stopIndexingPoolPositions()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopped()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    sweepZhu(overrides?: Overrides): Promise<ContractTransaction>;

    "sweepZhu()"(overrides?: Overrides): Promise<ContractTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  TICK_SPACING(overrides?: CallOverrides): Promise<number>;

  "TICK_SPACING()"(overrides?: CallOverrides): Promise<number>;

  addPositionToIndex(
    nftID: BigNumberish,
    poolID: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPositionToIndex(uint256,uint16,int24,int24,address)"(
    nftID: BigNumberish,
    poolID: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

  "debtPositionIndexingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  decreaseDebt(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseDebt(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreasePoolLiquidity(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreasePoolLiquidity(address,uint256)"(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deletePoolPosition(
    nftID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deletePoolPosition(uint256)"(
    nftID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  getBasicPositionInfo(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    debtCount: BigNumber;
    collateralCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBasicPositionInfo(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    debtCount: BigNumber;
    collateralCount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getParticipatedInLiquidityGenesis(
    owner: string,
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getParticipatedInLiquidityGenesis(address,uint16)"(
    owner: string,
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getParticipatedInMarketGenesis(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getParticipatedInMarketGenesis(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPoolPosition(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    poolID: number;
    cumulativeLiquidity: BigNumber;
    totalRewards: BigNumber;
    lastTimeRewarded: BigNumber;
    lastBlockPositionIncreased: BigNumber;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: number;
    8: BigNumber;
  }>;

  "getPoolPosition(uint256)"(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    poolID: number;
    cumulativeLiquidity: BigNumber;
    totalRewards: BigNumber;
    lastTimeRewarded: BigNumber;
    lastBlockPositionIncreased: BigNumber;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: number;
    8: BigNumber;
  }>;

  getPoolPositionNftIdsByOwner(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getPoolPositionNftIdsByOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPosition(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startCumulativeDebt: BigNumber;
    collateral: BigNumber;
    debt: BigNumber;
    startDebtExchangeRate: BigNumber;
    startTCPRewards: BigNumber;
    lastTimeUpdated: BigNumber;
    lastBorrowTime: BigNumber;
    tick: number;
    tickSet: boolean;
    tickIndex: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: number;
    8: boolean;
    9: BigNumber;
  }>;

  "getPosition(uint64)"(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startCumulativeDebt: BigNumber;
    collateral: BigNumber;
    debt: BigNumber;
    startDebtExchangeRate: BigNumber;
    startTCPRewards: BigNumber;
    lastTimeUpdated: BigNumber;
    lastBorrowTime: BigNumber;
    tick: number;
    tickSet: boolean;
    tickIndex: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: number;
    8: boolean;
    9: BigNumber;
  }>;

  getRewardStatus(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalRewards: BigNumber;
    cumulativeLiquidity: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getRewardStatus(uint16)"(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalRewards: BigNumber;
    cumulativeLiquidity: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getSystemDebtInfo(
    overrides?: CallOverrides
  ): Promise<{
    debt: BigNumber;
    totalTCPRewards: BigNumber;
    cumulativeDebt: BigNumber;
    debtExchangeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "getSystemDebtInfo()"(
    overrides?: CallOverrides
  ): Promise<{
    debt: BigNumber;
    totalTCPRewards: BigNumber;
    cumulativeDebt: BigNumber;
    debtExchangeRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  getTick(
    collateralCount: BigNumberish,
    debtCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getTick(uint256,uint256)"(
    collateralCount: BigNumberish,
    debtCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  increaseDebt(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseDebt(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseLentZhu(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseLentZhu(uint256)"(
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increasePoolLiquidity(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increasePoolLiquidity(address,uint256)"(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  indexLocalNftID(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "indexLocalNftID(uint256,uint256)"(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  indexPoolPositionsByOwner(
    owner: string,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "indexPoolPositionsByOwner(address,uint256,uint256)"(
    owner: string,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  indexPoolPositionsByTickLower(
    poolID: BigNumberish,
    tick: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "indexPoolPositionsByTickLower(uint16,int24,uint256,uint256)"(
    poolID: BigNumberish,
    tick: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  indexPoolPositionsByTickUpper(
    poolID: BigNumberish,
    tick: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "indexPoolPositionsByTickUpper(uint16,int24,uint256,uint256)"(
    poolID: BigNumberish,
    tick: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPositionOwner(
    nftID: BigNumberish,
    addressToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPositionOwner(uint256,address)"(
    nftID: BigNumberish,
    addressToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lentZhu(overrides?: CallOverrides): Promise<BigNumber>;

  "lentZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

  localNftID(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "localNftID(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onRewardsUpgrade(
    newRewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onRewardsUpgrade(address)"(
    newRewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "poolLiquidity(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolPosition(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    poolID: number;
    cumulativeLiquidity: BigNumber;
    totalRewards: BigNumber;
    lastTimeRewarded: number;
    lastBlockPositionIncreased: number;
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: number;
  }>;

  "poolPosition(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    poolID: number;
    cumulativeLiquidity: BigNumber;
    totalRewards: BigNumber;
    lastTimeRewarded: number;
    lastBlockPositionIncreased: number;
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: number;
  }>;

  poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

  "poolPositionIndexingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  positionsByTickLower(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "positionsByTickLower(uint16,int24,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  positionsByTickUpper(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "positionsByTickUpper(uint16,int24,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  positionsCollateralization(
    positionIDs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "positionsCollateralization(uint64[])"(
    positionIDs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  positionsForTick(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "positionsForTick(int24)"(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  sendCollateral(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendCollateral(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendLentZhu(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendLentZhu(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendOneToOneBackedTokens(
    token: string,
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendOneToOneBackedTokens(address,address,uint256)"(
    token: string,
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParticipatedInLiquidityGenesis(
    owner: string,
    poolID: BigNumberish,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
    owner: string,
    poolID: BigNumberish,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParticipatedInMarketGenesis(
    account: string,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParticipatedInMarketGenesis(address,bool)"(
    account: string,
    participated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolPosition(
    nftID: BigNumberish,
    pp: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastTimeRewarded: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidity: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolPosition(uint256,tuple)"(
    nftID: BigNumberish,
    pp: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastTimeRewarded: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidity: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPosition(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startTCPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      tick: BigNumberish;
      tickSet: boolean;
      tickIndex: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPosition(uint64,tuple)"(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startTCPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      tick: BigNumberish;
      tickSet: boolean;
      tickIndex: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardStatus(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardStatus(uint16,tuple)"(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSystemDebtInfo(
    _sdi: {
      debt: BigNumberish;
      totalTCPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSystemDebtInfo(tuple)"(
    _sdi: {
      debt: BigNumberish;
      totalTCPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  snapRawTickToSpacing(
    rawTick: BigNumberish,
    tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "snapRawTickToSpacing(int24,int24)"(
    rawTick: BigNumberish,
    tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  stopIndexingDebtPositions(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stopIndexingDebtPositions()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stopIndexingPoolPositions(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stopIndexingPoolPositions()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  sweepZhu(overrides?: Overrides): Promise<ContractTransaction>;

  "sweepZhu()"(overrides?: Overrides): Promise<ContractTransaction>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    TICK_SPACING(overrides?: CallOverrides): Promise<number>;

    "TICK_SPACING()"(overrides?: CallOverrides): Promise<number>;

    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

    "debtPositionIndexingEnabled()"(
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      debtCount: BigNumber;
      collateralCount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: BigNumber;
      lastBlockPositionIncreased: BigNumber;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: number;
      8: BigNumber;
    }>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: BigNumber;
      lastBlockPositionIncreased: BigNumber;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: number;
      8: BigNumber;
    }>;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getPoolPositionNftIdsByOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: boolean;
      9: BigNumber;
    }>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: boolean;
      9: BigNumber;
    }>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<{
      debt: BigNumber;
      totalTCPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      debt: BigNumber;
      totalTCPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getTick(uint256,uint256)"(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    increaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    indexLocalNftID(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "indexLocalNftID(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    indexPoolPositionsByOwner(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "indexPoolPositionsByOwner(address,uint256,uint256)"(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    indexPoolPositionsByTickLower(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "indexPoolPositionsByTickLower(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    indexPoolPositionsByTickUpper(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "indexPoolPositionsByTickUpper(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lentZhu(overrides?: CallOverrides): Promise<BigNumber>;

    "lentZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    localNftID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "localNftID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poolLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolLiquidity(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: number;
      lastBlockPositionIncreased: number;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    "poolPosition(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastTimeRewarded: number;
      lastBlockPositionIncreased: number;
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
    }>;

    poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

    "poolPositionIndexingEnabled()"(
      overrides?: CallOverrides
    ): Promise<boolean>;

    positionsByTickLower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsByTickLower(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsByTickUpper(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsByTickUpper(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "positionsForTick(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "snapRawTickToSpacing(int24,int24)"(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    stopIndexingDebtPositions(overrides?: CallOverrides): Promise<void>;

    "stopIndexingDebtPositions()"(overrides?: CallOverrides): Promise<void>;

    stopIndexingPoolPositions(overrides?: CallOverrides): Promise<void>;

    "stopIndexingPoolPositions()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    sweepZhu(overrides?: CallOverrides): Promise<void>;

    "sweepZhu()"(overrides?: CallOverrides): Promise<void>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    DebtPositionIndexingDisabled(): EventFilter;

    Initialized(governor: string | null): EventFilter;

    PoolPositionIndexingDisabled(): EventFilter;

    Stopped(): EventFilter;
  };

  estimateGas: {
    TICK_SPACING(overrides?: CallOverrides): Promise<BigNumber>;

    "TICK_SPACING()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "debtPositionIndexingEnabled()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolPositionNftIdsByOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getSystemDebtInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTick(uint256,uint256)"(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    indexLocalNftID(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "indexLocalNftID(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexPoolPositionsByOwner(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "indexPoolPositionsByOwner(address,uint256,uint256)"(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexPoolPositionsByTickLower(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "indexPoolPositionsByTickLower(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexPoolPositionsByTickUpper(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "indexPoolPositionsByTickUpper(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lentZhu(overrides?: CallOverrides): Promise<BigNumber>;

    "lentZhu()"(overrides?: CallOverrides): Promise<BigNumber>;

    localNftID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "localNftID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolLiquidity(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolPosition(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "poolPositionIndexingEnabled()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsByTickLower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsByTickLower(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsByTickUpper(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsByTickUpper(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsForTick(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "snapRawTickToSpacing(int24,int24)"(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stopIndexingDebtPositions(overrides?: Overrides): Promise<BigNumber>;

    "stopIndexingDebtPositions()"(overrides?: Overrides): Promise<BigNumber>;

    stopIndexingPoolPositions(overrides?: Overrides): Promise<BigNumber>;

    "stopIndexingPoolPositions()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    sweepZhu(overrides?: Overrides): Promise<BigNumber>;

    "sweepZhu()"(overrides?: Overrides): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TICK_SPACING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TICK_SPACING()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPositionToIndex(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPositionToIndex(uint256,uint16,int24,int24,address)"(
      nftID: BigNumberish,
      poolID: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtPositionIndexingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtPositionIndexingEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deletePoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBasicPositionInfo(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipatedInLiquidityGenesis(address,uint16)"(
      owner: string,
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipatedInMarketGenesis(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipatedInMarketGenesis(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolPosition(uint256)"(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolPositionNftIdsByOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(uint64)"(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardStatus(uint16)"(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSystemDebtInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTick(uint256,uint256)"(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseDebt(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseLentZhu(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseLentZhu(uint256)"(
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increasePoolLiquidity(address,uint256)"(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    indexLocalNftID(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "indexLocalNftID(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexPoolPositionsByOwner(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "indexPoolPositionsByOwner(address,uint256,uint256)"(
      owner: string,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexPoolPositionsByTickLower(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "indexPoolPositionsByTickLower(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexPoolPositionsByTickUpper(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "indexPoolPositionsByTickUpper(uint16,int24,uint256,uint256)"(
      poolID: BigNumberish,
      tick: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isPositionOwner(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPositionOwner(uint256,address)"(
      nftID: BigNumberish,
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lentZhu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lentZhu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localNftID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "localNftID(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onRewardsUpgrade(address)"(
      newRewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolLiquidity(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolPosition(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolPositionIndexingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolPositionIndexingEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsByTickLower(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsByTickLower(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsByTickUpper(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsByTickUpper(uint16,int24,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsCollateralization(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsCollateralization(uint64[])"(
      positionIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsForTick(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendCollateral(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendLentZhu(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendLentZhu(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendOneToOneBackedTokens(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendOneToOneBackedTokens(address,address,uint256)"(
      token: string,
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParticipatedInLiquidityGenesis(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParticipatedInLiquidityGenesis(address,uint16,bool)"(
      owner: string,
      poolID: BigNumberish,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParticipatedInMarketGenesis(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParticipatedInMarketGenesis(address,bool)"(
      account: string,
      participated: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolPosition(uint256,tuple)"(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastTimeRewarded: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidity: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPosition(uint64,tuple)"(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardStatus(uint16,tuple)"(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSystemDebtInfo(tuple)"(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "snapRawTickToSpacing(int24,int24)"(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopIndexingDebtPositions(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stopIndexingDebtPositions()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stopIndexingPoolPositions(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stopIndexingPoolPositions()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepZhu(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sweepZhu()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
