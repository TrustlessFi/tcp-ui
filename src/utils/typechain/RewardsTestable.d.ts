/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardsTestableInterface extends ethers.utils.Interface {
  functions: {
    "accrueRewards()": FunctionFragment;
    "addIncentivePool(address,uint64)": FunctionFragment;
    "calculateUpdatedLiquidityPosition(tuple,tuple,uint64)": FunctionFragment;
    "claimRewards(uint256,uint32)": FunctionFragment;
    "countPools()": FunctionFragment;
    "createLiquidityPosition(tuple,uint32)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "decreaseLiquidityPosition(tuple,uint32)": FunctionFragment;
    "deployer()": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "governor()": FunctionFragment;
    "increaseLiquidityPosition(tuple,uint32)": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "isLiquidityInRange(tuple,int24)": FunctionFragment;
    "lastPeriodGlobalRewardsAccrued()": FunctionFragment;
    "liquidateOutofRangePositions(address,uint256[])": FunctionFragment;
    "liquidationPenalty()": FunctionFragment;
    "maxCollateralLiquidityDecreasePerPeriod()": FunctionFragment;
    "minCollateralLiquidityByPeriod(address)": FunctionFragment;
    "minHueCountPerPosition()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "poolConfigForPoolID(uint16)": FunctionFragment;
    "poolIDForPool(address)": FunctionFragment;
    "removeKickback(uint256)": FunctionFragment;
    "removeLiquidityPosition(tuple)": FunctionFragment;
    "requireAuthorized(bool)": FunctionFragment;
    "setLiquidationPenalty(uint64)": FunctionFragment;
    "setMaxCollateralLiquidityDecreasePerPeriod(uint64)": FunctionFragment;
    "setMinHueCountPerPosition(uint128)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "twapDuration()": FunctionFragment;
    "updatePoolIncentive(uint16,uint64)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIncentivePool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUpdatedLiquidityPosition",
    values: [
      {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidityPosition",
    values: [
      {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityPosition",
    values: [
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityPosition",
    values: [
      {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityInRange",
    values: [
      {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalRewardsAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateOutofRangePositions",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCollateralLiquidityDecreasePerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCollateralLiquidityByPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minHueCountPerPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolConfigForPoolID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIDForPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeKickback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPosition",
    values: [
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requireAuthorized",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCollateralLiquidityDecreasePerPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinHueCountPerPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "twapDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolIncentive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIncentivePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUpdatedLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalRewardsAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateOutofRangePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCollateralLiquidityDecreasePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCollateralLiquidityByPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minHueCountPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolConfigForPoolID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIDForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeKickback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCollateralLiquidityDecreasePerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinHueCountPerPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "LiquidationPenaltyUpdated(uint64)": EventFragment;
    "LiquidityPositionCreated(address,uint16,uint256,int24,int24,uint128)": EventFragment;
    "LiquidityPositionDecreased(uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionIncreased(uint256,uint128)": EventFragment;
    "LiquidityPositionLiquidated(uint256,address)": EventFragment;
    "LiquidityPositionRemoved(uint256,uint256,uint256)": EventFragment;
    "MaxCollateralLiquidityDecreasePerPeriodUpdated(uint64)": EventFragment;
    "MinHueCountPerPositionUpdated(uint128)": EventFragment;
    "PoolAdded(address,uint16,uint64)": EventFragment;
    "PoolIncentiveUpdated(uint16,uint64)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256)": EventFragment;
    "RewardsDistributed(address,bool,uint256)": EventFragment;
    "Stopped()": EventFragment;
    "TwapDurationUpdated(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationPenaltyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionIncreased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionLiquidated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxCollateralLiquidityDecreasePerPeriodUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinHueCountPerPositionUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolIncentiveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwapDurationUpdated"): EventFragment;
}

export class RewardsTestable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsTestableInterface;

  functions: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIncentivePool(
      pool: string,
      rewardsPortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateUpdatedLiquidityPosition(
      _pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      timeNow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          cumulativeLiquidity: BigNumber;
          totalRewards: BigNumber;
          lastBlockPositionIncreased: BigNumber;
          liquidity: BigNumber;
          lastTimeRewarded: BigNumber;
          tickLower: number;
          tickUpper: number;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        },
        BigNumber
      ] & {
        pt: [
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          cumulativeLiquidity: BigNumber;
          totalRewards: BigNumber;
          lastBlockPositionIncreased: BigNumber;
          liquidity: BigNumber;
          lastTimeRewarded: BigNumber;
          tickLower: number;
          tickUpper: number;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        };
        rewards: BigNumber;
      }
    >;

    claimRewards(
      nftTokenID: BigNumberish,
      ui: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countPools(overrides?: CallOverrides): Promise<[number]>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _collateralPool: string,
      _protocolPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLiquidityInRange(
      position: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCollateralLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minCollateralLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
    >;

    minHueCountPerPosition(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolConfigForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { pool: string; rewardsPortion: BigNumber }
    >;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    removeKickback(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireAuthorized(
      authorized: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCollateralLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinHueCountPerPosition(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    twapDuration(overrides?: CallOverrides): Promise<[number]>;

    updatePoolIncentive(
      poolID: BigNumberish,
      incentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  accrueRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIncentivePool(
    pool: string,
    rewardsPortion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateUpdatedLiquidityPosition(
    _pt: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      liquidity: BigNumberish;
      lastTimeRewarded: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      ui: BigNumberish;
      kickbackDestination: string;
      kickbackPortion: BigNumberish;
    },
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    timeNow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string,
        BigNumber
      ] & {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        liquidity: BigNumber;
        lastTimeRewarded: BigNumber;
        tickLower: number;
        tickUpper: number;
        ui: number;
        kickbackDestination: string;
        kickbackPortion: BigNumber;
      },
      BigNumber
    ] & {
      pt: [
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string,
        BigNumber
      ] & {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        liquidity: BigNumber;
        lastTimeRewarded: BigNumber;
        tickLower: number;
        tickUpper: number;
        ui: number;
        kickbackDestination: string;
        kickbackPortion: BigNumber;
      };
      rewards: BigNumber;
    }
  >;

  claimRewards(
    nftTokenID: BigNumberish,
    ui: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countPools(overrides?: CallOverrides): Promise<number>;

  createLiquidityPosition(
    params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
    },
    ui: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseLiquidityPosition(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    ui: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  increaseLiquidityPosition(
    params: {
      tokenId: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    ui: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _collateralPool: string,
    _protocolPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLiquidityInRange(
    position: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      liquidity: BigNumberish;
      lastTimeRewarded: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      ui: BigNumberish;
      kickbackDestination: string;
      kickbackPortion: BigNumberish;
    },
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastPeriodGlobalRewardsAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  liquidateOutofRangePositions(
    pool: string,
    nftTokenIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  maxCollateralLiquidityDecreasePerPeriod(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minCollateralLiquidityByPeriod(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
  >;

  minHueCountPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  poolConfigForPoolID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { pool: string; rewardsPortion: BigNumber }>;

  poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<number>;

  removeKickback(
    nftTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityPosition(
    params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireAuthorized(
    authorized: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  setLiquidationPenalty(
    penalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCollateralLiquidityDecreasePerPeriod(
    decreasePortion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinHueCountPerPosition(
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwapDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  twapDuration(overrides?: CallOverrides): Promise<number>;

  updatePoolIncentive(
    poolID: BigNumberish,
    incentive: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    accrueRewards(overrides?: CallOverrides): Promise<void>;

    addIncentivePool(
      pool: string,
      rewardsPortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateUpdatedLiquidityPosition(
      _pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      timeNow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          cumulativeLiquidity: BigNumber;
          totalRewards: BigNumber;
          lastBlockPositionIncreased: BigNumber;
          liquidity: BigNumber;
          lastTimeRewarded: BigNumber;
          tickLower: number;
          tickUpper: number;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        },
        BigNumber
      ] & {
        pt: [
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          cumulativeLiquidity: BigNumber;
          totalRewards: BigNumber;
          lastBlockPositionIncreased: BigNumber;
          liquidity: BigNumber;
          lastTimeRewarded: BigNumber;
          tickLower: number;
          tickUpper: number;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        };
        rewards: BigNumber;
      }
    >;

    claimRewards(
      nftTokenID: BigNumberish,
      ui: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    countPools(overrides?: CallOverrides): Promise<number>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nftTokenID: BigNumber; liquidity: BigNumber }
    >;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    deployer(overrides?: CallOverrides): Promise<string>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _collateralPool: string,
      _protocolPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isLiquidityInRange(
      position: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    maxCollateralLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCollateralLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { period: BigNumber; minLiquidity: BigNumber }
    >;

    minHueCountPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolConfigForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { pool: string; rewardsPortion: BigNumber }
    >;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<number>;

    removeKickback(
      nftTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    requireAuthorized(
      authorized: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCollateralLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinHueCountPerPosition(
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    twapDuration(overrides?: CallOverrides): Promise<number>;

    updatePoolIncentive(
      poolID: BigNumberish,
      incentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    LiquidationPenaltyUpdated(
      penalty?: null
    ): TypedEventFilter<[BigNumber], { penalty: BigNumber }>;

    LiquidityPositionCreated(
      owner?: string | null,
      poolID?: BigNumberish | null,
      nftID?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, BigNumber, number, number, BigNumber],
      {
        owner: string;
        poolID: number;
        nftID: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
      }
    >;

    LiquidityPositionDecreased(
      nftID?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { nftID: BigNumber; amount0: BigNumber; amount1: BigNumber }
    >;

    LiquidityPositionIncreased(
      nftID?: BigNumberish | null,
      liquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { nftID: BigNumber; liquidity: BigNumber }
    >;

    LiquidityPositionLiquidated(
      nftID?: BigNumberish | null,
      liquidator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { nftID: BigNumber; liquidator: string }
    >;

    LiquidityPositionRemoved(
      nftID?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { nftID: BigNumber; amount0: BigNumber; amount1: BigNumber }
    >;

    MaxCollateralLiquidityDecreasePerPeriodUpdated(
      decreasePortion?: null
    ): TypedEventFilter<[BigNumber], { decreasePortion: BigNumber }>;

    MinHueCountPerPositionUpdated(
      min?: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    PoolAdded(
      pool?: string | null,
      poolID?: BigNumberish | null,
      rewardsPortion?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { pool: string; poolID: number; rewardsPortion: BigNumber }
    >;

    PoolIncentiveUpdated(
      poolID?: BigNumberish | null,
      incentive?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { poolID: number; incentive: BigNumber }
    >;

    RewardsAccrued(
      count?: null,
      periods?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { count: BigNumber; periods: BigNumber }
    >;

    RewardsClaimed(
      caller?: string | null,
      nftTokenID?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        caller: string;
        nftTokenID: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    RewardsDistributed(
      account?: string | null,
      isKickback?: boolean | null,
      tcpRewards?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { account: string; isKickback: boolean; tcpRewards: BigNumber }
    >;

    Stopped(): TypedEventFilter<[], {}>;

    TwapDurationUpdated(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;
  };

  estimateGas: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIncentivePool(
      pool: string,
      rewardsPortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateUpdatedLiquidityPosition(
      _pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      timeNow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      nftTokenID: BigNumberish,
      ui: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countPools(overrides?: CallOverrides): Promise<BigNumber>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _collateralPool: string,
      _protocolPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLiquidityInRange(
      position: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    maxCollateralLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCollateralLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minHueCountPerPosition(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolConfigForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIDForPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeKickback(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireAuthorized(
      authorized: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCollateralLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinHueCountPerPosition(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    twapDuration(overrides?: CallOverrides): Promise<BigNumber>;

    updatePoolIncentive(
      poolID: BigNumberish,
      incentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIncentivePool(
      pool: string,
      rewardsPortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateUpdatedLiquidityPosition(
      _pt: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      timeNow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      nftTokenID: BigNumberish,
      ui: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLiquidityPosition(
      params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      ui: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _collateralPool: string,
      _protocolPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLiquidityInRange(
      position: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalRewardsAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateOutofRangePositions(
      pool: string,
      nftTokenIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationPenalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCollateralLiquidityDecreasePerPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCollateralLiquidityByPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minHueCountPerPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolConfigForPoolID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolIDForPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeKickback(
      nftTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityPosition(
      params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireAuthorized(
      authorized: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLiquidationPenalty(
      penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCollateralLiquidityDecreasePerPeriod(
      decreasePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinHueCountPerPosition(
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePoolIncentive(
      poolID: BigNumberish,
      incentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
