/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TDaoNFTLockFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createContract(address,uint32,uint64)": FunctionFragment;
    "deployer()": FunctionFragment;
    "getAllContracts()": FunctionFragment;
    "getContractsByReceiver(address)": FunctionFragment;
    "tDao()": FunctionFragment;
    "tDaoPositionNFT()": FunctionFragment;
    "tDaoToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createContract",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByReceiver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tDao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tDaoPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tDaoToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tDaoPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tDaoToken", data: BytesLike): Result;

  events: {
    "ContractCreated(address,address,uint32,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
}

export class TDaoNFTLockFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TDaoNFTLockFactoryInterface;

  functions: {
    createContract(
      receiver: string,
      unlockTime: BigNumberish,
      claimablePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    getAllContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { lockContractList: string[] }>;

    getContractsByReceiver(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { lockContractList: string[] }>;

    tDao(overrides?: CallOverrides): Promise<[string]>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<[string]>;

    tDaoToken(overrides?: CallOverrides): Promise<[string]>;
  };

  createContract(
    receiver: string,
    unlockTime: BigNumberish,
    claimablePortion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  getAllContracts(overrides?: CallOverrides): Promise<string[]>;

  getContractsByReceiver(
    receiver: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  tDao(overrides?: CallOverrides): Promise<string>;

  tDaoPositionNFT(overrides?: CallOverrides): Promise<string>;

  tDaoToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createContract(
      receiver: string,
      unlockTime: BigNumberish,
      claimablePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    getAllContracts(overrides?: CallOverrides): Promise<string[]>;

    getContractsByReceiver(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    tDao(overrides?: CallOverrides): Promise<string>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<string>;

    tDaoToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ContractCreated(
      contractAddress?: string | null,
      receiver?: string | null,
      unlockTime?: BigNumberish | null,
      claimablePortion?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      {
        contractAddress: string;
        receiver: string;
        unlockTime: number;
        claimablePortion: BigNumber;
      }
    >;
  };

  estimateGas: {
    createContract(
      receiver: string,
      unlockTime: BigNumberish,
      claimablePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    getAllContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getContractsByReceiver(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tDao(overrides?: CallOverrides): Promise<BigNumber>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    tDaoToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createContract(
      receiver: string,
      unlockTime: BigNumberish,
      claimablePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractsByReceiver(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tDaoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
