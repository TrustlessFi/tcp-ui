/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NftDescriptorTestInterface extends ethers.utils.Interface {
  functions: {
    "addressToString(address)": FunctionFragment;
    "constructTokenURI(tuple)": FunctionFragment;
    "feeToPercentString(uint24)": FunctionFragment;
    "fixedPointToDecimalString(uint160,uint8,uint8)": FunctionFragment;
    "generateSVGImage(tuple)": FunctionFragment;
    "getGasCostOfConstructTokenURI(tuple)": FunctionFragment;
    "isRare(uint256,address)": FunctionFragment;
    "rangeLocation(int24,int24)": FunctionFragment;
    "sliceTokenHex(address,uint256)": FunctionFragment;
    "tickToDecimalString(int24,int24,uint8,uint8,bool)": FunctionFragment;
    "tokenToColorHex(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressToString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "constructTokenURI",
    values: [
      {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeToPercentString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedPointToDecimalString",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [
      {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfConstructTokenURI",
    values: [
      {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRare",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeLocation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sliceTokenHex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickToDecimalString",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToColorHex",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToPercentString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedPointToDecimalString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfConstructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rangeLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sliceTokenHex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickToDecimalString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToColorHex",
    data: BytesLike
  ): Result;

  events: {};
}

export class NftDescriptorTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NftDescriptorTestInterface;

  functions: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressToString(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "constructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feeToPercentString(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeToPercentString(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    fixedPointToDecimalString(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "fixedPointToDecimalString(uint160,uint8,uint8)"(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "generateSVGImage(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getGasCostOfConstructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getGasCostOfConstructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isRare(uint256,address)"(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    rangeLocation(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "rangeLocation(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    sliceTokenHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "sliceTokenHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tickToDecimalString(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tickToDecimalString(int24,int24,uint8,uint8,bool)"(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenToColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenToColorHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  addressToString(_address: string, overrides?: CallOverrides): Promise<string>;

  "addressToString(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  constructTokenURI(
    params: {
      tokenId: BigNumberish;
      quoteTokenAddress: string;
      baseTokenAddress: string;
      quoteTokenSymbol: string;
      baseTokenSymbol: string;
      quoteTokenDecimals: BigNumberish;
      baseTokenDecimals: BigNumberish;
      flipRatio: boolean;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      tickCurrent: BigNumberish;
      tickSpacing: BigNumberish;
      fee: BigNumberish;
      poolAddress: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "constructTokenURI(tuple)"(
    params: {
      tokenId: BigNumberish;
      quoteTokenAddress: string;
      baseTokenAddress: string;
      quoteTokenSymbol: string;
      baseTokenSymbol: string;
      quoteTokenDecimals: BigNumberish;
      baseTokenDecimals: BigNumberish;
      flipRatio: boolean;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      tickCurrent: BigNumberish;
      tickSpacing: BigNumberish;
      fee: BigNumberish;
      poolAddress: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  feeToPercentString(
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "feeToPercentString(uint24)"(
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  fixedPointToDecimalString(
    sqrtRatioX96: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "fixedPointToDecimalString(uint160,uint8,uint8)"(
    sqrtRatioX96: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGImage(
    params: {
      tokenId: BigNumberish;
      quoteTokenAddress: string;
      baseTokenAddress: string;
      quoteTokenSymbol: string;
      baseTokenSymbol: string;
      quoteTokenDecimals: BigNumberish;
      baseTokenDecimals: BigNumberish;
      flipRatio: boolean;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      tickCurrent: BigNumberish;
      tickSpacing: BigNumberish;
      fee: BigNumberish;
      poolAddress: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "generateSVGImage(tuple)"(
    params: {
      tokenId: BigNumberish;
      quoteTokenAddress: string;
      baseTokenAddress: string;
      quoteTokenSymbol: string;
      baseTokenSymbol: string;
      quoteTokenDecimals: BigNumberish;
      baseTokenDecimals: BigNumberish;
      flipRatio: boolean;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      tickCurrent: BigNumberish;
      tickSpacing: BigNumberish;
      fee: BigNumberish;
      poolAddress: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getGasCostOfConstructTokenURI(
    params: {
      tokenId: BigNumberish;
      quoteTokenAddress: string;
      baseTokenAddress: string;
      quoteTokenSymbol: string;
      baseTokenSymbol: string;
      quoteTokenDecimals: BigNumberish;
      baseTokenDecimals: BigNumberish;
      flipRatio: boolean;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      tickCurrent: BigNumberish;
      tickSpacing: BigNumberish;
      fee: BigNumberish;
      poolAddress: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGasCostOfConstructTokenURI(tuple)"(
    params: {
      tokenId: BigNumberish;
      quoteTokenAddress: string;
      baseTokenAddress: string;
      quoteTokenSymbol: string;
      baseTokenSymbol: string;
      quoteTokenDecimals: BigNumberish;
      baseTokenDecimals: BigNumberish;
      flipRatio: boolean;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      tickCurrent: BigNumberish;
      tickSpacing: BigNumberish;
      fee: BigNumberish;
      poolAddress: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isRare(
    tokenId: BigNumberish,
    poolAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRare(uint256,address)"(
    tokenId: BigNumberish,
    poolAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rangeLocation(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  "rangeLocation(int24,int24)"(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
  }>;

  sliceTokenHex(
    token: string,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sliceTokenHex(address,uint256)"(
    token: string,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tickToDecimalString(
    tick: BigNumberish,
    tickSpacing: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    flipRatio: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "tickToDecimalString(int24,int24,uint8,uint8,bool)"(
    tick: BigNumberish,
    tickSpacing: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    flipRatio: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenToColorHex(
    token: string,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenToColorHex(address,uint256)"(
    token: string,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "addressToString(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "constructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    feeToPercentString(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "feeToPercentString(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fixedPointToDecimalString(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "fixedPointToDecimalString(uint160,uint8,uint8)"(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "generateSVGImage(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getGasCostOfConstructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfConstructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRare(uint256,address)"(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rangeLocation(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    "rangeLocation(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
    }>;

    sliceTokenHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sliceTokenHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickToDecimalString(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "tickToDecimalString(int24,int24,uint8,uint8,bool)"(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenToColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenToColorHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressToString(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "constructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToPercentString(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeToPercentString(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedPointToDecimalString(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedPointToDecimalString(uint160,uint8,uint8)"(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateSVGImage(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfConstructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGasCostOfConstructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRare(uint256,address)"(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeLocation(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rangeLocation(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sliceTokenHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sliceTokenHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickToDecimalString(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickToDecimalString(int24,int24,uint8,uint8,bool)"(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToColorHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressToString(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "constructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeToPercentString(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeToPercentString(uint24)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedPointToDecimalString(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedPointToDecimalString(uint160,uint8,uint8)"(
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateSVGImage(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfConstructTokenURI(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasCostOfConstructTokenURI(tuple)"(
      params: {
        tokenId: BigNumberish;
        quoteTokenAddress: string;
        baseTokenAddress: string;
        quoteTokenSymbol: string;
        baseTokenSymbol: string;
        quoteTokenDecimals: BigNumberish;
        baseTokenDecimals: BigNumberish;
        flipRatio: boolean;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        tickCurrent: BigNumberish;
        tickSpacing: BigNumberish;
        fee: BigNumberish;
        poolAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRare(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRare(uint256,address)"(
      tokenId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rangeLocation(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rangeLocation(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sliceTokenHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sliceTokenHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickToDecimalString(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickToDecimalString(int24,int24,uint8,uint8,bool)"(
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToColorHex(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenToColorHex(address,uint256)"(
      token: string,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
