/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TFDaoInterface extends ethers.utils.Interface {
  functions: {
    "accrueInflation()": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "availableSupply()": FunctionFragment;
    "blacklistedAction(bytes4)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "dailyProtocolTFIncentiveCount()": FunctionFragment;
    "deployer()": FunctionFragment;
    "execute(address,string,bytes)": FunctionFragment;
    "executeMetaProposalVote(uint256)": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "getRewards(uint64)": FunctionFragment;
    "idToToken(uint16)": FunctionFragment;
    "incentiveContract()": FunctionFragment;
    "incentiveContractMint(address,uint256)": FunctionFragment;
    "incentivesStartPeriod()": FunctionFragment;
    "init(address,address,address)": FunctionFragment;
    "lastPeriodGlobalInflationUpdated()": FunctionFragment;
    "lockTokens(address,uint256,uint8,address)": FunctionFragment;
    "mintIncentive(address,uint256)": FunctionFragment;
    "multisig()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "positions(uint64)": FunctionFragment;
    "rewardsStatus(uint16)": FunctionFragment;
    "setIncentiveContract(address)": FunctionFragment;
    "start()": FunctionFragment;
    "startPeriod()": FunctionFragment;
    "tfGovernorAlpha()": FunctionFragment;
    "tfPositionNFT()": FunctionFragment;
    "tfToken()": FunctionFragment;
    "timelock()": FunctionFragment;
    "tokenToID(address)": FunctionFragment;
    "totalIncentivesMinted()": FunctionFragment;
    "unlockTokens(uint64)": FunctionFragment;
    "virtualCount(uint16)": FunctionFragment;
    "voteInUnderlyingProtocol(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueInflation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "availableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyProtocolTFIncentiveCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaProposalVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveContractMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesStartPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalInflationUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintIncentive",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "multisig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tfGovernorAlpha",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tfPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tfToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenToID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalIncentivesMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteInUnderlyingProtocol",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyProtocolTFIncentiveCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentiveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveContractMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivesStartPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalInflationUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multisig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tfGovernorAlpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tfPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tfToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenToID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalIncentivesMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteInUnderlyingProtocol",
    data: BytesLike
  ): Result;

  events: {
    "IncentiveMinted(address,uint256)": EventFragment;
    "InflationAccrued(uint64,uint64)": EventFragment;
    "LiquidationIncentiveContractSet(address)": EventFragment;
    "MetaGovernanceDecisionExecuted(address,uint256,bool)": EventFragment;
    "RewardsClaimed(uint64,address)": EventFragment;
    "TFDaoStarted()": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokensLocked(uint16,address,uint8,uint256)": EventFragment;
    "TokensUnlocked(uint16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationAccrued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationIncentiveContractSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MetaGovernanceDecisionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TFDaoStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export class TFDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TFDaoInterface;

  functions: {
    accrueInflation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    idToToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    incentiveContract(overrides?: CallOverrides): Promise<[string]>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incentivesStartPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multisig(overrides?: CallOverrides): Promise<[string]>;

    periodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, number, number] & {
        count: BigNumber;
        startTotalRewards: BigNumber;
        startCumulativeVirtualCount: BigNumber;
        lastPeriodUpdated: number;
        endPeriod: number;
        tokenID: number;
        durationMonths: number;
      }
    >;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        cumulativeVirtualCount: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    setIncentiveContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<[string]>;

    tfPositionNFT(overrides?: CallOverrides): Promise<[string]>;

    tfToken(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    tokenToID(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    totalIncentivesMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  accrueInflation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  blacklistedAction(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  dailyProtocolTFIncentiveCount(overrides?: CallOverrides): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMetaProposalVote(
    metaProposalID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(
    positionNFTTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  idToToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  incentiveContract(overrides?: CallOverrides): Promise<string>;

  incentiveContractMint(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incentivesStartPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _tfPositionNFT: string,
    _tfToken: string,
    _tfGovernorAlpha: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastPeriodGlobalInflationUpdated(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockTokens(
    token: string,
    count: BigNumberish,
    lockDurationMonths: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintIncentive(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multisig(overrides?: CallOverrides): Promise<string>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, number, number] & {
      count: BigNumber;
      startTotalRewards: BigNumber;
      startCumulativeVirtualCount: BigNumber;
      lastPeriodUpdated: number;
      endPeriod: number;
      tokenID: number;
      durationMonths: number;
    }
  >;

  rewardsStatus(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      cumulativeVirtualCount: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  setIncentiveContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  tfGovernorAlpha(overrides?: CallOverrides): Promise<string>;

  tfPositionNFT(overrides?: CallOverrides): Promise<string>;

  tfToken(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  tokenToID(arg0: string, overrides?: CallOverrides): Promise<number>;

  totalIncentivesMinted(overrides?: CallOverrides): Promise<BigNumber>;

  unlockTokens(
    positionNFTTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  virtualCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voteInUnderlyingProtocol(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    accrueInflation(overrides?: CallOverrides): Promise<void>;

    addToken(token: string, overrides?: CallOverrides): Promise<void>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    idToToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    incentiveContract(overrides?: CallOverrides): Promise<string>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incentivesStartPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multisig(overrides?: CallOverrides): Promise<string>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, number, number] & {
        count: BigNumber;
        startTotalRewards: BigNumber;
        startCumulativeVirtualCount: BigNumber;
        lastPeriodUpdated: number;
        endPeriod: number;
        tokenID: number;
        durationMonths: number;
      }
    >;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        cumulativeVirtualCount: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    setIncentiveContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    startPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<string>;

    tfPositionNFT(overrides?: CallOverrides): Promise<string>;

    tfToken(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    tokenToID(arg0: string, overrides?: CallOverrides): Promise<number>;

    totalIncentivesMinted(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IncentiveMinted(
      token?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; count: BigNumber }
    >;

    InflationAccrued(
      currentPeriod?: BigNumberish | null,
      periods?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { currentPeriod: BigNumber; periods: BigNumber }
    >;

    LiquidationIncentiveContractSet(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    MetaGovernanceDecisionExecuted(
      governorAlpha?: string | null,
      proposalID?: BigNumberish | null,
      decision?: boolean | null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { governorAlpha: string; proposalID: BigNumber; decision: boolean }
    >;

    RewardsClaimed(
      positionNFTTokenID?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { positionNFTTokenID: BigNumber; owner: string }
    >;

    TFDaoStarted(): TypedEventFilter<[], {}>;

    TokenAdded(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokensLocked(
      tokenID?: BigNumberish | null,
      initialOwner?: string | null,
      lockDurationMonths?: BigNumberish | null,
      count?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      {
        tokenID: number;
        initialOwner: string;
        lockDurationMonths: number;
        count: BigNumber;
      }
    >;

    TokensUnlocked(
      tokenID?: BigNumberish | null,
      owner?: string | null,
      count?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { tokenID: number; owner: string; count: BigNumber }
    >;
  };

  estimateGas: {
    accrueInflation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    idToToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveContract(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incentivesStartPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multisig(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIncentiveContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<BigNumber>;

    tfPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    tfToken(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToID(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalIncentivesMinted(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueInflation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    idToToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incentivesStartPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIncentiveContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tfPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tfToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToID(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalIncentivesMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
