/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TfDaoTestableInterface extends ethers.utils.Interface {
  functions: {
    "accrueInflation()": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "availableSupply()": FunctionFragment;
    "blacklistedAction(bytes4)": FunctionFragment;
    "calculateMonthsToDays(uint64)": FunctionFragment;
    "calculateVirtualCount(uint256,uint64)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "dailyProtocolTFIncentiveCount()": FunctionFragment;
    "deployer()": FunctionFragment;
    "execute(address,string,bytes)": FunctionFragment;
    "executeMetaProposalVote(uint256)": FunctionFragment;
    "firstPeriod()": FunctionFragment;
    "getRewards(uint64)": FunctionFragment;
    "idToToken(uint16)": FunctionFragment;
    "incentiveContract()": FunctionFragment;
    "incentiveContractMint(address,uint256)": FunctionFragment;
    "incentivesStartPeriod()": FunctionFragment;
    "init(address,address,address)": FunctionFragment;
    "lastPeriodGlobalInflationUpdated()": FunctionFragment;
    "lockTokens(address,uint256,uint8,address)": FunctionFragment;
    "mintIncentive(address,uint256)": FunctionFragment;
    "multisig()": FunctionFragment;
    "periodLength()": FunctionFragment;
    "positions(uint64)": FunctionFragment;
    "rewardsStatus(uint16)": FunctionFragment;
    "setIncentiveContract(address)": FunctionFragment;
    "start()": FunctionFragment;
    "startPeriod()": FunctionFragment;
    "tfGovernorAlpha()": FunctionFragment;
    "tfPositionNFT()": FunctionFragment;
    "tfToken()": FunctionFragment;
    "timelock()": FunctionFragment;
    "tokenToID(address)": FunctionFragment;
    "totalIncentivesMinted()": FunctionFragment;
    "unlockTokens(uint64)": FunctionFragment;
    "virtualCount(uint16)": FunctionFragment;
    "voteInUnderlyingProtocol(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueInflation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "availableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMonthsToDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVirtualCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyProtocolTFIncentiveCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaProposalVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveContractMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesStartPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodGlobalInflationUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintIncentive",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "multisig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tfGovernorAlpha",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tfPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tfToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenToID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalIncentivesMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteInUnderlyingProtocol",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMonthsToDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVirtualCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyProtocolTFIncentiveCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentiveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveContractMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivesStartPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodGlobalInflationUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multisig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tfGovernorAlpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tfPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tfToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenToID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalIncentivesMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteInUnderlyingProtocol",
    data: BytesLike
  ): Result;

  events: {
    "IncentiveMinted(address,uint256)": EventFragment;
    "InflationAccrued(uint64,uint64)": EventFragment;
    "LiquidationIncentiveContractSet(address)": EventFragment;
    "MetaGovernanceDecisionExecuted(address,uint256,bool)": EventFragment;
    "RewardsClaimed(uint64,address)": EventFragment;
    "TFDaoStarted()": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokensLocked(uint16,address,uint8,uint256)": EventFragment;
    "TokensUnlocked(uint16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationAccrued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationIncentiveContractSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MetaGovernanceDecisionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TFDaoStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export class TfDaoTestable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TfDaoTestableInterface;

  functions: {
    accrueInflation(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueInflation()"(overrides?: Overrides): Promise<ContractTransaction>;

    addToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "availableSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "blacklistedAction(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    calculateMonthsToDays(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateMonthsToDays(uint64)"(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateVirtualCount(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateVirtualCount(uint256,uint64)"(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    currentPeriod(overrides?: CallOverrides): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<{
      period: BigNumber;
      0: BigNumber;
    }>;

    dailyProtocolTFIncentiveCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "dailyProtocolTFIncentiveCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeMetaProposalVote(uint256)"(
      metaProposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getRewards(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    idToToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "idToToken(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    incentiveContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "incentiveContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incentivesStartPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "incentivesStartPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,address,address)"(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastPeriodGlobalInflationUpdated(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastPeriodGlobalInflationUpdated()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockTokens(address,uint256,uint8,address)"(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintIncentive(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multisig(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "multisig()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    periodLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "periodLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      startTotalRewards: BigNumber;
      startCumulativeVirtualCount: BigNumber;
      lastPeriodUpdated: number;
      endPeriod: number;
      tokenID: number;
      durationMonths: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    "positions(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      startTotalRewards: BigNumber;
      startCumulativeVirtualCount: BigNumber;
      lastPeriodUpdated: number;
      endPeriod: number;
      tokenID: number;
      durationMonths: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cumulativeVirtualCount: BigNumber;
      totalRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "rewardsStatus(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cumulativeVirtualCount: BigNumber;
      totalRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    setIncentiveContract(
      _contract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIncentiveContract(address)"(
      _contract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    start(overrides?: Overrides): Promise<ContractTransaction>;

    "start()"(overrides?: Overrides): Promise<ContractTransaction>;

    startPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "startPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tfGovernorAlpha()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tfPositionNFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tfPositionNFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tfToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tfToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    timelock(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "timelock()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenToID(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "tokenToID(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    totalIncentivesMinted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalIncentivesMinted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockTokens(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "virtualCount(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  accrueInflation(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueInflation()"(overrides?: Overrides): Promise<ContractTransaction>;

  addToken(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "availableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  blacklistedAction(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "blacklistedAction(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  calculateMonthsToDays(
    months: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateMonthsToDays(uint64)"(
    months: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateVirtualCount(
    count: BigNumberish,
    durationMonths: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateVirtualCount(uint256,uint64)"(
    count: BigNumberish,
    durationMonths: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  dailyProtocolTFIncentiveCount(overrides?: CallOverrides): Promise<BigNumber>;

  "dailyProtocolTFIncentiveCount()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  execute(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address,string,bytes)"(
    target: string,
    signature: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeMetaProposalVote(
    metaProposalID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeMetaProposalVote(uint256)"(
    metaProposalID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(
    positionNFTTokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getRewards(uint64)"(
    positionNFTTokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  idToToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "idToToken(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  incentiveContract(overrides?: CallOverrides): Promise<string>;

  "incentiveContract()"(overrides?: CallOverrides): Promise<string>;

  incentiveContractMint(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incentiveContractMint(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incentivesStartPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "incentivesStartPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _tfPositionNFT: string,
    _tfToken: string,
    _tfGovernorAlpha: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,address,address)"(
    _tfPositionNFT: string,
    _tfToken: string,
    _tfGovernorAlpha: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastPeriodGlobalInflationUpdated(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastPeriodGlobalInflationUpdated()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockTokens(
    token: string,
    count: BigNumberish,
    lockDurationMonths: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockTokens(address,uint256,uint8,address)"(
    token: string,
    count: BigNumberish,
    lockDurationMonths: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintIncentive(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintIncentive(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multisig(overrides?: CallOverrides): Promise<string>;

  "multisig()"(overrides?: CallOverrides): Promise<string>;

  periodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    count: BigNumber;
    startTotalRewards: BigNumber;
    startCumulativeVirtualCount: BigNumber;
    lastPeriodUpdated: number;
    endPeriod: number;
    tokenID: number;
    durationMonths: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  "positions(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    count: BigNumber;
    startTotalRewards: BigNumber;
    startCumulativeVirtualCount: BigNumber;
    lastPeriodUpdated: number;
    endPeriod: number;
    tokenID: number;
    durationMonths: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  rewardsStatus(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    cumulativeVirtualCount: BigNumber;
    totalRewards: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "rewardsStatus(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    cumulativeVirtualCount: BigNumber;
    totalRewards: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  setIncentiveContract(
    _contract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIncentiveContract(address)"(
    _contract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  start(overrides?: Overrides): Promise<ContractTransaction>;

  "start()"(overrides?: Overrides): Promise<ContractTransaction>;

  startPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "startPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  tfGovernorAlpha(overrides?: CallOverrides): Promise<string>;

  "tfGovernorAlpha()"(overrides?: CallOverrides): Promise<string>;

  tfPositionNFT(overrides?: CallOverrides): Promise<string>;

  "tfPositionNFT()"(overrides?: CallOverrides): Promise<string>;

  tfToken(overrides?: CallOverrides): Promise<string>;

  "tfToken()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  tokenToID(arg0: string, overrides?: CallOverrides): Promise<number>;

  "tokenToID(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  totalIncentivesMinted(overrides?: CallOverrides): Promise<BigNumber>;

  "totalIncentivesMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlockTokens(
    positionNFTTokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockTokens(uint64)"(
    positionNFTTokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  virtualCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "virtualCount(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voteInUnderlyingProtocol(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "voteInUnderlyingProtocol(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    accrueInflation(overrides?: CallOverrides): Promise<void>;

    "accrueInflation()"(overrides?: CallOverrides): Promise<void>;

    addToken(token: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "availableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "blacklistedAction(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateMonthsToDays(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateMonthsToDays(uint64)"(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateVirtualCount(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateVirtualCount(uint256,uint64)"(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dailyProtocolTFIncentiveCount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeMetaProposalVote(uint256)"(
      metaProposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getRewards(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    idToToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "idToToken(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    incentiveContract(overrides?: CallOverrides): Promise<string>;

    "incentiveContract()"(overrides?: CallOverrides): Promise<string>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incentivesStartPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "incentivesStartPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,address)"(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInflationUpdated()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockTokens(address,uint256,uint8,address)"(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintIncentive(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multisig(overrides?: CallOverrides): Promise<string>;

    "multisig()"(overrides?: CallOverrides): Promise<string>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      startTotalRewards: BigNumber;
      startCumulativeVirtualCount: BigNumber;
      lastPeriodUpdated: number;
      endPeriod: number;
      tokenID: number;
      durationMonths: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    "positions(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      startTotalRewards: BigNumber;
      startCumulativeVirtualCount: BigNumber;
      lastPeriodUpdated: number;
      endPeriod: number;
      tokenID: number;
      durationMonths: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cumulativeVirtualCount: BigNumber;
      totalRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "rewardsStatus(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cumulativeVirtualCount: BigNumber;
      totalRewards: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    setIncentiveContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIncentiveContract(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    "start()"(overrides?: CallOverrides): Promise<void>;

    startPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "startPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<string>;

    "tfGovernorAlpha()"(overrides?: CallOverrides): Promise<string>;

    tfPositionNFT(overrides?: CallOverrides): Promise<string>;

    "tfPositionNFT()"(overrides?: CallOverrides): Promise<string>;

    tfToken(overrides?: CallOverrides): Promise<string>;

    "tfToken()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    tokenToID(arg0: string, overrides?: CallOverrides): Promise<number>;

    "tokenToID(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    totalIncentivesMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalIncentivesMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockTokens(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "virtualCount(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IncentiveMinted(token: string | null, count: null): EventFilter;

    InflationAccrued(
      currentPeriod: BigNumberish | null,
      periods: null
    ): EventFilter;

    LiquidationIncentiveContractSet(_contract: string | null): EventFilter;

    MetaGovernanceDecisionExecuted(
      governorAlpha: string | null,
      proposalID: BigNumberish | null,
      decision: boolean | null
    ): EventFilter;

    RewardsClaimed(
      positionNFTTokenID: BigNumberish | null,
      owner: string | null
    ): EventFilter;

    TFDaoStarted(): EventFilter;

    TokenAdded(token: string | null): EventFilter;

    TokensLocked(
      tokenID: BigNumberish | null,
      initialOwner: string | null,
      lockDurationMonths: BigNumberish | null,
      count: null
    ): EventFilter;

    TokensUnlocked(
      tokenID: BigNumberish | null,
      owner: string | null,
      count: null
    ): EventFilter;
  };

  estimateGas: {
    accrueInflation(overrides?: Overrides): Promise<BigNumber>;

    "accrueInflation()"(overrides?: Overrides): Promise<BigNumber>;

    addToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "addToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "availableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blacklistedAction(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMonthsToDays(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateMonthsToDays(uint64)"(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateVirtualCount(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateVirtualCount(uint256,uint64)"(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dailyProtocolTFIncentiveCount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeMetaProposalVote(uint256)"(
      metaProposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    firstPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getRewards(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    idToToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "idToToken(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentiveContract(overrides?: CallOverrides): Promise<BigNumber>;

    "incentiveContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incentivesStartPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "incentivesStartPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,address,address)"(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastPeriodGlobalInflationUpdated()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockTokens(address,uint256,uint8,address)"(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintIncentive(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multisig(overrides?: CallOverrides): Promise<BigNumber>;

    "multisig()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "periodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positions(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardsStatus(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIncentiveContract(
      _contract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIncentiveContract(address)"(
      _contract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    start(overrides?: Overrides): Promise<BigNumber>;

    "start()"(overrides?: Overrides): Promise<BigNumber>;

    startPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "startPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<BigNumber>;

    "tfGovernorAlpha()"(overrides?: CallOverrides): Promise<BigNumber>;

    tfPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "tfPositionNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    tfToken(overrides?: CallOverrides): Promise<BigNumber>;

    "tfToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToID(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenToID(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalIncentivesMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalIncentivesMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockTokens(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "virtualCount(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueInflation(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueInflation()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    addToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "availableSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistedAction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blacklistedAction(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateMonthsToDays(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateMonthsToDays(uint64)"(
      months: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateVirtualCount(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateVirtualCount(uint256,uint64)"(
      count: BigNumberish,
      durationMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyProtocolTFIncentiveCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dailyProtocolTFIncentiveCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address,string,bytes)"(
      target: string,
      signature: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeMetaProposalVote(
      metaProposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeMetaProposalVote(uint256)"(
      metaProposalID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    firstPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewards(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getRewards(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    idToToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "idToToken(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incentiveContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incentivesStartPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "incentivesStartPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,address,address)"(
      _tfPositionNFT: string,
      _tfToken: string,
      _tfGovernorAlpha: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastPeriodGlobalInflationUpdated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPeriodGlobalInflationUpdated()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockTokens(address,uint256,uint8,address)"(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintIncentive(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintIncentive(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multisig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positions(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsStatus(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIncentiveContract(
      _contract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIncentiveContract(address)"(
      _contract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    start(overrides?: Overrides): Promise<PopulatedTransaction>;

    "start()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tfGovernorAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tfGovernorAlpha()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tfPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tfPositionNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tfToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tfToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToID(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenToID(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalIncentivesMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalIncentivesMinted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockTokens(uint64)"(
      positionNFTTokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    virtualCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "virtualCount(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
