/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TfGovernorAlphaInterface extends ethers.utils.Interface {
  functions: {
    "BALLOT_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "PROPOSAL_THRESHOLD_PERCENTAGE()": FunctionFragment;
    "QUORUM_VOTES_PERCENTAGE()": FunctionFragment;
    "__abdicate()": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getAllProposals(address)": FunctionFragment;
    "getReceipt(uint48,address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "name()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalThreshold(uint256)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address[],string[],bytes[],string)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "tfDao()": FunctionFragment;
    "timelock()": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "votingPeriodBlocks()": FunctionFragment;
    "votingToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_THRESHOLD_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_VOTES_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__abdicate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tfDao", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriodBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_THRESHOLD_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_VOTES_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__abdicate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tfDao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriodBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingToken",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalQueued(uint256,uint256)": EventFragment;
    "VoteCast(address,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class TfGovernorAlpha extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TfGovernorAlphaInterface;

  functions: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PROPOSAL_THRESHOLD_PERCENTAGE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "PROPOSAL_THRESHOLD_PERCENTAGE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    QUORUM_VOTES_PERCENTAGE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "QUORUM_VOTES_PERCENTAGE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    __abdicate(overrides?: Overrides): Promise<ContractTransaction>;

    "__abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
      2: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
      2: string[];
    }>;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      _proposals: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      _proposalStates: number[];
      _receipts: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
      0: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      1: number[];
      2: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
    }>;

    "getAllProposals(address)"(
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      _proposals: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      _proposalStates: number[];
      _receipts: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
      0: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      1: number[];
      2: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    "getReceipt(uint48,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    guardian(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "guardian()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proposalCount(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "proposalCount()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposalThreshold(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalThreshold(uint256)"(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string;
      1: string;
      2: number;
      3: number;
      4: BigNumber;
      5: number;
      6: number;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: BigNumber;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string;
      1: string;
      2: number;
      3: number;
      4: BigNumber;
      5: number;
      6: number;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: BigNumber;
    }>;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "propose(address[],string[],bytes[],string)"(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    tfDao(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tfDao()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    timelock(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "timelock()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    votingDelay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "votingDelay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    votingPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    votingPeriodBlocks(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "votingPeriodBlocks()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    votingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "votingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  PROPOSAL_THRESHOLD_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  "PROPOSAL_THRESHOLD_PERCENTAGE()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  QUORUM_VOTES_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  "QUORUM_VOTES_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

  __abdicate(overrides?: Overrides): Promise<ContractTransaction>;

  "__abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

  cancel(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: string[];
    2: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: string[];
    2: string[];
  }>;

  getAllProposals(
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    _proposals: {
      targets: string[];
      signatures: string[];
      calldatas: string[];
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string[];
      1: string[];
      2: string[];
      3: string;
      4: string;
      5: number;
      6: number;
      7: BigNumber;
      8: number;
      9: number;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }[];
    _proposalStates: number[];
    _receipts: {
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }[];
    0: {
      targets: string[];
      signatures: string[];
      calldatas: string[];
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string[];
      1: string[];
      2: string[];
      3: string;
      4: string;
      5: number;
      6: number;
      7: BigNumber;
      8: number;
      9: number;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }[];
    1: number[];
    2: {
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }[];
  }>;

  "getAllProposals(address)"(
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    _proposals: {
      targets: string[];
      signatures: string[];
      calldatas: string[];
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string[];
      1: string[];
      2: string[];
      3: string;
      4: string;
      5: number;
      6: number;
      7: BigNumber;
      8: number;
      9: number;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }[];
    _proposalStates: number[];
    _receipts: {
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }[];
    0: {
      targets: string[];
      signatures: string[];
      calldatas: string[];
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string[];
      1: string[];
      2: string[];
      3: string;
      4: string;
      5: number;
      6: number;
      7: BigNumber;
      8: number;
      9: number;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }[];
    1: number[];
    2: {
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }[];
  }>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "getReceipt(uint48,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  guardian(overrides?: CallOverrides): Promise<string>;

  "guardian()"(overrides?: CallOverrides): Promise<string>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<number>;

  "proposalCount()"(overrides?: CallOverrides): Promise<number>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalThreshold(
    availableVotingTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proposalThreshold(uint256)"(
    availableVotingTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    ipfsHash: string;
    proposer: string;
    eta: number;
    id: number;
    forVotes: BigNumber;
    startBlock: number;
    endBlock: number;
    canceled: boolean;
    executed: boolean;
    againstVotes: BigNumber;
    availableVotingTokens: BigNumber;
    0: string;
    1: string;
    2: number;
    3: number;
    4: BigNumber;
    5: number;
    6: number;
    7: boolean;
    8: boolean;
    9: BigNumber;
    10: BigNumber;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    ipfsHash: string;
    proposer: string;
    eta: number;
    id: number;
    forVotes: BigNumber;
    startBlock: number;
    endBlock: number;
    canceled: boolean;
    executed: boolean;
    againstVotes: BigNumber;
    availableVotingTokens: BigNumber;
    0: string;
    1: string;
    2: number;
    3: number;
    4: BigNumber;
    5: number;
    6: number;
    7: boolean;
    8: boolean;
    9: BigNumber;
    10: BigNumber;
  }>;

  propose(
    targets: string[],
    signatures: string[],
    calldatas: BytesLike[],
    ipfsHash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "propose(address[],string[],bytes[],string)"(
    targets: string[],
    signatures: string[],
    calldatas: BytesLike[],
    ipfsHash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queue(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  tfDao(overrides?: CallOverrides): Promise<string>;

  "tfDao()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriodBlocks(overrides?: CallOverrides): Promise<number>;

  "votingPeriodBlocks()"(overrides?: CallOverrides): Promise<number>;

  votingToken(overrides?: CallOverrides): Promise<string>;

  "votingToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    PROPOSAL_THRESHOLD_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PROPOSAL_THRESHOLD_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    QUORUM_VOTES_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "QUORUM_VOTES_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    __abdicate(overrides?: CallOverrides): Promise<void>;

    "__abdicate()"(overrides?: CallOverrides): Promise<void>;

    cancel(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
      2: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
      2: string[];
    }>;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      _proposals: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      _proposalStates: number[];
      _receipts: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
      0: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      1: number[];
      2: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
    }>;

    "getAllProposals(address)"(
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      _proposals: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      _proposalStates: number[];
      _receipts: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
      0: {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        availableVotingTokens: BigNumber;
        0: string[];
        1: string[];
        2: string[];
        3: string;
        4: string;
        5: number;
        6: number;
        7: BigNumber;
        8: number;
        9: number;
        10: boolean;
        11: boolean;
        12: BigNumber;
        13: BigNumber;
      }[];
      1: number[];
      2: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      }[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "getReceipt(uint48,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    guardian(overrides?: CallOverrides): Promise<string>;

    "guardian()"(overrides?: CallOverrides): Promise<string>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<number>;

    "proposalCount()"(overrides?: CallOverrides): Promise<number>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalThreshold(uint256)"(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string;
      1: string;
      2: number;
      3: number;
      4: BigNumber;
      5: number;
      6: number;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: BigNumber;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      availableVotingTokens: BigNumber;
      0: string;
      1: string;
      2: number;
      3: number;
      4: BigNumber;
      5: number;
      6: number;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: BigNumber;
    }>;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(address[],string[],bytes[],string)"(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    tfDao(overrides?: CallOverrides): Promise<string>;

    "tfDao()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodBlocks(overrides?: CallOverrides): Promise<number>;

    "votingPeriodBlocks()"(overrides?: CallOverrides): Promise<number>;

    votingToken(overrides?: CallOverrides): Promise<string>;

    "votingToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ProposalCanceled(id: BigNumberish | null): EventFilter;

    ProposalCreated(
      id: BigNumberish | null,
      proposer: string | null
    ): EventFilter;

    ProposalExecuted(id: BigNumberish | null): EventFilter;

    ProposalQueued(id: BigNumberish | null, eta: null): EventFilter;

    VoteCast(
      voter: string | null,
      proposalId: BigNumberish | null,
      support: boolean | null,
      votes: null
    ): EventFilter;
  };

  estimateGas: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_THRESHOLD_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PROPOSAL_THRESHOLD_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    QUORUM_VOTES_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "QUORUM_VOTES_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    __abdicate(overrides?: Overrides): Promise<BigNumber>;

    "__abdicate()"(overrides?: Overrides): Promise<BigNumber>;

    cancel(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllProposals(address)"(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint48,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    "guardian()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalThreshold(uint256)"(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "propose(address[],string[],bytes[],string)"(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tfDao(overrides?: CallOverrides): Promise<BigNumber>;

    "tfDao()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriodBlocks()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "votingToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROPOSAL_THRESHOLD_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PROPOSAL_THRESHOLD_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QUORUM_VOTES_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "QUORUM_VOTES_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __abdicate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "__abdicate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllProposals(address)"(
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint48,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThreshold(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalThreshold(uint256)"(
      availableVotingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "propose(address[],string[],bytes[],string)"(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tfDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tfDao()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriodBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votingPeriodBlocks()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
