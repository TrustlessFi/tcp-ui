/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SqrtPriceMathEchidnaTestInterface extends ethers.utils.Interface {
  functions: {
    "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)": FunctionFragment;
    "getAmount0DeltaInvariants(uint160,uint160,uint128)": FunctionFragment;
    "getAmount0DeltaSignedInvariants(uint160,uint160,int128)": FunctionFragment;
    "getAmount1DeltaInvariants(uint160,uint160,uint128)": FunctionFragment;
    "getAmount1DeltaSignedInvariants(uint160,uint160,int128)": FunctionFragment;
    "getInRangeMintInvariants(uint160,uint160,uint160,int128)": FunctionFragment;
    "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getOutOfRangeMintInvariants(uint160,uint160,int128)": FunctionFragment;
    "mulDivRoundingUpInvariants(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmount0DeltaEquivalency",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount0DeltaInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount0DeltaSignedInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1DeltaInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1DeltaSignedInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInRangeMintInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromInputInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromOutputInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutOfRangeMintInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDivRoundingUpInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmount0DeltaEquivalency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount0DeltaInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount0DeltaSignedInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1DeltaInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1DeltaSignedInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInRangeMintInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromInputInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromOutputInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutOfRangeMintInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDivRoundingUpInvariants",
    data: BytesLike
  ): Result;

  events: {};
}

export class SqrtPriceMathEchidnaTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SqrtPriceMathEchidnaTestInterface;

  functions: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getAmount0DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getAmount0DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getAmount1DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getAmount1DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getInRangeMintInvariants(uint160,uint160,uint160,int128)"(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "getOutOfRangeMintInvariants(uint160,uint160,int128)"(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "mulDivRoundingUpInvariants(uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  getAmount0DeltaEquivalency(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)"(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount0DeltaInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "getAmount0DeltaInvariants(uint160,uint160,uint128)"(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount0DeltaSignedInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "getAmount0DeltaSignedInvariants(uint160,uint160,int128)"(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount1DeltaInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "getAmount1DeltaInvariants(uint160,uint160,uint128)"(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount1DeltaSignedInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "getAmount1DeltaSignedInvariants(uint160,uint160,int128)"(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getInRangeMintInvariants(
    sqrtLower: BigNumberish,
    sqrtCurrent: BigNumberish,
    sqrtUpper: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "getInRangeMintInvariants(uint160,uint160,uint160,int128)"(
    sqrtLower: BigNumberish,
    sqrtCurrent: BigNumberish,
    sqrtUpper: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromAmount0RoundingUpInvariants(
    sqrtPX96: BigNumberish,
    liquidity: BigNumberish,
    amount: BigNumberish,
    add: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)"(
    sqrtPX96: BigNumberish,
    liquidity: BigNumberish,
    amount: BigNumberish,
    add: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromAmount1RoundingDownInvariants(
    sqrtPX96: BigNumberish,
    liquidity: BigNumberish,
    amount: BigNumberish,
    add: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)"(
    sqrtPX96: BigNumberish,
    liquidity: BigNumberish,
    amount: BigNumberish,
    add: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromInputInvariants(
    sqrtP: BigNumberish,
    liquidity: BigNumberish,
    amountIn: BigNumberish,
    zeroForOne: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)"(
    sqrtP: BigNumberish,
    liquidity: BigNumberish,
    amountIn: BigNumberish,
    zeroForOne: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromOutputInvariants(
    sqrtP: BigNumberish,
    liquidity: BigNumberish,
    amountOut: BigNumberish,
    zeroForOne: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)"(
    sqrtP: BigNumberish,
    liquidity: BigNumberish,
    amountOut: BigNumberish,
    zeroForOne: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getOutOfRangeMintInvariants(
    sqrtA: BigNumberish,
    sqrtB: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "getOutOfRangeMintInvariants(uint160,uint160,int128)"(
    sqrtA: BigNumberish,
    sqrtB: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  mulDivRoundingUpInvariants(
    x: BigNumberish,
    y: BigNumberish,
    z: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "mulDivRoundingUpInvariants(uint256,uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    z: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAmount0DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAmount0DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAmount1DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getAmount1DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getInRangeMintInvariants(uint160,uint160,uint160,int128)"(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getOutOfRangeMintInvariants(uint160,uint160,int128)"(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mulDivRoundingUpInvariants(uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmount0DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmount0DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmount1DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmount1DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInRangeMintInvariants(uint160,uint160,uint160,int128)"(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutOfRangeMintInvariants(uint160,uint160,int128)"(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulDivRoundingUpInvariants(uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmount0DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmount0DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmount1DeltaInvariants(uint160,uint160,uint128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmount1DeltaSignedInvariants(uint160,uint160,int128)"(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInRangeMintInvariants(uint160,uint160,uint160,int128)"(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)"(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)"(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutOfRangeMintInvariants(uint160,uint160,int128)"(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mulDivRoundingUpInvariants(uint256,uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
