/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AuctionsTestableInterface extends ethers.utils.Interface {
  functions: {
    "aggregateAuctionSize(uint256,uint256)": FunctionFragment;
    "bidDeficitAuction(uint64,uint128)": FunctionFragment;
    "bidSurplusAuction(uint64,uint128)": FunctionFragment;
    "checkReservesAndStartAuctions()": FunctionFragment;
    "collateralPool()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "deficitAuction(uint64)": FunctionFragment;
    "deficitAuctionComplete(uint64)": FunctionFragment;
    "deficitAuctionCount()": FunctionFragment;
    "deficitAuctionExists(uint64)": FunctionFragment;
    "deficitAuctionLive(uint64)": FunctionFragment;
    "deployer()": FunctionFragment;
    "extensionPerBid()": FunctionFragment;
    "getAllAuctions(uint64,bool)": FunctionFragment;
    "governor()": FunctionFragment;
    "init(address)": FunctionFragment;
    "latestAuctionCompletionTime()": FunctionFragment;
    "maxAuctionDuration()": FunctionFragment;
    "maxBatchSize()": FunctionFragment;
    "maxDeficitLotSize()": FunctionFragment;
    "maxSurplusLotSize()": FunctionFragment;
    "minAuctionDuration()": FunctionFragment;
    "minBidDelta()": FunctionFragment;
    "minLotSize()": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "reservesBufferLowerBound()": FunctionFragment;
    "reservesBufferUpperBound()": FunctionFragment;
    "setExtensionPerBid(uint64)": FunctionFragment;
    "setMaxAuctionDuration(uint64)": FunctionFragment;
    "setMaxBatchSize(uint64)": FunctionFragment;
    "setMaxDeficitLotSize(uint256)": FunctionFragment;
    "setMaxSurplusLotSize(uint256)": FunctionFragment;
    "setMinAuctionDuration(uint64)": FunctionFragment;
    "setMinBidDelta(uint256)": FunctionFragment;
    "setMinLotSize(uint256)": FunctionFragment;
    "setReservesBufferLowerBound(uint256)": FunctionFragment;
    "setReservesBufferUpperBound(uint256)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
    "settleDeficitAuction(uint64)": FunctionFragment;
    "settleSurplusAuction(uint64)": FunctionFragment;
    "shouldStartAuctions()": FunctionFragment;
    "startAuction(uint256,bool)": FunctionFragment;
    "startAuctions(uint256,bool)": FunctionFragment;
    "stop()": FunctionFragment;
    "stopped()": FunctionFragment;
    "surplusAuction(uint64)": FunctionFragment;
    "surplusAuctionComplete(uint64)": FunctionFragment;
    "surplusAuctionCount()": FunctionFragment;
    "surplusAuctionExists(uint64)": FunctionFragment;
    "surplusAuctionLive(uint64)": FunctionFragment;
    "tcp()": FunctionFragment;
    "twapDuration()": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
    "zhuToBeBought()": FunctionFragment;
    "zhuToBeSold()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aggregateAuctionSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidDeficitAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidSurplusAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkReservesAndStartAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionComplete",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deficitAuctionLive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extensionPerBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctions",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestAuctionCompletionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeficitLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSurplusLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesBufferLowerBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesBufferUpperBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExtensionPerBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBatchSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeficitLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSurplusLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservesBufferLowerBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservesBufferUpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleDeficitAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleSurplusAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldStartAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startAuctions",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "surplusAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionComplete",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionLive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tcp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "twapDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zhuToBeBought",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zhuToBeSold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregateAuctionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidDeficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkReservesAndStartAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitAuctionLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extensionPerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAuctionCompletionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDeficitLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSurplusLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minLotSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesBufferLowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesBufferUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtensionPerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeficitLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSurplusLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservesBufferLowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservesBufferUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleDeficitAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldStartAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tcp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twapDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zhuToBeBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zhuToBeSold",
    data: BytesLike
  ): Result;

  events: {
    "DeficitAuctionBid(uint64,address,uint256)": EventFragment;
    "DeficitAuctionSettled(uint64,address)": EventFragment;
    "DeficitAuctionStarted(uint64,uint256,uint64)": EventFragment;
    "Initialized(address)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint64)": EventFragment;
    "Stopped()": EventFragment;
    "SurplusAuctionBid(uint64,address,uint256)": EventFragment;
    "SurplusAuctionSettled(uint64,address)": EventFragment;
    "SurplusAuctionStarted(uint64,uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeficitAuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeficitAuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeficitAuctionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SurplusAuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SurplusAuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SurplusAuctionStarted"): EventFragment;
}

export class AuctionsTestable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AuctionsTestableInterface;

  functions: {
    aggregateAuctionSize(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      size: BigNumber;
      0: BigNumber;
    }>;

    "aggregateAuctionSize(uint256,uint256)"(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      size: BigNumber;
      0: BigNumber;
    }>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bidDeficitAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bidSurplusAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkReservesAndStartAuctions(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "checkReservesAndStartAuctions()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "collateralPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    deficitAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "deficitAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    deficitAuctionCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "deficitAuctionCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    deficitAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "deficitAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    deficitAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "deficitAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    deployer(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "deployer()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    extensionPerBid(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "extensionPerBid()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getAllAuctions(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _auctions: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      _auctionIDs: BigNumber[];
      _isComplete: boolean[];
      0: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      1: BigNumber[];
      2: boolean[];
    }>;

    "getAllAuctions(uint64,bool)"(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _auctions: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      _auctionIDs: BigNumber[];
      _isComplete: boolean[];
      0: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      1: BigNumber[];
      2: boolean[];
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    latestAuctionCompletionTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "latestAuctionCompletionTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxAuctionDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxBatchSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxBatchSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxDeficitLotSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxDeficitLotSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxSurplusLotSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxSurplusLotSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minAuctionDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minAuctionDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minBidDelta(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minLotSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minLotSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    protocolPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "protocolPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    reservesBufferLowerBound(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    reservesBufferUpperBound(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxBatchSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxDeficitLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxDeficitLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxSurplusLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxSurplusLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shouldStartAuctions(overrides?: CallOverrides): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "shouldStartAuctions()"(overrides?: CallOverrides): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    startAuction(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startAuction(uint256,bool)"(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startAuctions(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startAuctions(uint256,bool)"(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopped()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    surplusAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "surplusAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    surplusAuctionCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "surplusAuctionCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    surplusAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "surplusAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    surplusAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "surplusAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tcp(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tcp()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    twapDuration(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "twapDuration()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    zhuToBeBought(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "zhuToBeBought()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    zhuToBeSold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "zhuToBeSold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  aggregateAuctionSize(
    amtIn: BigNumberish,
    lotSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "aggregateAuctionSize(uint256,uint256)"(
    amtIn: BigNumberish,
    lotSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bidDeficitAuction(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bidDeficitAuction(uint64,uint128)"(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bidSurplusAuction(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bidSurplusAuction(uint64,uint128)"(
    auctionID: BigNumberish,
    bid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkReservesAndStartAuctions(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "checkReservesAndStartAuctions()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collateralPool(overrides?: CallOverrides): Promise<string>;

  "collateralPool()"(overrides?: CallOverrides): Promise<string>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  deficitAuction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    count: BigNumber;
    bid: BigNumber;
    bidder: string;
    endTime: number;
    maxEndTime: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
  }>;

  "deficitAuction(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    count: BigNumber;
    bid: BigNumber;
    bidder: string;
    endTime: number;
    maxEndTime: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
  }>;

  deficitAuctionComplete(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "deficitAuctionComplete(uint64)"(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deficitAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "deficitAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  deficitAuctionExists(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "deficitAuctionExists(uint64)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deficitAuctionLive(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "deficitAuctionLive(uint64)"(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deployer(overrides?: CallOverrides): Promise<string>;

  "deployer()"(overrides?: CallOverrides): Promise<string>;

  extensionPerBid(overrides?: CallOverrides): Promise<BigNumber>;

  "extensionPerBid()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAllAuctions(
    start: BigNumberish,
    surplus: boolean,
    overrides?: CallOverrides
  ): Promise<{
    _auctions: {
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }[];
    _auctionIDs: BigNumber[];
    _isComplete: boolean[];
    0: {
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }[];
    1: BigNumber[];
    2: boolean[];
  }>;

  "getAllAuctions(uint64,bool)"(
    start: BigNumberish,
    surplus: boolean,
    overrides?: CallOverrides
  ): Promise<{
    _auctions: {
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }[];
    _auctionIDs: BigNumber[];
    _isComplete: boolean[];
    0: {
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }[];
    1: BigNumber[];
    2: boolean[];
  }>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  init(_governor: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    _governor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  latestAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

  "latestAuctionCompletionTime()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "maxAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

  "maxBatchSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeficitLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  "maxDeficitLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxSurplusLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSurplusLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "minAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  minBidDelta(overrides?: CallOverrides): Promise<BigNumber>;

  "minBidDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

  minLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  protocolPool(overrides?: CallOverrides): Promise<string>;

  "protocolPool()"(overrides?: CallOverrides): Promise<string>;

  reservesBufferLowerBound(overrides?: CallOverrides): Promise<BigNumber>;

  "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  reservesBufferUpperBound(overrides?: CallOverrides): Promise<BigNumber>;

  "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  setExtensionPerBid(
    extension: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExtensionPerBid(uint64)"(
    extension: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxAuctionDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxAuctionDuration(uint64)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxBatchSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxBatchSize(uint64)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxDeficitLotSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxDeficitLotSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxSurplusLotSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxSurplusLotSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinAuctionDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinAuctionDuration(uint64)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinBidDelta(
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinBidDelta(uint256)"(
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinLotSize(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinLotSize(uint256)"(
    size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReservesBufferLowerBound(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReservesBufferLowerBound(uint256)"(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReservesBufferUpperBound(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReservesBufferUpperBound(uint256)"(
    bound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTwapDuration(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTwapDuration(uint32)"(
    duration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleDeficitAuction(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleDeficitAuction(uint64)"(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleSurplusAuction(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleSurplusAuction(uint64)"(
    auctionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shouldStartAuctions(overrides?: CallOverrides): Promise<{
    surplusAmount: BigNumber;
    deficitAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "shouldStartAuctions()"(overrides?: CallOverrides): Promise<{
    surplusAmount: BigNumber;
    deficitAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  startAuction(
    count: BigNumberish,
    isSurplus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startAuction(uint256,bool)"(
    count: BigNumberish,
    isSurplus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startAuctions(
    amt: BigNumberish,
    isSurplus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startAuctions(uint256,bool)"(
    amt: BigNumberish,
    isSurplus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  surplusAuction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    count: BigNumber;
    bid: BigNumber;
    bidder: string;
    endTime: number;
    maxEndTime: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
  }>;

  "surplusAuction(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    count: BigNumber;
    bid: BigNumber;
    bidder: string;
    endTime: number;
    maxEndTime: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
  }>;

  surplusAuctionComplete(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "surplusAuctionComplete(uint64)"(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  surplusAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "surplusAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  surplusAuctionExists(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "surplusAuctionExists(uint64)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  surplusAuctionLive(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "surplusAuctionLive(uint64)"(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tcp(overrides?: CallOverrides): Promise<string>;

  "tcp()"(overrides?: CallOverrides): Promise<string>;

  twapDuration(overrides?: CallOverrides): Promise<number>;

  "twapDuration()"(overrides?: CallOverrides): Promise<number>;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "validUpdate(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  zhuToBeBought(overrides?: CallOverrides): Promise<BigNumber>;

  "zhuToBeBought()"(overrides?: CallOverrides): Promise<BigNumber>;

  zhuToBeSold(overrides?: CallOverrides): Promise<BigNumber>;

  "zhuToBeSold()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    aggregateAuctionSize(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aggregateAuctionSize(uint256,uint256)"(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidDeficitAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidSurplusAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkReservesAndStartAuctions(overrides?: CallOverrides): Promise<void>;

    "checkReservesAndStartAuctions()"(overrides?: CallOverrides): Promise<void>;

    collateralPool(overrides?: CallOverrides): Promise<string>;

    "collateralPool()"(overrides?: CallOverrides): Promise<string>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    deficitAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deficitAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deficitAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deficitAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deficitAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deficitAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployer(overrides?: CallOverrides): Promise<string>;

    "deployer()"(overrides?: CallOverrides): Promise<string>;

    extensionPerBid(overrides?: CallOverrides): Promise<BigNumber>;

    "extensionPerBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAuctions(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _auctions: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      _auctionIDs: BigNumber[];
      _isComplete: boolean[];
      0: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      1: BigNumber[];
      2: boolean[];
    }>;

    "getAllAuctions(uint64,bool)"(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _auctions: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      _auctionIDs: BigNumber[];
      _isComplete: boolean[];
      0: {
        count: BigNumber;
        bid: BigNumber;
        bidder: string;
        endTime: number;
        maxEndTime: number;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: number;
        4: number;
      }[];
      1: BigNumber[];
      2: boolean[];
    }>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    init(_governor: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _governor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    latestAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxBatchSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeficitLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDeficitLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSurplusLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSurplusLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    minBidDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<string>;

    "protocolPool()"(overrides?: CallOverrides): Promise<string>;

    reservesBufferLowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferUpperBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBatchSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDeficitLotSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxDeficitLotSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSurplusLotSize(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxSurplusLotSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLotSize(size: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMinLotSize(uint256)"(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldStartAuctions(overrides?: CallOverrides): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "shouldStartAuctions()"(overrides?: CallOverrides): Promise<{
      surplusAmount: BigNumber;
      deficitAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    startAuction(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "startAuction(uint256,bool)"(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startAuctions(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "startAuctions(uint256,bool)"(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      bid: BigNumber;
      bidder: string;
      endTime: number;
      maxEndTime: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    surplusAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "surplusAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    surplusAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "surplusAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "surplusAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    surplusAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "surplusAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tcp(overrides?: CallOverrides): Promise<string>;

    "tcp()"(overrides?: CallOverrides): Promise<string>;

    twapDuration(overrides?: CallOverrides): Promise<number>;

    "twapDuration()"(overrides?: CallOverrides): Promise<number>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    zhuToBeBought(overrides?: CallOverrides): Promise<BigNumber>;

    "zhuToBeBought()"(overrides?: CallOverrides): Promise<BigNumber>;

    zhuToBeSold(overrides?: CallOverrides): Promise<BigNumber>;

    "zhuToBeSold()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    DeficitAuctionBid(
      auctionID: BigNumberish | null,
      bidder: string | null,
      bid: null
    ): EventFilter;

    DeficitAuctionSettled(
      auctionID: BigNumberish | null,
      winner: string | null
    ): EventFilter;

    DeficitAuctionStarted(
      auctionID: BigNumberish | null,
      count: BigNumberish | null,
      maxEndTime: null
    ): EventFilter;

    Initialized(governor: string | null): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    Stopped(): EventFilter;

    SurplusAuctionBid(
      auctionID: BigNumberish | null,
      bidder: string | null,
      bid: null
    ): EventFilter;

    SurplusAuctionSettled(
      auctionID: BigNumberish | null,
      winner: string | null
    ): EventFilter;

    SurplusAuctionStarted(
      auctionID: BigNumberish | null,
      count: BigNumberish | null,
      maxEndTime: null
    ): EventFilter;
  };

  estimateGas: {
    aggregateAuctionSize(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aggregateAuctionSize(uint256,uint256)"(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bidDeficitAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bidSurplusAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkReservesAndStartAuctions(overrides?: Overrides): Promise<BigNumber>;

    "checkReservesAndStartAuctions()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    collateralPool(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deficitAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deficitAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deficitAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "deficitAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    deficitAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deficitAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deficitAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deficitAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    "deployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    extensionPerBid(overrides?: CallOverrides): Promise<BigNumber>;

    "extensionPerBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAuctions(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllAuctions(uint64,bool)"(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(_governor: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    latestAuctionCompletionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxBatchSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeficitLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDeficitLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSurplusLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSurplusLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    minBidDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minLotSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferLowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferLowerBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    reservesBufferUpperBound(overrides?: CallOverrides): Promise<BigNumber>;

    "reservesBufferUpperBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxBatchSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxDeficitLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxDeficitLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxSurplusLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxSurplusLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shouldStartAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "shouldStartAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    startAuction(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startAuction(uint256,bool)"(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startAuctions(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startAuctions(uint256,bool)"(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    surplusAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "surplusAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    surplusAuctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "surplusAuctionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "surplusAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    surplusAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "surplusAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tcp(overrides?: CallOverrides): Promise<BigNumber>;

    "tcp()"(overrides?: CallOverrides): Promise<BigNumber>;

    twapDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "twapDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zhuToBeBought(overrides?: CallOverrides): Promise<BigNumber>;

    "zhuToBeBought()"(overrides?: CallOverrides): Promise<BigNumber>;

    zhuToBeSold(overrides?: CallOverrides): Promise<BigNumber>;

    "zhuToBeSold()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregateAuctionSize(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aggregateAuctionSize(uint256,uint256)"(
      amtIn: BigNumberish,
      lotSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidDeficitAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bidDeficitAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bidSurplusAuction(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bidSurplusAuction(uint64,uint128)"(
      auctionID: BigNumberish,
      bid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkReservesAndStartAuctions(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "checkReservesAndStartAuctions()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collateralPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deficitAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deficitAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deficitAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deployer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extensionPerBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "extensionPerBid()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAuctions(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllAuctions(uint64,bool)"(
      start: BigNumberish,
      surplus: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _governor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    latestAuctionCompletionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestAuctionCompletionTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxBatchSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeficitLotSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxDeficitLotSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSurplusLotSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxSurplusLotSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBidDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minBidDelta()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minLotSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minLotSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reservesBufferLowerBound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reservesBufferLowerBound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservesBufferUpperBound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reservesBufferUpperBound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExtensionPerBid(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExtensionPerBid(uint64)"(
      extension: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxBatchSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxBatchSize(uint64)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxDeficitLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxDeficitLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxSurplusLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxSurplusLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinAuctionDuration(uint64)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinBidDelta(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinBidDelta(uint256)"(
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinLotSize(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinLotSize(uint256)"(
      size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReservesBufferLowerBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReservesBufferLowerBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReservesBufferUpperBound(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReservesBufferUpperBound(uint256)"(
      bound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTwapDuration(uint32)"(
      duration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleDeficitAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleDeficitAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleSurplusAuction(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleSurplusAuction(uint64)"(
      auctionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shouldStartAuctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shouldStartAuctions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startAuction(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startAuction(uint256,bool)"(
      count: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startAuctions(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startAuctions(uint256,bool)"(
      amt: BigNumberish,
      isSurplus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surplusAuction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuction(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionComplete(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionComplete(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionExists(uint64)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionLive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "surplusAuctionLive(uint64)"(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tcp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tcp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twapDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validUpdate(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zhuToBeBought(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zhuToBeBought()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zhuToBeSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zhuToBeSold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
