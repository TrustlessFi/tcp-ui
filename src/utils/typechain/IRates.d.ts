/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRatesInterface extends ethers.utils.Interface {
  functions: {
    "addReferencePool(address)": FunctionFragment;
    "interestRateAbsoluteValue()": FunctionFragment;
    "positiveInterestRate()": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "setInterestRateStep(uint128)": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateAbsoluteValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positiveInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateAbsoluteValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positiveInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "AcceptableErrorUpdated(uint128)": EventFragment;
    "ErrorIntervalUpdated(uint128)": EventFragment;
    "InterestRateStepUpdated(uint128)": EventFragment;
    "MaxRateUpdated(int128)": EventFragment;
    "MaxStepsUpdated(uint64)": EventFragment;
    "MinRateUpdated(int128)": EventFragment;
    "MinTimeBetweenUpdatesUpdated(uint64)": EventFragment;
    "RateUpdated(int256,uint256,uint256,uint64)": EventFragment;
    "ReferencePoolAdded(address)": EventFragment;
    "ReferencePoolRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptableErrorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ErrorIntervalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestRateStepUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxStepsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinTimeBetweenUpdatesUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferencePoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferencePoolRemoved"): EventFragment;
}

export class IRates extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRatesInterface;

  functions: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    positiveInterestRate(overrides?: CallOverrides): Promise<[boolean]>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

  positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestRateStep(
    step: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

    positiveInterestRate(overrides?: CallOverrides): Promise<boolean>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AcceptableErrorUpdated(
      error?: null
    ): TypedEventFilter<[BigNumber], { error: BigNumber }>;

    ErrorIntervalUpdated(
      error?: null
    ): TypedEventFilter<[BigNumber], { error: BigNumber }>;

    InterestRateStepUpdated(
      step?: null
    ): TypedEventFilter<[BigNumber], { step: BigNumber }>;

    MaxRateUpdated(
      max?: null
    ): TypedEventFilter<[BigNumber], { max: BigNumber }>;

    MaxStepsUpdated(
      steps?: null
    ): TypedEventFilter<[BigNumber], { steps: BigNumber }>;

    MinRateUpdated(
      min?: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    MinTimeBetweenUpdatesUpdated(
      time?: null
    ): TypedEventFilter<[BigNumber], { time: BigNumber }>;

    RateUpdated(
      interestRate?: null,
      price?: null,
      rewardCount?: null,
      nextUpdateTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        interestRate: BigNumber;
        price: BigNumber;
        rewardCount: BigNumber;
        nextUpdateTime: BigNumber;
      }
    >;

    ReferencePoolAdded(
      pool?: null
    ): TypedEventFilter<[string], { pool: string }>;

    ReferencePoolRemoved(
      pool?: null
    ): TypedEventFilter<[string], { pool: string }>;
  };

  estimateGas: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRateAbsoluteValue(overrides?: CallOverrides): Promise<BigNumber>;

    positiveInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRateAbsoluteValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positiveInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRateStep(
      step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
