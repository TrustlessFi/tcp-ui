/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IUniswapV3PoolStateInterface extends ethers.utils.Interface {
  functions: {
    "feeGrowthGlobal0X128()": FunctionFragment;
    "feeGrowthGlobal1X128()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "observations(uint256)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "protocolFees()": FunctionFragment;
    "slot0()": FunctionFragment;
    "tickBitmap(int16)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feeGrowthGlobal0X128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal1X128",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "observations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "slot0", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickBitmap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal0X128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal1X128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "observations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slot0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickBitmap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;

  events: {};
}

export class IUniswapV3PoolState extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IUniswapV3PoolStateInterface;

  functions: {
    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "feeGrowthGlobal0X128()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "feeGrowthGlobal1X128()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    liquidity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "liquidity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulativeX128: BigNumber;
      initialized: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    }>;

    "observations(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulativeX128: BigNumber;
      initialized: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    }>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    protocolFees(overrides?: CallOverrides): Promise<{
      token0: BigNumber;
      token1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "protocolFees()"(overrides?: CallOverrides): Promise<{
      token0: BigNumber;
      token1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    slot0(overrides?: CallOverrides): Promise<{
      sqrtPriceX96: BigNumber;
      tick: number;
      observationIndex: number;
      observationCardinality: number;
      observationCardinalityNext: number;
      feeProtocol: number;
      unlocked: boolean;
      0: BigNumber;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    "slot0()"(overrides?: CallOverrides): Promise<{
      sqrtPriceX96: BigNumber;
      tick: number;
      observationIndex: number;
      observationCardinality: number;
      observationCardinalityNext: number;
      feeProtocol: number;
      unlocked: boolean;
      0: BigNumber;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    tickBitmap(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tickBitmap(int16)"(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
      tickCumulativeOutside: BigNumber;
      secondsPerLiquidityOutsideX128: BigNumber;
      secondsOutside: number;
      initialized: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: boolean;
    }>;

    "ticks(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
      tickCumulativeOutside: BigNumber;
      secondsPerLiquidityOutsideX128: BigNumber;
      secondsOutside: number;
      initialized: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: boolean;
    }>;
  };

  feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;

  "feeGrowthGlobal0X128()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;

  "feeGrowthGlobal1X128()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  observations(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    blockTimestamp: number;
    tickCumulative: BigNumber;
    secondsPerLiquidityCumulativeX128: BigNumber;
    initialized: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: boolean;
  }>;

  "observations(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    blockTimestamp: number;
    tickCumulative: BigNumber;
    secondsPerLiquidityCumulativeX128: BigNumber;
    initialized: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: boolean;
  }>;

  positions(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    _liquidity: BigNumber;
    feeGrowthInside0LastX128: BigNumber;
    feeGrowthInside1LastX128: BigNumber;
    tokensOwed0: BigNumber;
    tokensOwed1: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "positions(bytes32)"(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    _liquidity: BigNumber;
    feeGrowthInside0LastX128: BigNumber;
    feeGrowthInside1LastX128: BigNumber;
    tokensOwed0: BigNumber;
    tokensOwed1: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  protocolFees(overrides?: CallOverrides): Promise<{
    token0: BigNumber;
    token1: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "protocolFees()"(overrides?: CallOverrides): Promise<{
    token0: BigNumber;
    token1: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  slot0(overrides?: CallOverrides): Promise<{
    sqrtPriceX96: BigNumber;
    tick: number;
    observationIndex: number;
    observationCardinality: number;
    observationCardinalityNext: number;
    feeProtocol: number;
    unlocked: boolean;
    0: BigNumber;
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
    6: boolean;
  }>;

  "slot0()"(overrides?: CallOverrides): Promise<{
    sqrtPriceX96: BigNumber;
    tick: number;
    observationIndex: number;
    observationCardinality: number;
    observationCardinalityNext: number;
    feeProtocol: number;
    unlocked: boolean;
    0: BigNumber;
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
    6: boolean;
  }>;

  tickBitmap(
    wordPosition: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tickBitmap(int16)"(
    wordPosition: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticks(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidityGross: BigNumber;
    liquidityNet: BigNumber;
    feeGrowthOutside0X128: BigNumber;
    feeGrowthOutside1X128: BigNumber;
    tickCumulativeOutside: BigNumber;
    secondsPerLiquidityOutsideX128: BigNumber;
    secondsOutside: number;
    initialized: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: boolean;
  }>;

  "ticks(int24)"(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidityGross: BigNumber;
    liquidityNet: BigNumber;
    feeGrowthOutside0X128: BigNumber;
    feeGrowthOutside1X128: BigNumber;
    tickCumulativeOutside: BigNumber;
    secondsPerLiquidityOutsideX128: BigNumber;
    secondsOutside: number;
    initialized: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: boolean;
  }>;

  callStatic: {
    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;

    "feeGrowthGlobal0X128()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;

    "feeGrowthGlobal1X128()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulativeX128: BigNumber;
      initialized: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    }>;

    "observations(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulativeX128: BigNumber;
      initialized: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
    }>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      _liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    protocolFees(overrides?: CallOverrides): Promise<{
      token0: BigNumber;
      token1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "protocolFees()"(overrides?: CallOverrides): Promise<{
      token0: BigNumber;
      token1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    slot0(overrides?: CallOverrides): Promise<{
      sqrtPriceX96: BigNumber;
      tick: number;
      observationIndex: number;
      observationCardinality: number;
      observationCardinalityNext: number;
      feeProtocol: number;
      unlocked: boolean;
      0: BigNumber;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    "slot0()"(overrides?: CallOverrides): Promise<{
      sqrtPriceX96: BigNumber;
      tick: number;
      observationIndex: number;
      observationCardinality: number;
      observationCardinalityNext: number;
      feeProtocol: number;
      unlocked: boolean;
      0: BigNumber;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    tickBitmap(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickBitmap(int16)"(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
      tickCumulativeOutside: BigNumber;
      secondsPerLiquidityOutsideX128: BigNumber;
      secondsOutside: number;
      initialized: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: boolean;
    }>;

    "ticks(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
      tickCumulativeOutside: BigNumber;
      secondsPerLiquidityOutsideX128: BigNumber;
      secondsOutside: number;
      initialized: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: boolean;
    }>;
  };

  filters: {};

  estimateGas: {
    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;

    "feeGrowthGlobal0X128()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;

    "feeGrowthGlobal1X128()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "observations(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    slot0(overrides?: CallOverrides): Promise<BigNumber>;

    "slot0()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickBitmap(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickBitmap(int16)"(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(tick: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ticks(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeGrowthGlobal0X128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeGrowthGlobal0X128()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeGrowthGlobal1X128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeGrowthGlobal1X128()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "observations(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positions(bytes32)"(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slot0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "slot0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickBitmap(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickBitmap(int16)"(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ticks(int24)"(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
