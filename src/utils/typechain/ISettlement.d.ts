/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISettlementInterface extends ethers.utils.Interface {
  functions: {
    "setEthPriceProvider(address)": FunctionFragment;
    "stakeTokensForNoPriceConfidence(uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "unstakeTokensForNoPriceConfidence()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setEthPriceProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokensForNoPriceConfidence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeTokensForNoPriceConfidence",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "setEthPriceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokensForNoPriceConfidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTokensForNoPriceConfidence",
    data: BytesLike
  ): Result;

  events: {
    "NoConfidenceConfirmed(address)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "SettlementCollateralForHue(uint64,address,uint256,uint256)": EventFragment;
    "SettlementInitialized(uint256)": EventFragment;
    "SettlementWithdrawCollateral(uint64,address,uint256)": EventFragment;
    "StakedNoConfidenceTokens(address,uint256)": EventFragment;
    "UnstakedNoConfidenceTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NoConfidenceConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementCollateralForHue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettlementWithdrawCollateral"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedNoConfidenceTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedNoConfidenceTokens"): EventFragment;
}

export class ISettlement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISettlementInterface;

  functions: {
    setEthPriceProvider(
      aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTokensForNoPriceConfidence(
      countTCPToStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeTokensForNoPriceConfidence(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  setEthPriceProvider(
    aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTokensForNoPriceConfidence(
    countTCPToStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeTokensForNoPriceConfidence(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setEthPriceProvider(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTokensForNoPriceConfidence(
      countTCPToStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    unstakeTokensForNoPriceConfidence(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NoConfidenceConfirmed(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    ParameterUpdatedAddress(
      paramName?: string | null,
      _address?: string | null
    ): TypedEventFilter<
      [string, string],
      { paramName: string; _address: string }
    >;

    SettlementCollateralForHue(
      positionID?: BigNumberish | null,
      caller?: string | null,
      hueCount?: null,
      collateralCount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        positionID: BigNumber;
        caller: string;
        hueCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    SettlementInitialized(
      settlementDiscoveryStartTime?: null
    ): TypedEventFilter<
      [BigNumber],
      { settlementDiscoveryStartTime: BigNumber }
    >;

    SettlementWithdrawCollateral(
      positionID?: BigNumberish | null,
      owner?: string | null,
      collateralToWithdraw?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { positionID: BigNumber; owner: string; collateralToWithdraw: BigNumber }
    >;

    StakedNoConfidenceTokens(
      account?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; count: BigNumber }
    >;

    UnstakedNoConfidenceTokens(
      account?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; count: BigNumber }
    >;
  };

  estimateGas: {
    setEthPriceProvider(
      aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTokensForNoPriceConfidence(
      countTCPToStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeTokensForNoPriceConfidence(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setEthPriceProvider(
      aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTokensForNoPriceConfidence(
      countTCPToStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeTokensForNoPriceConfidence(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
