/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { MockTfInflationIncentiveDistributionContract } from "./MockTfInflationIncentiveDistributionContract";

export class MockTfInflationIncentiveDistributionContractFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides
  ): Promise<MockTfInflationIncentiveDistributionContract> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockTfInflationIncentiveDistributionContract>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockTfInflationIncentiveDistributionContract {
    return super.attach(
      address
    ) as MockTfInflationIncentiveDistributionContract;
  }
  connect(signer: Signer): MockTfInflationIncentiveDistributionContractFactory {
    return super.connect(
      signer
    ) as MockTfInflationIncentiveDistributionContractFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTfInflationIncentiveDistributionContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockTfInflationIncentiveDistributionContract;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "val",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b505b600160006000508190909055505b610026565b608d806100346000396000f3fe608060405234801560105760006000fd5b5060043610602c5760003560e01c80633c6bb43614603257602c565b60006000fd5b6038604e565b6040518082815260200191505060405180910390f35b6000600050548156fea2646970667358221220f99ec4297897f3c8f182011d91b0cd57c03f71fe55a697417096c8a1273f349b64736f6c63430007060033";
