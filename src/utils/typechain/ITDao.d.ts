/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITDaoInterface extends ethers.utils.Interface {
  functions: {
    "getPosition(uint64)": FunctionFragment;
    "idToToken(uint16)": FunctionFragment;
    "lockTokens(address,uint256,uint8,address)": FunctionFragment;
    "mintVotingRewards(address,uint256)": FunctionFragment;
    "sendUnderlyingVotingRewards(address,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVotingRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUnderlyingVotingRewards",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintVotingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUnderlyingVotingRewards",
    data: BytesLike
  ): Result;

  events: {
    "IncentiveMinted(address,uint256)": EventFragment;
    "InflationAccrued(uint64,uint64)": EventFragment;
    "LiquidationIncentiveContractSet(address)": EventFragment;
    "RewardsClaimed(uint64,address)": EventFragment;
    "TDaoStarted()": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokensLocked(uint16,address,uint8,uint256)": EventFragment;
    "TokensUnlocked(uint16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationAccrued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationIncentiveContractSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TDaoStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export class ITDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITDaoInterface;

  functions: {
    getPosition(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          count: BigNumber;
          startTotalRewards: BigNumber;
          startCumulativeVirtualCount: BigNumber;
          lastPeriodUpdated: BigNumber;
          endPeriod: BigNumber;
          durationMonths: BigNumber;
          tokenID: number;
        }
      ]
    >;

    idToToken(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintVotingRewards(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendUnderlyingVotingRewards(
      governorAlpha: string,
      proposalID: BigNumberish,
      voter: string,
      votePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPosition(
    positionNFTTokenID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      count: BigNumber;
      startTotalRewards: BigNumber;
      startCumulativeVirtualCount: BigNumber;
      lastPeriodUpdated: BigNumber;
      endPeriod: BigNumber;
      durationMonths: BigNumber;
      tokenID: number;
    }
  >;

  idToToken(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  lockTokens(
    token: string,
    count: BigNumberish,
    lockDurationMonths: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintVotingRewards(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendUnderlyingVotingRewards(
    governorAlpha: string,
    proposalID: BigNumberish,
    voter: string,
    votePortion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPosition(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        count: BigNumber;
        startTotalRewards: BigNumber;
        startCumulativeVirtualCount: BigNumber;
        lastPeriodUpdated: BigNumber;
        endPeriod: BigNumber;
        durationMonths: BigNumber;
        tokenID: number;
      }
    >;

    idToToken(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintVotingRewards(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendUnderlyingVotingRewards(
      governorAlpha: string,
      proposalID: BigNumberish,
      voter: string,
      votePortion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IncentiveMinted(
      token?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; count: BigNumber }
    >;

    InflationAccrued(
      currentPeriod?: BigNumberish | null,
      periods?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { currentPeriod: BigNumber; periods: BigNumber }
    >;

    LiquidationIncentiveContractSet(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    RewardsClaimed(
      positionNFTTokenID?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { positionNFTTokenID: BigNumber; owner: string }
    >;

    TDaoStarted(): TypedEventFilter<[], {}>;

    TokenAdded(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokensLocked(
      tokenID?: BigNumberish | null,
      initialOwner?: string | null,
      lockDurationMonths?: BigNumberish | null,
      count?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      {
        tokenID: number;
        initialOwner: string;
        lockDurationMonths: number;
        count: BigNumber;
      }
    >;

    TokensUnlocked(
      tokenID?: BigNumberish | null,
      owner?: string | null,
      count?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { tokenID: number; owner: string; count: BigNumber }
    >;
  };

  estimateGas: {
    getPosition(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToToken(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintVotingRewards(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendUnderlyingVotingRewards(
      governorAlpha: string,
      proposalID: BigNumberish,
      voter: string,
      votePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPosition(
      positionNFTTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokens(
      token: string,
      count: BigNumberish,
      lockDurationMonths: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintVotingRewards(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendUnderlyingVotingRewards(
      governorAlpha: string,
      proposalID: BigNumberish,
      voter: string,
      votePortion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
