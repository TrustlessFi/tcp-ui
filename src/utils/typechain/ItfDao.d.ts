/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ItfDaoInterface extends ethers.utils.Interface {
  functions: {
    "availableSupply()": FunctionFragment;
    "incentiveContractMint(address,uint256)": FunctionFragment;
    "voteInUnderlyingProtocol(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveContractMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteInUnderlyingProtocol",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveContractMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteInUnderlyingProtocol",
    data: BytesLike
  ): Result;

  events: {
    "IncentiveMinted(address,uint256)": EventFragment;
    "InflationAccrued(uint64,uint64)": EventFragment;
    "LiquidationIncentiveContractSet(address)": EventFragment;
    "MetaGovernanceDecisionExecuted(address,uint256,bool)": EventFragment;
    "RewardsClaimed(uint64,address)": EventFragment;
    "TFDaoStarted()": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokensLocked(uint16,address,uint8,uint256)": EventFragment;
    "TokensUnlocked(uint16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationAccrued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationIncentiveContractSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MetaGovernanceDecisionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TFDaoStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export class ItfDao extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ItfDaoInterface;

  functions: {
    availableSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "availableSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "availableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  incentiveContractMint(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incentiveContractMint(address,uint256)"(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  voteInUnderlyingProtocol(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "voteInUnderlyingProtocol(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "availableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IncentiveMinted(token: string | null, count: null): EventFilter;

    InflationAccrued(
      currentPeriod: BigNumberish | null,
      periods: null
    ): EventFilter;

    LiquidationIncentiveContractSet(_contract: string | null): EventFilter;

    MetaGovernanceDecisionExecuted(
      governorAlpha: string | null,
      proposalID: BigNumberish | null,
      decision: boolean | null
    ): EventFilter;

    RewardsClaimed(
      positionNFTTokenID: BigNumberish | null,
      owner: string | null
    ): EventFilter;

    TFDaoStarted(): EventFilter;

    TokenAdded(token: string | null): EventFilter;

    TokensLocked(
      tokenID: BigNumberish | null,
      initialOwner: string | null,
      lockDurationMonths: BigNumberish | null,
      count: null
    ): EventFilter;

    TokensUnlocked(
      tokenID: BigNumberish | null,
      owner: string | null,
      count: null
    ): EventFilter;
  };

  estimateGas: {
    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "availableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "availableSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incentiveContractMint(address,uint256)"(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "voteInUnderlyingProtocol(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
