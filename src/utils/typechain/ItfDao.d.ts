/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITFDaoInterface extends ethers.utils.Interface {
  functions: {
    "availableSupply()": FunctionFragment;
    "incentiveContractMint(address,uint256)": FunctionFragment;
    "voteInUnderlyingProtocol(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveContractMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteInUnderlyingProtocol",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveContractMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteInUnderlyingProtocol",
    data: BytesLike
  ): Result;

  events: {
    "IncentiveMinted(address,uint256)": EventFragment;
    "InflationAccrued(uint64,uint64)": EventFragment;
    "LiquidationIncentiveContractSet(address)": EventFragment;
    "MetaGovernanceDecisionExecuted(address,uint256,bool)": EventFragment;
    "RewardsClaimed(uint64,address)": EventFragment;
    "TFDaoStarted()": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokensLocked(uint16,address,uint8,uint256)": EventFragment;
    "TokensUnlocked(uint16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationAccrued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationIncentiveContractSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MetaGovernanceDecisionExecuted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TFDaoStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export class ITFDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITFDaoInterface;

  functions: {
    availableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  incentiveContractMint(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteInUnderlyingProtocol(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IncentiveMinted(
      token?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; count: BigNumber }
    >;

    InflationAccrued(
      currentPeriod?: BigNumberish | null,
      periods?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { currentPeriod: BigNumber; periods: BigNumber }
    >;

    LiquidationIncentiveContractSet(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    MetaGovernanceDecisionExecuted(
      governorAlpha?: string | null,
      proposalID?: BigNumberish | null,
      decision?: boolean | null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { governorAlpha: string; proposalID: BigNumber; decision: boolean }
    >;

    RewardsClaimed(
      positionNFTTokenID?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { positionNFTTokenID: BigNumber; owner: string }
    >;

    TFDaoStarted(): TypedEventFilter<[], {}>;

    TokenAdded(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    TokensLocked(
      tokenID?: BigNumberish | null,
      initialOwner?: string | null,
      lockDurationMonths?: BigNumberish | null,
      count?: null
    ): TypedEventFilter<
      [number, string, number, BigNumber],
      {
        tokenID: number;
        initialOwner: string;
        lockDurationMonths: number;
        count: BigNumber;
      }
    >;

    TokensUnlocked(
      tokenID?: BigNumberish | null,
      owner?: string | null,
      count?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { tokenID: number; owner: string; count: BigNumber }
    >;
  };

  estimateGas: {
    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentiveContractMint(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
