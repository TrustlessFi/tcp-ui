/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPricesInterface extends ethers.utils.Interface {
  functions: {
    "addReferencePool(address)": FunctionFragment;
    "calculateInstantTwappedPrice(address,uint32)": FunctionFragment;
    "calculateInstantTwappedTick(address,uint32)": FunctionFragment;
    "calculateTwappedPrice(address,bool)": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "getRealZhuCountForSinglePoolPosition(address,int24,int24,int24,uint128,uint32)": FunctionFragment;
    "stop()": FunctionFragment;
    "systemObtainReferencePrice(address)": FunctionFragment;
    "zhuTcpPrice(uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInstantTwappedPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInstantTwappedTick",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTwappedPrice",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRealZhuCountForSinglePoolPosition",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemObtainReferencePrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zhuTcpPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInstantTwappedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInstantTwappedTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTwappedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealZhuCountForSinglePoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemObtainReferencePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zhuTcpPrice",
    data: BytesLike
  ): Result;

  events: {
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "PriceUpdated(address,uint256,int24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export class IPrices extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPricesInterface;

  functions: {
    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculateInstantTwappedPrice(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateInstantTwappedPrice(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateInstantTwappedTick(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tick: number;
      0: number;
    }>;

    "calculateInstantTwappedTick(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tick: number;
      0: number;
    }>;

    calculateTwappedPrice(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "calculateTwappedPrice(address,bool)"(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    getRealZhuCountForSinglePoolPosition(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      zhuCount: BigNumber;
      0: BigNumber;
    }>;

    "getRealZhuCountForSinglePoolPosition(address,int24,int24,int24,uint128,uint32)"(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      zhuCount: BigNumber;
      0: BigNumber;
    }>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

    systemObtainReferencePrice(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "systemObtainReferencePrice(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    zhuTcpPrice(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "zhuTcpPrice(uint32)"(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  addReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculateInstantTwappedPrice(
    pool: string,
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateInstantTwappedPrice(address,uint32)"(
    pool: string,
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateInstantTwappedTick(
    pool: string,
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "calculateInstantTwappedTick(address,uint32)"(
    pool: string,
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateTwappedPrice(
    pool: string,
    normalizeDecimals: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateTwappedPrice(address,bool)"(
    pool: string,
    normalizeDecimals: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  getRealZhuCountForSinglePoolPosition(
    pool: string,
    tickLower: BigNumberish,
    tick: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish,
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRealZhuCountForSinglePoolPosition(address,int24,int24,int24,uint128,uint32)"(
    pool: string,
    tickLower: BigNumberish,
    tick: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish,
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  systemObtainReferencePrice(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "systemObtainReferencePrice(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  zhuTcpPrice(
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "zhuTcpPrice(uint32)"(
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateInstantTwappedPrice(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInstantTwappedPrice(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInstantTwappedTick(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "calculateInstantTwappedTick(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateTwappedPrice(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTwappedPrice(address,bool)"(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    getRealZhuCountForSinglePoolPosition(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealZhuCountForSinglePoolPosition(address,int24,int24,int24,uint128,uint32)"(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;

    systemObtainReferencePrice(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "systemObtainReferencePrice(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zhuTcpPrice(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "zhuTcpPrice(uint32)"(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ParameterUpdatedAddress(
      paramName: string | null,
      addr: string | null
    ): EventFilter;

    PriceUpdated(pool: string | null, price: null, tick: null): EventFilter;
  };

  estimateGas: {
    addReferencePool(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculateInstantTwappedPrice(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInstantTwappedPrice(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInstantTwappedTick(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInstantTwappedTick(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTwappedPrice(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTwappedPrice(address,bool)"(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    getRealZhuCountForSinglePoolPosition(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealZhuCountForSinglePoolPosition(address,int24,int24,int24,uint128,uint32)"(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;

    systemObtainReferencePrice(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "systemObtainReferencePrice(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    zhuTcpPrice(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "zhuTcpPrice(uint32)"(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculateInstantTwappedPrice(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInstantTwappedPrice(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInstantTwappedTick(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInstantTwappedTick(address,uint32)"(
      pool: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTwappedPrice(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTwappedPrice(address,bool)"(
      pool: string,
      normalizeDecimals: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getRealZhuCountForSinglePoolPosition(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealZhuCountForSinglePoolPosition(address,int24,int24,int24,uint128,uint32)"(
      pool: string,
      tickLower: BigNumberish,
      tick: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    systemObtainReferencePrice(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "systemObtainReferencePrice(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    zhuTcpPrice(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "zhuTcpPrice(uint32)"(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
