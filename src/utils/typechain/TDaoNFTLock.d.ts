/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TDaoNFTLockInterface extends ethers.utils.Interface {
  functions: {
    "claimDust()": FunctionFragment;
    "claimNFT(uint64)": FunctionFragment;
    "claimTokens(uint64)": FunctionFragment;
    "lockInfo()": FunctionFragment;
    "tDao()": FunctionFragment;
    "tDaoPositionNFT()": FunctionFragment;
    "tDaoToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimDust", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "tDao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tDaoPositionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tDaoToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claimDust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tDaoPositionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tDaoToken", data: BytesLike): Result;

  events: {
    "DustClaimed(uint256)": EventFragment;
    "NFTClaimed(uint64)": EventFragment;
    "TokensClaimed(uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DustClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
}

export class TDaoNFTLock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TDaoNFTLockInterface;

  functions: {
    claimDust(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNFT(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        receiver: string;
        claimablePortion: BigNumber;
        unlockTime: number;
      }
    >;

    tDao(overrides?: CallOverrides): Promise<[string]>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<[string]>;

    tDaoToken(overrides?: CallOverrides): Promise<[string]>;
  };

  claimDust(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNFT(
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number] & {
      receiver: string;
      claimablePortion: BigNumber;
      unlockTime: number;
    }
  >;

  tDao(overrides?: CallOverrides): Promise<string>;

  tDaoPositionNFT(overrides?: CallOverrides): Promise<string>;

  tDaoToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimDust(overrides?: CallOverrides): Promise<void>;

    claimNFT(tokenID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimTokens(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        receiver: string;
        claimablePortion: BigNumber;
        unlockTime: number;
      }
    >;

    tDao(overrides?: CallOverrides): Promise<string>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<string>;

    tDaoToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DustClaimed(
      count?: null
    ): TypedEventFilter<[BigNumber], { count: BigNumber }>;

    NFTClaimed(
      tokenID?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenID: BigNumber }>;

    TokensClaimed(
      tokenID?: BigNumberish | null,
      count?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenID: BigNumber; count: BigNumber }
    >;
  };

  estimateGas: {
    claimDust(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNFT(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokens(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockInfo(overrides?: CallOverrides): Promise<BigNumber>;

    tDao(overrides?: CallOverrides): Promise<BigNumber>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    tDaoToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDust(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNFT(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tDaoPositionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tDaoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
