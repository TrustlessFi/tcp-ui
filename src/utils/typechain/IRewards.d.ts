/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRewardsInterface extends ethers.utils.Interface {
  functions: {
    "accrueRewards()": FunctionFragment;
    "addReferencePool(address)": FunctionFragment;
    "borrowRewardsPortion()": FunctionFragment;
    "completeSetup()": FunctionFragment;
    "removeReferencePool(address)": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRewardsPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReferencePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRewardsPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReferencePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "ClaimedInflationRewards(address,uint256)": EventFragment;
    "CollectedFees(address,uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionCreated(address,uint16,uint256,int24,int24,uint128)": EventFragment;
    "LiquidityPositionDecreased(uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionIncreased(uint256,uint128)": EventFragment;
    "LiquidityPositionLiquidated(uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionRemoved(uint256,uint256,uint256)": EventFragment;
    "ParameterUpdated(string,uint256)": EventFragment;
    "ParameterUpdated128(string,uint256)": EventFragment;
    "ParameterUpdated32(string,uint256)": EventFragment;
    "ParameterUpdated64(string,uint256)": EventFragment;
    "ParameterUpdatedAddress(string,address)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsDistributed(address,uint64,uint256)": EventFragment;
    "RewardsPortionsUpdated(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedInflationRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectedFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionIncreased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionLiquidated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated128"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated64"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdatedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPortionsUpdated"): EventFragment;
}

export class IRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRewardsInterface;

  functions: {
    accrueRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "accrueRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stop(overrides?: Overrides): Promise<ContractTransaction>;

    "stop()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  accrueRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "accrueRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  addReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

  completeSetup(overrides?: Overrides): Promise<ContractTransaction>;

  "completeSetup()"(overrides?: Overrides): Promise<ContractTransaction>;

  removeReferencePool(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeReferencePool(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stop(overrides?: Overrides): Promise<ContractTransaction>;

  "stop()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    accrueRewards(overrides?: CallOverrides): Promise<void>;

    "accrueRewards()"(overrides?: CallOverrides): Promise<void>;

    addReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(overrides?: CallOverrides): Promise<void>;

    "completeSetup()"(overrides?: CallOverrides): Promise<void>;

    removeReferencePool(pool: string, overrides?: CallOverrides): Promise<void>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    "stop()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ClaimedInflationRewards(
      owner: string | null,
      nftTokenID: BigNumberish | null
    ): EventFilter;

    CollectedFees(
      owner: string | null,
      nftTokenID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    LiquidityPositionCreated(
      owner: string | null,
      poolID: BigNumberish | null,
      nftID: BigNumberish | null,
      tickLower: null,
      tickUpper: null,
      liquidity: null
    ): EventFilter;

    LiquidityPositionDecreased(
      nftID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    LiquidityPositionIncreased(
      nftID: BigNumberish | null,
      liquidity: null
    ): EventFilter;

    LiquidityPositionLiquidated(
      nftID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    LiquidityPositionRemoved(
      nftID: BigNumberish | null,
      amount0: null,
      amount1: null
    ): EventFilter;

    ParameterUpdated(paramName: string | null, value: null): EventFilter;

    ParameterUpdated128(paramName: string | null, value: null): EventFilter;

    ParameterUpdated32(paramName: string | null, value: null): EventFilter;

    ParameterUpdated64(paramName: string | null, value: null): EventFilter;

    ParameterUpdatedAddress(paramName: string | null, value: null): EventFilter;

    RewardsAccrued(count: null, periods: null): EventFilter;

    RewardsDistributed(
      account: string | null,
      period: BigNumberish | null,
      tcpRewards: null
    ): EventFilter;

    RewardsPortionsUpdated(
      protocolPortion: null,
      collateralPortion: null,
      referencePortion: null
    ): EventFilter;
  };

  estimateGas: {
    accrueRewards(overrides?: Overrides): Promise<BigNumber>;

    "accrueRewards()"(overrides?: Overrides): Promise<BigNumber>;

    addReferencePool(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowRewardsPortion(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowRewardsPortion()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSetup(overrides?: Overrides): Promise<BigNumber>;

    "completeSetup()"(overrides?: Overrides): Promise<BigNumber>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stop(overrides?: Overrides): Promise<BigNumber>;

    "stop()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "accrueRewards()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    addReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowRewardsPortion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowRewardsPortion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSetup(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeSetup()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    removeReferencePool(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeReferencePool(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stop()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
