/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRewardsInterface extends ethers.utils.Interface {
  functions: {
    "accrueRewards()": FunctionFragment;
    "stop()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrueRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accrueRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;

  events: {
    "LiquidationPenaltyUpdated(uint64)": EventFragment;
    "LiquidityPositionCreated(address,uint16,uint256,int24,int24,uint128)": EventFragment;
    "LiquidityPositionDecreased(uint256,uint256,uint256)": EventFragment;
    "LiquidityPositionIncreased(uint256,uint128)": EventFragment;
    "LiquidityPositionLiquidated(uint256,address)": EventFragment;
    "LiquidityPositionRemoved(uint256,uint256,uint256)": EventFragment;
    "MaxCollateralLiquidityDecreasePerPeriodUpdated(uint64)": EventFragment;
    "MinHueCountPerPositionUpdated(uint128)": EventFragment;
    "PoolAdded(address,uint16,uint64)": EventFragment;
    "PoolIncentiveUpdated(uint16,uint64)": EventFragment;
    "RewardsAccrued(uint256,uint64)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256)": EventFragment;
    "RewardsDistributed(address,bool,uint256)": EventFragment;
    "TwapDurationUpdated(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationPenaltyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionIncreased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPositionLiquidated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPositionRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxCollateralLiquidityDecreasePerPeriodUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinHueCountPerPositionUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolIncentiveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwapDurationUpdated"): EventFragment;
}

export class IRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRewardsInterface;

  functions: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accrueRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accrueRewards(overrides?: CallOverrides): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LiquidationPenaltyUpdated(
      penalty?: null
    ): TypedEventFilter<[BigNumber], { penalty: BigNumber }>;

    LiquidityPositionCreated(
      owner?: string | null,
      poolID?: BigNumberish | null,
      nftID?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, BigNumber, number, number, BigNumber],
      {
        owner: string;
        poolID: number;
        nftID: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
      }
    >;

    LiquidityPositionDecreased(
      nftID?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { nftID: BigNumber; amount0: BigNumber; amount1: BigNumber }
    >;

    LiquidityPositionIncreased(
      nftID?: BigNumberish | null,
      liquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { nftID: BigNumber; liquidity: BigNumber }
    >;

    LiquidityPositionLiquidated(
      nftID?: BigNumberish | null,
      liquidator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { nftID: BigNumber; liquidator: string }
    >;

    LiquidityPositionRemoved(
      nftID?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { nftID: BigNumber; amount0: BigNumber; amount1: BigNumber }
    >;

    MaxCollateralLiquidityDecreasePerPeriodUpdated(
      decreasePortion?: null
    ): TypedEventFilter<[BigNumber], { decreasePortion: BigNumber }>;

    MinHueCountPerPositionUpdated(
      min?: null
    ): TypedEventFilter<[BigNumber], { min: BigNumber }>;

    PoolAdded(
      pool?: string | null,
      poolID?: BigNumberish | null,
      rewardsPortion?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { pool: string; poolID: number; rewardsPortion: BigNumber }
    >;

    PoolIncentiveUpdated(
      poolID?: BigNumberish | null,
      incentive?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { poolID: number; incentive: BigNumber }
    >;

    RewardsAccrued(
      count?: null,
      periods?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { count: BigNumber; periods: BigNumber }
    >;

    RewardsClaimed(
      caller?: string | null,
      nftTokenID?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        caller: string;
        nftTokenID: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    RewardsDistributed(
      account?: string | null,
      isKickback?: boolean | null,
      tcpRewards?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { account: string; isKickback: boolean; tcpRewards: BigNumber }
    >;

    TwapDurationUpdated(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;
  };

  estimateGas: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrueRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
