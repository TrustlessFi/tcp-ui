/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
interface TDaoGovernorAlphaInterface extends ethers.utils.Interface {
=======
interface GovernorAlphaWithVotingRewardsInterface
  extends ethers.utils.Interface {
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
interface TDaoGovernorAlphaInterface extends ethers.utils.Interface {
>>>>>>> master
  functions: {
    "BALLOT_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "INFLATION_PERCENTAGE()": FunctionFragment;
    "__abdicate()": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
<<<<<<< HEAD
=======
    "claimUnderlyingVotingRewards(uint256)": FunctionFragment;
>>>>>>> master
    "claimVotingRewards(uint256)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getAllProposals(address)": FunctionFragment;
<<<<<<< HEAD
    "getReceipt(uint256,address)": FunctionFragment;
    "guardian()": FunctionFragment;
=======
    "getMetaProposalParameters(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "hasClaimedUnderlyingRewards(uint256,address)": FunctionFragment;
>>>>>>> master
    "implementsVotingRewardsWithToken()": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "name()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address[],string[],bytes[],string)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "state(uint256)": FunctionFragment;
<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
    "tDao()": FunctionFragment;
=======
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
    "timelock()": FunctionFragment;
=======
    "tDao()": FunctionFragment;
    "timelock()": FunctionFragment;
    "voteInUnderlyingProtocol(address,uint256)": FunctionFragment;
>>>>>>> master
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "votingPeriodBlocks()": FunctionFragment;
    "votingToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INFLATION_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__abdicate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
<<<<<<< HEAD
=======
    functionFragment: "claimUnderlyingVotingRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
>>>>>>> master
    functionFragment: "claimVotingRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values: [string]
  ): string;
  encodeFunctionData(
<<<<<<< HEAD
=======
    functionFragment: "getMetaProposalParameters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
>>>>>>> master
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
<<<<<<< HEAD
=======
    functionFragment: "hasClaimedUnderlyingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
>>>>>>> master
    functionFragment: "implementsVotingRewardsWithToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
  encodeFunctionData(functionFragment: "tDao", values?: undefined): string;
=======
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
=======
  encodeFunctionData(functionFragment: "tDao", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteInUnderlyingProtocol",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
>>>>>>> master
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriodBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INFLATION_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__abdicate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
<<<<<<< HEAD
=======
    functionFragment: "claimUnderlyingVotingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
>>>>>>> master
    functionFragment: "claimVotingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
<<<<<<< HEAD
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
=======
  decodeFunctionResult(
    functionFragment: "getMetaProposalParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedUnderlyingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
>>>>>>> master
    functionFragment: "implementsVotingRewardsWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
  decodeFunctionResult(functionFragment: "tDao", data: BytesLike): Result;
=======
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
=======
  decodeFunctionResult(functionFragment: "tDao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteInUnderlyingProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
>>>>>>> master
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriodBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingToken",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalQueued(uint256,uint256)": EventFragment;
<<<<<<< HEAD
=======
    "UnderlyingVotingRewardsDistributed(address,uint256)": EventFragment;
>>>>>>> master
    "VoteCast(address,uint256,bool,uint256)": EventFragment;
    "VotingRewardsDistributed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
<<<<<<< HEAD
=======
  getEvent(
    nameOrSignatureOrTopic: "UnderlyingVotingRewardsDistributed"
  ): EventFragment;
>>>>>>> master
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingRewardsDistributed"): EventFragment;
}

<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
export class TDaoGovernorAlpha extends BaseContract {
=======
export class GovernorAlphaWithVotingRewards extends BaseContract {
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
export class TDaoGovernorAlpha extends BaseContract {
>>>>>>> master
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
  interface: TDaoGovernorAlphaInterface;
=======
  interface: GovernorAlphaWithVotingRewardsInterface;
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
  interface: TDaoGovernorAlphaInterface;
>>>>>>> master

  functions: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    INFLATION_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    __abdicate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

<<<<<<< HEAD
    claimVotingRewards(
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
      proposalId: BigNumberish,
=======
      proposalID: BigNumberish,
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
    claimUnderlyingVotingRewards(
      proposalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimVotingRewards(
      proposalID: BigNumberish,
>>>>>>> master
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[]] & {
        targets: string[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string[],
          string[],
          string[],
          string,
          string,
          number,
          number,
          BigNumber,
          number,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          targets: string[];
          signatures: string[];
          calldatas: string[];
          ipfsHash: string;
          proposer: string;
          eta: number;
          id: number;
          forVotes: BigNumber;
          startBlock: number;
          endBlock: number;
          canceled: boolean;
          executed: boolean;
          againstVotes: BigNumber;
          initialSupply: BigNumber;
        })[],
        number[],
        ([boolean, boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          rewardReceived: boolean;
          votes: BigNumber;
        })[]
      ] & {
        _proposals: ([
          string[],
          string[],
          string[],
          string,
          string,
          number,
          number,
          BigNumber,
          number,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          targets: string[];
          signatures: string[];
          calldatas: string[];
          ipfsHash: string;
          proposer: string;
          eta: number;
          id: number;
          forVotes: BigNumber;
          startBlock: number;
          endBlock: number;
          canceled: boolean;
          executed: boolean;
          againstVotes: BigNumber;
          initialSupply: BigNumber;
        })[];
        _proposalStates: number[];
        _receipts: ([boolean, boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          rewardReceived: boolean;
          votes: BigNumber;
        })[];
      }
    >;

<<<<<<< HEAD
=======
    getMetaProposalParameters(
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        governorAlpha: string;
        underlyingProposalID: BigNumber;
        moreForThanAgainst: boolean;
      }
    >;

>>>>>>> master
    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          rewardReceived: boolean;
          votes: BigNumber;
        }
      ]
    >;

    guardian(overrides?: CallOverrides): Promise<[string]>;

<<<<<<< HEAD
=======
    hasClaimedUnderlyingRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

>>>>>>> master
    implementsVotingRewardsWithToken(
      overrides?: CallOverrides
    ): Promise<[string]>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[number]>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        initialSupply: BigNumber;
      }
    >;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
    tDao(overrides?: CallOverrides): Promise<[string]>;

=======
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
    timelock(overrides?: CallOverrides): Promise<[string]>;

=======
    tDao(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

>>>>>>> master
    votingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriodBlocks(overrides?: CallOverrides): Promise<[number]>;

    votingToken(overrides?: CallOverrides): Promise<[string]>;
  };

  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  INFLATION_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  __abdicate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

<<<<<<< HEAD
  claimVotingRewards(
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
    proposalId: BigNumberish,
=======
    proposalID: BigNumberish,
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
  claimUnderlyingVotingRewards(
    proposalID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimVotingRewards(
    proposalID: BigNumberish,
>>>>>>> master
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string[]] & {
      targets: string[];
      signatures: string[];
      calldatas: string[];
    }
  >;

  getAllProposals(
    voter: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string[],
        string[],
        string[],
        string,
        string,
        number,
        number,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        initialSupply: BigNumber;
      })[],
      number[],
      ([boolean, boolean, boolean, BigNumber] & {
        hasVoted: boolean;
        support: boolean;
        rewardReceived: boolean;
        votes: BigNumber;
      })[]
    ] & {
      _proposals: ([
        string[],
        string[],
        string[],
        string,
        string,
        number,
        number,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        targets: string[];
        signatures: string[];
        calldatas: string[];
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        initialSupply: BigNumber;
      })[];
      _proposalStates: number[];
      _receipts: ([boolean, boolean, boolean, BigNumber] & {
        hasVoted: boolean;
        support: boolean;
        rewardReceived: boolean;
        votes: BigNumber;
      })[];
    }
  >;

<<<<<<< HEAD
=======
  getMetaProposalParameters(
    proposalID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      governorAlpha: string;
      underlyingProposalID: BigNumber;
      moreForThanAgainst: boolean;
    }
  >;

>>>>>>> master
  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, BigNumber] & {
      hasVoted: boolean;
      support: boolean;
      rewardReceived: boolean;
      votes: BigNumber;
    }
  >;

  guardian(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
=======
  hasClaimedUnderlyingRewards(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

>>>>>>> master
  implementsVotingRewardsWithToken(overrides?: CallOverrides): Promise<string>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<number>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      number,
      BigNumber,
      number,
      number,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      ipfsHash: string;
      proposer: string;
      eta: number;
      id: number;
      forVotes: BigNumber;
      startBlock: number;
      endBlock: number;
      canceled: boolean;
      executed: boolean;
      againstVotes: BigNumber;
      initialSupply: BigNumber;
    }
  >;

  propose(
    targets: string[],
    signatures: string[],
    calldatas: BytesLike[],
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;
<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
=======
>>>>>>> master

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  tDao(overrides?: CallOverrides): Promise<string>;
<<<<<<< HEAD
=======

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts

  timelock(overrides?: CallOverrides): Promise<string>;

=======

  timelock(overrides?: CallOverrides): Promise<string>;

  voteInUnderlyingProtocol(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

>>>>>>> master
  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriodBlocks(overrides?: CallOverrides): Promise<number>;

  votingToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    INFLATION_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    __abdicate(overrides?: CallOverrides): Promise<void>;

    cancel(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

<<<<<<< HEAD
    claimVotingRewards(
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
      proposalId: BigNumberish,
=======
      proposalID: BigNumberish,
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
    claimUnderlyingVotingRewards(
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimVotingRewards(
      proposalID: BigNumberish,
>>>>>>> master
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[]] & {
        targets: string[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string[],
          string[],
          string[],
          string,
          string,
          number,
          number,
          BigNumber,
          number,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          targets: string[];
          signatures: string[];
          calldatas: string[];
          ipfsHash: string;
          proposer: string;
          eta: number;
          id: number;
          forVotes: BigNumber;
          startBlock: number;
          endBlock: number;
          canceled: boolean;
          executed: boolean;
          againstVotes: BigNumber;
          initialSupply: BigNumber;
        })[],
        number[],
        ([boolean, boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          rewardReceived: boolean;
          votes: BigNumber;
        })[]
      ] & {
        _proposals: ([
          string[],
          string[],
          string[],
          string,
          string,
          number,
          number,
          BigNumber,
          number,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          targets: string[];
          signatures: string[];
          calldatas: string[];
          ipfsHash: string;
          proposer: string;
          eta: number;
          id: number;
          forVotes: BigNumber;
          startBlock: number;
          endBlock: number;
          canceled: boolean;
          executed: boolean;
          againstVotes: BigNumber;
          initialSupply: BigNumber;
        })[];
        _proposalStates: number[];
        _receipts: ([boolean, boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          rewardReceived: boolean;
          votes: BigNumber;
        })[];
      }
    >;

<<<<<<< HEAD
=======
    getMetaProposalParameters(
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        governorAlpha: string;
        underlyingProposalID: BigNumber;
        moreForThanAgainst: boolean;
      }
    >;

>>>>>>> master
    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, BigNumber] & {
        hasVoted: boolean;
        support: boolean;
        rewardReceived: boolean;
        votes: BigNumber;
      }
    >;

    guardian(overrides?: CallOverrides): Promise<string>;

<<<<<<< HEAD
=======
    hasClaimedUnderlyingRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

>>>>>>> master
    implementsVotingRewardsWithToken(
      overrides?: CallOverrides
    ): Promise<string>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<number>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        ipfsHash: string;
        proposer: string;
        eta: number;
        id: number;
        forVotes: BigNumber;
        startBlock: number;
        endBlock: number;
        canceled: boolean;
        executed: boolean;
        againstVotes: BigNumber;
        initialSupply: BigNumber;
      }
    >;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;
<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
=======
>>>>>>> master

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    tDao(overrides?: CallOverrides): Promise<string>;
<<<<<<< HEAD
=======

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts

    timelock(overrides?: CallOverrides): Promise<string>;

=======

    timelock(overrides?: CallOverrides): Promise<string>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

>>>>>>> master
    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodBlocks(overrides?: CallOverrides): Promise<number>;

    votingToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ProposalCanceled(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    ProposalCreated(
      id?: BigNumberish | null,
      proposer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; proposer: string }
    >;

    ProposalExecuted(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    ProposalQueued(
      id?: BigNumberish | null,
      eta?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; eta: BigNumber }
    >;

<<<<<<< HEAD
=======
    UnderlyingVotingRewardsDistributed(
      caller?: string | null,
      proposalID?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; proposalID: BigNumber }
    >;

>>>>>>> master
    VoteCast(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      support?: boolean | null,
      votes?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        voter: string;
        proposalId: BigNumber;
        support: boolean;
        votes: BigNumber;
      }
    >;

    VotingRewardsDistributed(
      voter?: string | null,
      count?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; count: BigNumber }
    >;
  };

  estimateGas: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    INFLATION_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    __abdicate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

<<<<<<< HEAD
    claimVotingRewards(
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
      proposalId: BigNumberish,
=======
      proposalID: BigNumberish,
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
    claimUnderlyingVotingRewards(
      proposalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimVotingRewards(
      proposalID: BigNumberish,
>>>>>>> master
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

<<<<<<< HEAD
=======
    getMetaProposalParameters(
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

>>>>>>> master
    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

<<<<<<< HEAD
=======
    hasClaimedUnderlyingRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

>>>>>>> master
    implementsVotingRewardsWithToken(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
    tDao(overrides?: CallOverrides): Promise<BigNumber>;

=======
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
    timelock(overrides?: CallOverrides): Promise<BigNumber>;

=======
    tDao(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

>>>>>>> master
    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    votingToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INFLATION_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __abdicate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

<<<<<<< HEAD
    claimVotingRewards(
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
      proposalId: BigNumberish,
=======
      proposalID: BigNumberish,
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
=======
    claimUnderlyingVotingRewards(
      proposalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimVotingRewards(
      proposalID: BigNumberish,
>>>>>>> master
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllProposals(
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

<<<<<<< HEAD
=======
    getMetaProposalParameters(
      proposalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

>>>>>>> master
    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

<<<<<<< HEAD
=======
    hasClaimedUnderlyingRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

>>>>>>> master
    implementsVotingRewardsWithToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      signatures: string[],
      calldatas: BytesLike[],
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

<<<<<<< HEAD
<<<<<<< HEAD:src/utils/typechain/TDaoGovernorAlpha.d.ts
    tDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

=======
>>>>>>> master:src/utils/typechain/GovernorAlphaWithVotingRewards.d.ts
    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

=======
    tDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteInUnderlyingProtocol(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

>>>>>>> master
    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriodBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
