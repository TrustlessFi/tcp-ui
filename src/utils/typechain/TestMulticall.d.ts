/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestMulticallInterface extends ethers.utils.Interface {
  functions: {
    "functionThatReturnsTuple(uint256,uint256)": FunctionFragment;
    "functionThatRevertsWithError(string)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "paid()": FunctionFragment;
    "pays()": FunctionFragment;
    "returnSender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "functionThatReturnsTuple",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionThatRevertsWithError",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "paid", values?: undefined): string;
  encodeFunctionData(functionFragment: "pays", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "functionThatReturnsTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionThatRevertsWithError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pays", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnSender",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestMulticall extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestMulticallInterface;

  functions: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tuple: { a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber };
      0: { a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "functionThatReturnsTuple(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tuple: { a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber };
      0: { a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "functionThatRevertsWithError(string)"(
      error: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    paid(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "paid()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    pays(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "pays()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    returnSender(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "returnSender()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  functionThatReturnsTuple(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber }>;

  "functionThatReturnsTuple(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber }>;

  functionThatRevertsWithError(
    error: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "functionThatRevertsWithError(string)"(
    error: string,
    overrides?: CallOverrides
  ): Promise<void>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  paid(overrides?: CallOverrides): Promise<BigNumber>;

  "paid()"(overrides?: CallOverrides): Promise<BigNumber>;

  pays(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "pays()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  returnSender(overrides?: CallOverrides): Promise<string>;

  "returnSender()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber }>;

    "functionThatReturnsTuple(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ a: BigNumber; b: BigNumber; 0: BigNumber; 1: BigNumber }>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "functionThatRevertsWithError(string)"(
      error: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    paid(overrides?: CallOverrides): Promise<BigNumber>;

    "paid()"(overrides?: CallOverrides): Promise<BigNumber>;

    pays(overrides?: CallOverrides): Promise<void>;

    "pays()"(overrides?: CallOverrides): Promise<void>;

    returnSender(overrides?: CallOverrides): Promise<string>;

    "returnSender()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionThatReturnsTuple(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionThatRevertsWithError(string)"(
      error: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    paid(overrides?: CallOverrides): Promise<BigNumber>;

    "paid()"(overrides?: CallOverrides): Promise<BigNumber>;

    pays(overrides?: PayableOverrides): Promise<BigNumber>;

    "pays()"(overrides?: PayableOverrides): Promise<BigNumber>;

    returnSender(overrides?: CallOverrides): Promise<BigNumber>;

    "returnSender()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionThatReturnsTuple(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionThatRevertsWithError(string)"(
      error: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "multicall(bytes[])"(
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    paid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pays(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "pays()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    returnSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "returnSender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
