/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestMulticallInterface extends ethers.utils.Interface {
  functions: {
    "functionThatReturnsTuple(uint256,uint256)": FunctionFragment;
    "functionThatRevertsWithError(string)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "paid()": FunctionFragment;
    "pays()": FunctionFragment;
    "returnSender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "functionThatReturnsTuple",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionThatRevertsWithError",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "paid", values?: undefined): string;
  encodeFunctionData(functionFragment: "pays", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "functionThatReturnsTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionThatRevertsWithError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pays", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnSender",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestMulticall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestMulticallInterface;

  functions: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }] & {
        tuple: [BigNumber, BigNumber] & { a: BigNumber; b: BigNumber };
      }
    >;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paid(overrides?: CallOverrides): Promise<[BigNumber]>;

    pays(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnSender(overrides?: CallOverrides): Promise<[string]>;
  };

  functionThatReturnsTuple(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

  functionThatRevertsWithError(
    error: string,
    overrides?: CallOverrides
  ): Promise<void>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paid(overrides?: CallOverrides): Promise<BigNumber>;

  pays(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnSender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    paid(overrides?: CallOverrides): Promise<BigNumber>;

    pays(overrides?: CallOverrides): Promise<void>;

    returnSender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paid(overrides?: CallOverrides): Promise<BigNumber>;

    pays(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnSender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    functionThatReturnsTuple(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionThatRevertsWithError(
      error: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pays(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
