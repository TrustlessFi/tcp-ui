/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AccountingTestableInterface extends ethers.utils.Interface {
  functions: {
    "TICK_SPACING()": FunctionFragment;
    "__addPositionToIndex(address,uint256)": FunctionFragment;
    "addPositionToIndex(address,uint256)": FunctionFragment;
    "approveUIs(uint32[])": FunctionFragment;
    "debt()": FunctionFragment;
    "debtPositionIndexingEnabled()": FunctionFragment;
    "decreaseDebt(uint256)": FunctionFragment;
    "decreasePoolLiquidity(address,uint256)": FunctionFragment;
    "deletePoolPosition(uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "disapproveUIs(uint32[])": FunctionFragment;
    "getBasicPositionInfo(uint64)": FunctionFragment;
    "getPoolPosition(uint256)": FunctionFragment;
    "getPoolPositionNftIdsByOwner(address)": FunctionFragment;
    "getPosition(uint64)": FunctionFragment;
    "getRewardStatus(uint16)": FunctionFragment;
    "getSystemDebtInfo()": FunctionFragment;
    "getTick(uint256,uint256)": FunctionFragment;
    "getUIs(uint32,uint32)": FunctionFragment;
    "governor()": FunctionFragment;
    "hue()": FunctionFragment;
    "increaseDebt(uint256)": FunctionFragment;
    "increaseLentHue(uint256)": FunctionFragment;
    "increasePoolLiquidity(address,uint256)": FunctionFragment;
    "init()": FunctionFragment;
    "lentHue()": FunctionFragment;
    "nextUserInterfaceID()": FunctionFragment;
    "nftPositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onRewardsUpgrade(address)": FunctionFragment;
    "poolLiquidity(address)": FunctionFragment;
    "poolPositionIndexingEnabled()": FunctionFragment;
    "positionsForTick(int24)": FunctionFragment;
    "registerUI(uint64,uint24,string)": FunctionFragment;
    "sendCollateral(address,uint256)": FunctionFragment;
    "sendLentHue(address,uint256)": FunctionFragment;
    "setPoolPosition(uint256,tuple)": FunctionFragment;
    "setPosition(uint64,tuple)": FunctionFragment;
    "setRewardStatus(uint16,tuple)": FunctionFragment;
    "setSystemDebtInfo(tuple)": FunctionFragment;
    "snapRawTickToSpacing(int24,int24)": FunctionFragment;
    "stopIndexingDebtPositions()": FunctionFragment;
    "stopIndexingPoolPositions()": FunctionFragment;
    "stopped()": FunctionFragment;
    "sweepHue()": FunctionFragment;
    "userInterfaces(uint256)": FunctionFragment;
    "validUpdate(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TICK_SPACING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__addPositionToIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPositionToIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveUIs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtPositionIndexingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePoolLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disapproveUIs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPositionNftIdsByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemDebtInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTick",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUIs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "hue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLentHue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(functionFragment: "lentHue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextUserInterfaceID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftPositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onRewardsUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPositionIndexingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionsForTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUI",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendLentHue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPosition",
    values: [
      BigNumberish,
      {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      BigNumberish,
      {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardStatus",
    values: [
      BigNumberish,
      { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemDebtInfo",
    values: [
      {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "snapRawTickToSpacing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopIndexingDebtPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopIndexingPoolPositions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweepHue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userInterfaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validUpdate",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "TICK_SPACING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__addPositionToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPositionToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approveUIs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtPositionIndexingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disapproveUIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPositionNftIdsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUIs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLentHue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lentHue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextUserInterfaceID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftPositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRewardsUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolPositionIndexingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsForTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerUI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendLentHue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemDebtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapRawTickToSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopIndexingDebtPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopIndexingPoolPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepHue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validUpdate",
    data: BytesLike
  ): Result;

  events: {
    "DebtPositionIndexingDisabled()": EventFragment;
    "PoolPositionIndexingDisabled()": EventFragment;
    "Stopped()": EventFragment;
    "UIsApproved(uint32[])": EventFragment;
    "UIsDisapproved(uint32[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DebtPositionIndexingDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolPositionIndexingDisabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UIsApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UIsDisapproved"): EventFragment;
}

export class AccountingTestable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AccountingTestableInterface;

  functions: {
    TICK_SPACING(overrides?: CallOverrides): Promise<[number]>;

    __addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveUIs(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    disapproveUIs(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          cumulativeLiquidity: BigNumber;
          totalRewards: BigNumber;
          lastBlockPositionIncreased: BigNumber;
          liquidity: BigNumber;
          lastTimeRewarded: BigNumber;
          tickLower: number;
          tickUpper: number;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        }
      ] & {
        pp: [
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          string,
          BigNumber
        ] & {
          owner: string;
          poolID: number;
          cumulativeLiquidity: BigNumber;
          totalRewards: BigNumber;
          lastBlockPositionIncreased: BigNumber;
          liquidity: BigNumber;
          lastTimeRewarded: BigNumber;
          tickLower: number;
          tickUpper: number;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        };
      }
    >;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          string,
          BigNumber
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startTCPRewards: BigNumber;
          lastTimeUpdated: BigNumber;
          lastBorrowTime: BigNumber;
          tick: number;
          tickSet: boolean;
          tickIndex: BigNumber;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        }
      ] & {
        dp: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          BigNumber,
          number,
          string,
          BigNumber
        ] & {
          startCumulativeDebt: BigNumber;
          collateral: BigNumber;
          debt: BigNumber;
          startDebtExchangeRate: BigNumber;
          startTCPRewards: BigNumber;
          lastTimeUpdated: BigNumber;
          lastBorrowTime: BigNumber;
          tick: number;
          tickSet: boolean;
          tickIndex: BigNumber;
          ui: number;
          kickbackDestination: string;
          kickbackPortion: BigNumber;
        };
      }
    >;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalRewards: BigNumber;
          cumulativeLiquidity: BigNumber;
        }
      ]
    >;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          debt: BigNumber;
          totalTCPRewards: BigNumber;
          cumulativeDebt: BigNumber;
          debtExchangeRate: BigNumber;
        }
      ]
    >;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUIs(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, number, number, string] & {
          kickbackDestination: string;
          kickbackPortion: BigNumber;
          governanceRating: number;
          tags: number;
          ipfsHash: string;
        })[]
      ] & {
        uis: ([string, BigNumber, number, number, string] & {
          kickbackDestination: string;
          kickbackPortion: BigNumber;
          governanceRating: number;
          tags: number;
          ipfsHash: string;
        })[];
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    hue(overrides?: CallOverrides): Promise<[string]>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLentHue(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lentHue(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextUserInterfaceID(overrides?: CallOverrides): Promise<[number]>;

    nftPositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    registerUI(
      kickbackPortion: BigNumberish,
      tags: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendLentHue(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    stopIndexingDebtPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopIndexingPoolPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    sweepHue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInterfaces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number, string] & {
        kickbackDestination: string;
        kickbackPortion: BigNumber;
        governanceRating: number;
        tags: number;
        ipfsHash: string;
      }
    >;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  TICK_SPACING(overrides?: CallOverrides): Promise<number>;

  __addPositionToIndex(
    owner: string,
    nftID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPositionToIndex(
    owner: string,
    nftID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveUIs(
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

  decreaseDebt(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePoolLiquidity(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deletePoolPosition(
    nftID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  disapproveUIs(
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBasicPositionInfo(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtCount: BigNumber;
      collateralCount: BigNumber;
    }
  >;

  getPoolPosition(
    nftID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      string,
      BigNumber
    ] & {
      owner: string;
      poolID: number;
      cumulativeLiquidity: BigNumber;
      totalRewards: BigNumber;
      lastBlockPositionIncreased: BigNumber;
      liquidity: BigNumber;
      lastTimeRewarded: BigNumber;
      tickLower: number;
      tickUpper: number;
      ui: number;
      kickbackDestination: string;
      kickbackPortion: BigNumber;
    }
  >;

  getPoolPositionNftIdsByOwner(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPosition(
    positionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      BigNumber,
      number,
      string,
      BigNumber
    ] & {
      startCumulativeDebt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
      startDebtExchangeRate: BigNumber;
      startTCPRewards: BigNumber;
      lastTimeUpdated: BigNumber;
      lastBorrowTime: BigNumber;
      tick: number;
      tickSet: boolean;
      tickIndex: BigNumber;
      ui: number;
      kickbackDestination: string;
      kickbackPortion: BigNumber;
    }
  >;

  getRewardStatus(
    poolID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalRewards: BigNumber;
      cumulativeLiquidity: BigNumber;
    }
  >;

  getSystemDebtInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      totalTCPRewards: BigNumber;
      cumulativeDebt: BigNumber;
      debtExchangeRate: BigNumber;
    }
  >;

  getTick(
    collateralCount: BigNumberish,
    debtCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getUIs(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, number, number, string] & {
      kickbackDestination: string;
      kickbackPortion: BigNumber;
      governanceRating: number;
      tags: number;
      ipfsHash: string;
    })[]
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  hue(overrides?: CallOverrides): Promise<string>;

  increaseDebt(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLentHue(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePoolLiquidity(
    pool: string,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lentHue(overrides?: CallOverrides): Promise<BigNumber>;

  nextUserInterfaceID(overrides?: CallOverrides): Promise<number>;

  nftPositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onRewardsUpgrade(
    newRewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

  positionsForTick(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  registerUI(
    kickbackPortion: BigNumberish,
    tags: BigNumberish,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCollateral(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendLentHue(
    dest: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolPosition(
    nftID: BigNumberish,
    pp: {
      owner: string;
      poolID: BigNumberish;
      cumulativeLiquidity: BigNumberish;
      totalRewards: BigNumberish;
      lastBlockPositionIncreased: BigNumberish;
      liquidity: BigNumberish;
      lastTimeRewarded: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      ui: BigNumberish;
      kickbackDestination: string;
      kickbackPortion: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPosition(
    positionID: BigNumberish,
    dp: {
      startCumulativeDebt: BigNumberish;
      collateral: BigNumberish;
      debt: BigNumberish;
      startDebtExchangeRate: BigNumberish;
      startTCPRewards: BigNumberish;
      lastTimeUpdated: BigNumberish;
      lastBorrowTime: BigNumberish;
      tick: BigNumberish;
      tickSet: boolean;
      tickIndex: BigNumberish;
      ui: BigNumberish;
      kickbackDestination: string;
      kickbackPortion: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardStatus(
    poolID: BigNumberish,
    rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSystemDebtInfo(
    _sdi: {
      debt: BigNumberish;
      totalTCPRewards: BigNumberish;
      cumulativeDebt: BigNumberish;
      debtExchangeRate: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapRawTickToSpacing(
    rawTick: BigNumberish,
    tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  stopIndexingDebtPositions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopIndexingPoolPositions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  sweepHue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInterfaces(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number, string] & {
      kickbackDestination: string;
      kickbackPortion: BigNumber;
      governanceRating: number;
      tags: number;
      ipfsHash: string;
    }
  >;

  validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    TICK_SPACING(overrides?: CallOverrides): Promise<number>;

    __addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveUIs(ids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

    decreaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    disapproveUIs(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtCount: BigNumber;
        collateralCount: BigNumber;
      }
    >;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string,
        BigNumber
      ] & {
        owner: string;
        poolID: number;
        cumulativeLiquidity: BigNumber;
        totalRewards: BigNumber;
        lastBlockPositionIncreased: BigNumber;
        liquidity: BigNumber;
        lastTimeRewarded: BigNumber;
        tickLower: number;
        tickUpper: number;
        ui: number;
        kickbackDestination: string;
        kickbackPortion: BigNumber;
      }
    >;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        number,
        string,
        BigNumber
      ] & {
        startCumulativeDebt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
        startDebtExchangeRate: BigNumber;
        startTCPRewards: BigNumber;
        lastTimeUpdated: BigNumber;
        lastBorrowTime: BigNumber;
        tick: number;
        tickSet: boolean;
        tickIndex: BigNumber;
        ui: number;
        kickbackDestination: string;
        kickbackPortion: BigNumber;
      }
    >;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalRewards: BigNumber;
        cumulativeLiquidity: BigNumber;
      }
    >;

    getSystemDebtInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        totalTCPRewards: BigNumber;
        cumulativeDebt: BigNumber;
        debtExchangeRate: BigNumber;
      }
    >;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getUIs(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, number, number, string] & {
        kickbackDestination: string;
        kickbackPortion: BigNumber;
        governanceRating: number;
        tags: number;
        ipfsHash: string;
      })[]
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    hue(overrides?: CallOverrides): Promise<string>;

    increaseDebt(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    increaseLentHue(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init(overrides?: CallOverrides): Promise<void>;

    lentHue(overrides?: CallOverrides): Promise<BigNumber>;

    nextUserInterfaceID(overrides?: CallOverrides): Promise<number>;

    nftPositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poolLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<boolean>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    registerUI(
      kickbackPortion: BigNumberish,
      tags: BigNumberish,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<number>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendLentHue(
      dest: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    stopIndexingDebtPositions(overrides?: CallOverrides): Promise<void>;

    stopIndexingPoolPositions(overrides?: CallOverrides): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    sweepHue(overrides?: CallOverrides): Promise<void>;

    userInterfaces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number, string] & {
        kickbackDestination: string;
        kickbackPortion: BigNumber;
        governanceRating: number;
        tags: number;
        ipfsHash: string;
      }
    >;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    DebtPositionIndexingDisabled(): TypedEventFilter<[], {}>;

    PoolPositionIndexingDisabled(): TypedEventFilter<[], {}>;

    Stopped(): TypedEventFilter<[], {}>;

    UIsApproved(uis?: null): TypedEventFilter<[number[]], { uis: number[] }>;

    UIsDisapproved(uis?: null): TypedEventFilter<[number[]], { uis: number[] }>;
  };

  estimateGas: {
    TICK_SPACING(overrides?: CallOverrides): Promise<BigNumber>;

    __addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveUIs(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    debtPositionIndexingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    disapproveUIs(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUIs(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    hue(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLentHue(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lentHue(overrides?: CallOverrides): Promise<BigNumber>;

    nextUserInterfaceID(overrides?: CallOverrides): Promise<BigNumber>;

    nftPositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolLiquidity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolPositionIndexingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerUI(
      kickbackPortion: BigNumberish,
      tags: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendLentHue(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stopIndexingDebtPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopIndexingPoolPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    sweepHue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInterfaces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validUpdate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TICK_SPACING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPositionToIndex(
      owner: string,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveUIs(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtPositionIndexingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deletePoolPosition(
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disapproveUIs(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBasicPositionInfo(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPosition(
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPositionNftIdsByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      positionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardStatus(
      poolID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemDebtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTick(
      collateralCount: BigNumberish,
      debtCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUIs(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseDebt(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLentHue(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePoolLiquidity(
      pool: string,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lentHue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextUserInterfaceID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftPositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onRewardsUpgrade(
      newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolPositionIndexingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsForTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerUI(
      kickbackPortion: BigNumberish,
      tags: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCollateral(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendLentHue(
      dest: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolPosition(
      nftID: BigNumberish,
      pp: {
        owner: string;
        poolID: BigNumberish;
        cumulativeLiquidity: BigNumberish;
        totalRewards: BigNumberish;
        lastBlockPositionIncreased: BigNumberish;
        liquidity: BigNumberish;
        lastTimeRewarded: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPosition(
      positionID: BigNumberish,
      dp: {
        startCumulativeDebt: BigNumberish;
        collateral: BigNumberish;
        debt: BigNumberish;
        startDebtExchangeRate: BigNumberish;
        startTCPRewards: BigNumberish;
        lastTimeUpdated: BigNumberish;
        lastBorrowTime: BigNumberish;
        tick: BigNumberish;
        tickSet: boolean;
        tickIndex: BigNumberish;
        ui: BigNumberish;
        kickbackDestination: string;
        kickbackPortion: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardStatus(
      poolID: BigNumberish,
      rs: { totalRewards: BigNumberish; cumulativeLiquidity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSystemDebtInfo(
      _sdi: {
        debt: BigNumberish;
        totalTCPRewards: BigNumberish;
        cumulativeDebt: BigNumberish;
        debtExchangeRate: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapRawTickToSpacing(
      rawTick: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopIndexingDebtPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopIndexingPoolPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepHue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInterfaces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
